
PRCU_with_FreeRTOS_2024_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e24  08007e24  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007e24  08007e24  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e24  08007e24  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e24  08007e24  00008e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e28  08007e28  00008e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007e2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000060  08007e8c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  08007e8c  00009d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dabe  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc3  00000000  00000000  00026b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0002a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c0  00000000  00000000  0002c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f15  00000000  00000000  0002d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af85  00000000  00000000  000316cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e60  00000000  00000000  0004c652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e4b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000776c  00000000  00000000  0012e4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00135c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007d78 	.word	0x08007d78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007d78 	.word	0x08007d78

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fd1f 	bl	8001452 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f83e 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f9a4 	bl	8000d64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a1c:	f000 f886 	bl	8000b2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a20:	f000 f8fc 	bl	8000c1c <MX_ADC2_Init>
  MX_SPI2_Init();
 8000a24:	f000 f960 	bl	8000ce8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADCs
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); // Calibrates ADC for low pressure sensor
 8000a28:	217f      	movs	r1, #127	@ 0x7f
 8000a2a:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <main+0x64>)
 8000a2c:	f001 ffe8 	bl	8002a00 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED); // Calibrates ADC for high pressure sensor
 8000a30:	217f      	movs	r1, #127	@ 0x7f
 8000a32:	4810      	ldr	r0, [pc, #64]	@ (8000a74 <main+0x68>)
 8000a34:	f001 ffe4 	bl	8002a00 <HAL_ADCEx_Calibration_Start>

  // Pull SPI chip select line high
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <main+0x6c>)
 8000a40:	f002 fb46 	bl	80030d0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a44:	f004 fb00 	bl	8005048 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_read_senso */
  task_read_sensoHandle = osThreadNew(Start_task_read_sensors, NULL, &task_read_senso_attributes);
 8000a48:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <main+0x70>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <main+0x74>)
 8000a4e:	f004 fb45 	bl	80050dc <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <main+0x78>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000a58:	4a0b      	ldr	r2, [pc, #44]	@ (8000a88 <main+0x7c>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	480b      	ldr	r0, [pc, #44]	@ (8000a8c <main+0x80>)
 8000a5e:	f004 fb3d 	bl	80050dc <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <main+0x84>)
 8000a66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a68:	f004 fb12 	bl	8005090 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <main+0x60>
 8000a70:	2000007c 	.word	0x2000007c
 8000a74:	200000e8 	.word	0x200000e8
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	08007dc0 	.word	0x08007dc0
 8000a80:	08000e31 	.word	0x08000e31
 8000a84:	200001b8 	.word	0x200001b8
 8000a88:	08007de4 	.word	0x08007de4
 8000a8c:	08001035 	.word	0x08001035
 8000a90:	200001bc 	.word	0x200001bc

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	@ 0x50
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	2238      	movs	r2, #56	@ 0x38
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f007 f880 	bl	8007ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aba:	f002 fb3b 	bl	8003134 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000ad8:	234b      	movs	r3, #75	@ 0x4b
 8000ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 fbd5 	bl	800329c <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000af8:	f000 fac4 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2303      	movs	r3, #3
 8000b02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2104      	movs	r1, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fed3 	bl	80038c0 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b20:	f000 fab0 	bl	8001084 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	@ 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	@ 0x30
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2220      	movs	r2, #32
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 f82f 	bl	8007ba8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b52:	4b30      	ldr	r3, [pc, #192]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b60:	4b2c      	ldr	r3, [pc, #176]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b66:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb4:	4817      	ldr	r0, [pc, #92]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000bb6:	f000 fed5 	bl	8001964 <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bc0:	f000 fa60 	bl	8001084 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4811      	ldr	r0, [pc, #68]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000bd0:	f001 ff78 	bl	8002ac4 <HAL_ADCEx_MultiModeConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bda:	f000 fa53 	bl	8001084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_ADC1_Init+0xec>)
 8000be0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be2:	2306      	movs	r3, #6
 8000be4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000be6:	2304      	movs	r3, #4
 8000be8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bea:	237f      	movs	r3, #127	@ 0x7f
 8000bec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <MX_ADC1_Init+0xe8>)
 8000bfc:	f001 f9d8 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c06:	f000 fa3d 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3730      	adds	r7, #48	@ 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000007c 	.word	0x2000007c
 8000c18:	32601000 	.word	0x32601000

08000c1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2220      	movs	r2, #32
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f006 ffbd 	bl	8007ba8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce0 <MX_ADC2_Init+0xc4>)
 8000c32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3c:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c54:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c96:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000c98:	f000 fe64 	bl	8001964 <HAL_ADC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000ca2:	f000 f9ef 	bl	8001084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_ADC2_Init+0xc8>)
 8000ca8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000caa:	2306      	movs	r3, #6
 8000cac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cb2:	237f      	movs	r3, #127	@ 0x7f
 8000cb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <MX_ADC2_Init+0xc0>)
 8000cc4:	f001 f974 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000cce:	f000 f9d9 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000e8 	.word	0x200000e8
 8000ce0:	50000100 	.word	0x50000100
 8000ce4:	36902000 	.word	0x36902000

08000ce8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_SPI2_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d02:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000d06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d1e:	2220      	movs	r2, #32
 8000d20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d36:	2207      	movs	r2, #7
 8000d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_SPI2_Init+0x74>)
 8000d48:	f003 f9e2 	bl	8004110 <HAL_SPI_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f997 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000154 	.word	0x20000154
 8000d60:	40003800 	.word	0x40003800

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <MX_GPIO_Init+0xc0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <MX_GPIO_Init+0xc0>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <MX_GPIO_Init+0xc0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <MX_GPIO_Init+0xc0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a23      	ldr	r2, [pc, #140]	@ (8000e24 <MX_GPIO_Init+0xc0>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_GPIO_Init+0xc0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2140      	movs	r1, #64	@ 0x40
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f002 f98d 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|PRS_Ready_Pin|System_Ready_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8000dbc:	481a      	ldr	r0, [pc, #104]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000dbe:	f002 f987 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Valve_Enable_Pin */
  GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8000dc2:	2340      	movs	r3, #64	@ 0x40
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f001 fff6 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000dfa:	f001 ffe7 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
  GPIO_InitStruct.Pin = PRS_Ready_Pin|System_Ready_Pin;
 8000dfe:	23c0      	movs	r3, #192	@ 0xc0
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000e16:	f001 ffd9 	bl	8002dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	00000000 	.word	0x00000000

08000e30 <Start_task_read_sensors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_task_read_sensors */
void Start_task_read_sensors(void *argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]

	  // Define pod pressure sensor (KP264 on PCB) variables
	  uint16_t SPI_buffer; // Buffer to hold SPI data from pod pressure sensor

	  // BEGIN Read high pressure ADC ----------------------------------------------------------------------------------------------
	  HAL_ADC_Start(&hadc2); // Start the ADC
 8000e38:	486f      	ldr	r0, [pc, #444]	@ (8000ff8 <Start_task_read_sensors+0x1c8>)
 8000e3a:	f000 ff17 	bl	8001c6c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1); // Wait for ADC to complete conversion
 8000e3e:	2101      	movs	r1, #1
 8000e40:	486d      	ldr	r0, [pc, #436]	@ (8000ff8 <Start_task_read_sensors+0x1c8>)
 8000e42:	f000 ffcf 	bl	8001de4 <HAL_ADC_PollForConversion>
	  high_pressure_raw = HAL_ADC_GetValue(&hadc2); // Get value from ADC
 8000e46:	486c      	ldr	r0, [pc, #432]	@ (8000ff8 <Start_task_read_sensors+0x1c8>)
 8000e48:	f001 f8a4 	bl	8001f94 <HAL_ADC_GetValue>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	83fb      	strh	r3, [r7, #30]
	  // Use mV instead of V to avoid using floats (because printf wouldn't let me use floats)
	  high_pressure_voltage = (int) high_pressure_raw * 3300 / 4095; // Convert ADC reading to mV
 8000e50:	8bfb      	ldrh	r3, [r7, #30]
 8000e52:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000e56:	fb02 f303 	mul.w	r3, r2, r3
 8000e5a:	4a68      	ldr	r2, [pc, #416]	@ (8000ffc <Start_task_read_sensors+0x1cc>)
 8000e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e60:	441a      	add	r2, r3
 8000e62:	12d2      	asrs	r2, r2, #11
 8000e64:	17db      	asrs	r3, r3, #31
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	61bb      	str	r3, [r7, #24]
	  if (high_pressure_voltage <= 120 * 0.004 * 1000) { // Check that the ADC is not outputting 4 mA or less (sensor minimum output)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e70:	dc03      	bgt.n	8000e7a <Start_task_read_sensors+0x4a>
		  high_pressure = 0; // Bar
 8000e72:	4b63      	ldr	r3, [pc, #396]	@ (8001000 <Start_task_read_sensors+0x1d0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e022      	b.n	8000ec0 <Start_task_read_sensors+0x90>
	  }
	  else {
		  high_pressure = (high_pressure_voltage - 120 * 0.004 * 1000)* 250 / (120 * (0.02 - 0.004) * 1000); // Bar
 8000e7a:	69b8      	ldr	r0, [r7, #24]
 8000e7c:	f7ff fb22 	bl	80004c4 <__aeabi_i2d>
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	4b5f      	ldr	r3, [pc, #380]	@ (8001004 <Start_task_read_sensors+0x1d4>)
 8000e86:	f7ff f9cf 	bl	8000228 <__aeabi_dsub>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b5c      	ldr	r3, [pc, #368]	@ (8001008 <Start_task_read_sensors+0x1d8>)
 8000e98:	f7ff fb7e 	bl	8000598 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b58      	ldr	r3, [pc, #352]	@ (800100c <Start_task_read_sensors+0x1dc>)
 8000eaa:	f7ff fc9f 	bl	80007ec <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fd81 	bl	80009bc <__aeabi_d2iz>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a50      	ldr	r2, [pc, #320]	@ (8001000 <Start_task_read_sensors+0x1d0>)
 8000ebe:	6013      	str	r3, [r2, #0]
	  }
	  // END Read high pressure ADC ------------------------------------------------------------------------------------------------

	  // BEGIN Read low pressure ADC -----------------------------------------------------------------------------------------------
	  HAL_ADC_Start(&hadc1); // Start the ADC
 8000ec0:	4853      	ldr	r0, [pc, #332]	@ (8001010 <Start_task_read_sensors+0x1e0>)
 8000ec2:	f000 fed3 	bl	8001c6c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1); // Wait for ADC to complete conversion
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4851      	ldr	r0, [pc, #324]	@ (8001010 <Start_task_read_sensors+0x1e0>)
 8000eca:	f000 ff8b 	bl	8001de4 <HAL_ADC_PollForConversion>
	  low_pressure_raw = HAL_ADC_GetValue(&hadc1); // Get value from ADC
 8000ece:	4850      	ldr	r0, [pc, #320]	@ (8001010 <Start_task_read_sensors+0x1e0>)
 8000ed0:	f001 f860 	bl	8001f94 <HAL_ADC_GetValue>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	82fb      	strh	r3, [r7, #22]
	  // Use mV instead of V to avoid using floats (because printf wouldn't let me use floats)
	  low_pressure_voltage = (int) low_pressure_raw * 3300 / (4095); // Convert ADC reading to mV
 8000ed8:	8afb      	ldrh	r3, [r7, #22]
 8000eda:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a46      	ldr	r2, [pc, #280]	@ (8000ffc <Start_task_read_sensors+0x1cc>)
 8000ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee8:	441a      	add	r2, r3
 8000eea:	12d2      	asrs	r2, r2, #11
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	613b      	str	r3, [r7, #16]
	  if (low_pressure_voltage <= 120 * 0.004 * 1000) { // Check that the ADC is not outputting 4 mA or less (sensor minimum output)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000ef8:	dc03      	bgt.n	8000f02 <Start_task_read_sensors+0xd2>
		  low_pressure = 0; // mBar
 8000efa:	4b46      	ldr	r3, [pc, #280]	@ (8001014 <Start_task_read_sensors+0x1e4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e028      	b.n	8000f54 <Start_task_read_sensors+0x124>
	  }
	  else {
		  low_pressure = ((float) low_pressure_voltage - 120 * 0.004 * 1000) * 10000 / (120 * (0.02 - 0.004) * 1000); // mBar
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0c:	ee17 0a90 	vmov	r0, s15
 8000f10:	f7ff faea 	bl	80004e8 <__aeabi_f2d>
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <Start_task_read_sensors+0x1d4>)
 8000f1a:	f7ff f985 	bl	8000228 <__aeabi_dsub>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	a332      	add	r3, pc, #200	@ (adr r3, 8000ff0 <Start_task_read_sensors+0x1c0>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb34 	bl	8000598 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b33      	ldr	r3, [pc, #204]	@ (800100c <Start_task_read_sensors+0x1dc>)
 8000f3e:	f7ff fc55 	bl	80007ec <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fd37 	bl	80009bc <__aeabi_d2iz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a30      	ldr	r2, [pc, #192]	@ (8001014 <Start_task_read_sensors+0x1e4>)
 8000f52:	6013      	str	r3, [r2, #0]
	  }
	  // END Read low pressure ADC -------------------------------------------------------------------------------------------------

	  // BEGIN Read pod pressure sensor (KP264 on PCB) -----------------------------------------------------------------------------
	  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET); // Pull SPI chip select line low to begin communication
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5a:	482f      	ldr	r0, [pc, #188]	@ (8001018 <Start_task_read_sensors+0x1e8>)
 8000f5c:	f002 f8b8 	bl	80030d0 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure, (uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
 8000f60:	f107 020e 	add.w	r2, r7, #14
 8000f64:	2364      	movs	r3, #100	@ 0x64
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	492c      	ldr	r1, [pc, #176]	@ (800101c <Start_task_read_sensors+0x1ec>)
 8000f6c:	482c      	ldr	r0, [pc, #176]	@ (8001020 <Start_task_read_sensors+0x1f0>)
 8000f6e:	f003 f97a 	bl	8004266 <HAL_SPI_TransmitReceive>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <Start_task_read_sensors+0x14e>
		  pod_pressure = 22;
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <Start_task_read_sensors+0x1f4>)
 8000f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001028 <Start_task_read_sensors+0x1f8>)
 8000f7c:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET); // Pull SPI chip select line high to end communication
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f84:	4824      	ldr	r0, [pc, #144]	@ (8001018 <Start_task_read_sensors+0x1e8>)
 8000f86:	f002 f8a3 	bl	80030d0 <HAL_GPIO_WritePin>
	  // Check if no errors were detected
	  if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000f90:	4013      	ands	r3, r2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d117      	bne.n	8000fcc <Start_task_read_sensors+0x19c>
		  // Get the pressure data using a bit mask and right shift operator to get rid of parity bit
		  SPI_buffer = (SPI_buffer & data_mask) >> 1;
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	81fb      	strh	r3, [r7, #14]
		  // Convert pressure from LSB to Bar using transfer function from data sheet
		  pod_pressure = ((float)SPI_buffer - offs_p)/S_p; // Bar
 8000fac:	89fb      	ldrh	r3, [r7, #14]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800102c <Start_task_read_sensors+0x1fc>
 8000fba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fbe:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001030 <Start_task_read_sensors+0x200>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <Start_task_read_sensors+0x1f4>)
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // END Read pod pressure sensor (KP264 on PCB) -------------------------------------------------------------------------------


	  HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000fcc:	2140      	movs	r1, #64	@ 0x40
 8000fce:	4812      	ldr	r0, [pc, #72]	@ (8001018 <Start_task_read_sensors+0x1e8>)
 8000fd0:	f002 f896 	bl	8003100 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000fd4:	2064      	movs	r0, #100	@ 0x64
 8000fd6:	f004 f913 	bl	8005200 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000fda:	2140      	movs	r1, #64	@ 0x40
 8000fdc:	480e      	ldr	r0, [pc, #56]	@ (8001018 <Start_task_read_sensors+0x1e8>)
 8000fde:	f002 f88f 	bl	8003100 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000fe2:	2064      	movs	r0, #100	@ 0x64
 8000fe4:	f004 f90c 	bl	8005200 <osDelay>
  {
 8000fe8:	e726      	b.n	8000e38 <Start_task_read_sensors+0x8>
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40c38800 	.word	0x40c38800
 8000ff8:	200000e8 	.word	0x200000e8
 8000ffc:	80080081 	.word	0x80080081
 8001000:	200001c0 	.word	0x200001c0
 8001004:	407e0000 	.word	0x407e0000
 8001008:	406f4000 	.word	0x406f4000
 800100c:	409e0000 	.word	0x409e0000
 8001010:	2000007c 	.word	0x2000007c
 8001014:	200001c4 	.word	0x200001c4
 8001018:	48000400 	.word	0x48000400
 800101c:	08007e08 	.word	0x08007e08
 8001020:	20000154 	.word	0x20000154
 8001024:	200001c8 	.word	0x200001c8
 8001028:	41b00000 	.word	0x41b00000
 800102c:	c4086666 	.word	0xc4086666
 8001030:	415a3d71 	.word	0x415a3d71

08001034 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 800103c:	2140      	movs	r1, #64	@ 0x40
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f002 f85d 	bl	8003100 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f004 f8da 	bl	8005200 <osDelay>
	  HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 800104c:	2140      	movs	r1, #64	@ 0x40
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f002 f855 	bl	8003100 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	f004 f8d2 	bl	8005200 <osDelay>
	  HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 800105c:	bf00      	nop
 800105e:	e7ed      	b.n	800103c <StartBlink02+0x8>

08001060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001072:	f000 fa07 	bl	8001484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40001000 	.word	0x40001000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_MspInit+0x50>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a11      	ldr	r2, [pc, #68]	@ (80010e0 <HAL_MspInit+0x50>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_MspInit+0x50>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_MspInit+0x50>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_MspInit+0x50>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_MspInit+0x50>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	210f      	movs	r1, #15
 80010ca:	f06f 0001 	mvn.w	r0, #1
 80010ce:	f001 fe55 	bl	8002d7c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010d2:	f002 f8d3 	bl	800327c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09c      	sub	sp, #112	@ 0x70
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2244      	movs	r2, #68	@ 0x44
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fd4f 	bl	8007ba8 <memset>
  if(hadc->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001112:	d13d      	bne.n	8001190 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001118:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800111a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800111e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fe03 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001130:	f7ff ffa8 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001134:	4b3a      	ldr	r3, [pc, #232]	@ (8001220 <HAL_ADC_MspInit+0x13c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a39      	ldr	r2, [pc, #228]	@ (8001220 <HAL_ADC_MspInit+0x13c>)
 800113c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <HAL_ADC_MspInit+0x13c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10b      	bne.n	800115e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001146:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	4a36      	ldr	r2, [pc, #216]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 800114c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a30      	ldr	r2, [pc, #192]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 8001176:	2302      	movs	r3, #2
 8001178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001186:	4619      	mov	r1, r3
 8001188:	4827      	ldr	r0, [pc, #156]	@ (8001228 <HAL_ADC_MspInit+0x144>)
 800118a:	f001 fe1f 	bl	8002dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800118e:	e042      	b.n	8001216 <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a25      	ldr	r2, [pc, #148]	@ (800122c <HAL_ADC_MspInit+0x148>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d13d      	bne.n	8001216 <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800119a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011a4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fdc0 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 80011b6:	f7ff ff65 	bl	8001084 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_ADC_MspInit+0x13c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_ADC_MspInit+0x13c>)
 80011c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_ADC_MspInit+0x13c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10b      	bne.n	80011e4 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 80011d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_ADC_MspInit+0x140>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001200:	2303      	movs	r3, #3
 8001202:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f001 fddb 	bl	8002dcc <HAL_GPIO_Init>
}
 8001216:	bf00      	nop
 8001218:	3770      	adds	r7, #112	@ 0x70
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001cc 	.word	0x200001cc
 8001224:	40021000 	.word	0x40021000
 8001228:	48000400 	.word	0x48000400
 800122c:	50000100 	.word	0x50000100

08001230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_SPI_MspInit+0x7c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d128      	bne.n	80012a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_SPI_MspInit+0x80>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <HAL_SPI_MspInit+0x80>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_SPI_MspInit+0x80>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_SPI_MspInit+0x80>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <HAL_SPI_MspInit+0x80>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_SPI_MspInit+0x80>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001282:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001294:	2305      	movs	r3, #5
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <HAL_SPI_MspInit+0x84>)
 80012a0:	f001 fd94 	bl	8002dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	@ 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40003800 	.word	0x40003800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48000400 	.word	0x48000400

080012b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	@ 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012c8:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <HAL_InitTick+0xc4>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	4a2b      	ldr	r2, [pc, #172]	@ (800137c <HAL_InitTick+0xc4>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <HAL_InitTick+0xc4>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fca8 	bl	8003c40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012f0:	f002 fc90 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 80012f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <HAL_InitTick+0xc8>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	3b01      	subs	r3, #1
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <HAL_InitTick+0xcc>)
 8001306:	4a20      	ldr	r2, [pc, #128]	@ (8001388 <HAL_InitTick+0xd0>)
 8001308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <HAL_InitTick+0xcc>)
 800130c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001310:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <HAL_InitTick+0xcc>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_InitTick+0xcc>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <HAL_InitTick+0xcc>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001324:	4817      	ldr	r0, [pc, #92]	@ (8001384 <HAL_InitTick+0xcc>)
 8001326:	f003 fb25 	bl	8004974 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001330:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11b      	bne.n	8001370 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001338:	4812      	ldr	r0, [pc, #72]	@ (8001384 <HAL_InitTick+0xcc>)
 800133a:	f003 fb7d 	bl	8004a38 <HAL_TIM_Base_Start_IT>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001344:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001348:	2b00      	cmp	r3, #0
 800134a:	d111      	bne.n	8001370 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134c:	2036      	movs	r0, #54	@ 0x36
 800134e:	f001 fd2f 	bl	8002db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d808      	bhi.n	800136a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2036      	movs	r0, #54	@ 0x36
 800135e:	f001 fd0d 	bl	8002d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_InitTick+0xd4>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e002      	b.n	8001370 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001374:	4618      	mov	r0, r3
 8001376:	3730      	adds	r7, #48	@ 0x30
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	431bde83 	.word	0x431bde83
 8001384:	200001d0 	.word	0x200001d0
 8001388:	40001000 	.word	0x40001000
 800138c:	20000004 	.word	0x20000004

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <TIM6_DAC_IRQHandler+0x10>)
 80013ce:	f003 fb9d 	bl	8004b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001d0 	.word	0x200001d0

080013dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001402:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	@ (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	@ (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800142e:	f006 fc19 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff faeb 	bl	8000a0c <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   r0, =_estack
 8001438:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001444:	08007e2c 	.word	0x08007e2c
  ldr r2, =_sbss
 8001448:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800144c:	20001d48 	.word	0x20001d48

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>

08001452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f001 fc82 	bl	8002d66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	200f      	movs	r0, #15
 8001464:	f7ff ff28 	bl	80012b8 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fe0c 	bl	8001090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]

}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_IncTick+0x1c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_IncTick+0x20>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4413      	add	r3, r2
 8001492:	4a03      	ldr	r2, [pc, #12]	@ (80014a0 <HAL_IncTick+0x1c>)
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	2000021c 	.word	0x2000021c
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000021c 	.word	0x2000021c

080014c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3360      	adds	r3, #96	@ 0x60
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <LL_ADC_SetOffset+0x44>)
 800154a:	4013      	ands	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	4313      	orrs	r3, r2
 8001558:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	03fff000 	.word	0x03fff000

08001570 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3360      	adds	r3, #96	@ 0x60
 800157e:	461a      	mov	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3360      	adds	r3, #96	@ 0x60
 80015ac:	461a      	mov	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3360      	adds	r3, #96	@ 0x60
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3360      	adds	r3, #96	@ 0x60
 8001618:	461a      	mov	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	615a      	str	r2, [r3, #20]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800168a:	b480      	push	{r7}
 800168c:	b087      	sub	sp, #28
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3330      	adds	r3, #48	@ 0x30
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	211f      	movs	r1, #31
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	f003 011f 	and.w	r1, r3, #31
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3314      	adds	r3, #20
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	0e5b      	lsrs	r3, r3, #25
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	0d1b      	lsrs	r3, r3, #20
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2107      	movs	r1, #7
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	0d1b      	lsrs	r3, r3, #20
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0318 	and.w	r3, r3, #24
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <LL_ADC_SetChannelSingleDiff+0x44>)
 800175c:	40d9      	lsrs	r1, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	400b      	ands	r3, r1
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	0007ffff 	.word	0x0007ffff

08001780 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6093      	str	r3, [r2, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001814:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001818:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001840:	d101      	bne.n	8001846 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800188c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001890:	f043 0202 	orr.w	r2, r3, #2
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <LL_ADC_IsEnabled+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_ADC_IsEnabled+0x1a>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d101      	bne.n	80018e2 <LL_ADC_IsDisableOngoing+0x18>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <LL_ADC_IsDisableOngoing+0x1a>
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b04      	cmp	r3, #4
 800192a:	d101      	bne.n	8001930 <LL_ADC_REG_IsConversionOngoing+0x18>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b08      	cmp	r3, #8
 8001950:	d101      	bne.n	8001956 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e167      	b.n	8001c4e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fba9 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff19 	bl	80017dc <LL_ADC_IsDeepPowerDownEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff feff 	bl	80017b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff34 	bl	800182c <LL_ADC_IsInternalRegulatorEnabled>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff18 	bl	8001804 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001c58 <HAL_ADC_Init+0x2f4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	4aa0      	ldr	r2, [pc, #640]	@ (8001c5c <HAL_ADC_Init+0x2f8>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	3301      	adds	r3, #1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019e8:	e002      	b.n	80019f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f9      	bne.n	80019ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff16 	bl	800182c <LL_ADC_IsInternalRegulatorEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	f043 0210 	orr.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff76 	bl	8001918 <LL_ADC_REG_IsConversionOngoing>
 8001a2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8100 	bne.w	8001c3c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 80fc 	bne.w	8001c3c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a4c:	f043 0202 	orr.w	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff23 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a68:	f7ff ff1c 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	487c      	ldr	r0, [pc, #496]	@ (8001c60 <HAL_ADC_Init+0x2fc>)
 8001a70:	f7ff ff18 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4323      	orrs	r3, r4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4878      	ldr	r0, [pc, #480]	@ (8001c64 <HAL_ADC_Init+0x300>)
 8001a84:	f7ff fd1c 	bl	80014c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7f5b      	ldrb	r3, [r3, #29]
 8001a8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aa6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	045b      	lsls	r3, r3, #17
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	4b60      	ldr	r3, [pc, #384]	@ (8001c68 <HAL_ADC_Init+0x304>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff15 	bl	800193e <LL_ADC_INJ_IsConversionOngoing>
 8001b14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d16d      	bne.n	8001bf8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d16a      	bne.n	8001bf8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b26:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b2e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b3e:	f023 0302 	bic.w	r3, r3, #2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	69b9      	ldr	r1, [r7, #24]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6911      	ldr	r1, [r2, #16]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b82:	e013      	b.n	8001bac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d118      	bne.n	8001be8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	e007      	b.n	8001bf8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10c      	bne.n	8001c1a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f023 010f 	bic.w	r1, r3, #15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 020f 	bic.w	r2, r2, #15
 8001c28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c3a:	e007      	b.n	8001c4c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	053e2d63 	.word	0x053e2d63
 8001c60:	50000100 	.word	0x50000100
 8001c64:	50000300 	.word	0x50000300
 8001c68:	fff04007 	.word	0xfff04007

08001c6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c74:	4859      	ldr	r0, [pc, #356]	@ (8001ddc <HAL_ADC_Start+0x170>)
 8001c76:	f7ff fd83 	bl	8001780 <LL_ADC_GetMultimode>
 8001c7a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fe49 	bl	8001918 <LL_ADC_REG_IsConversionOngoing>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 809f 	bne.w	8001dcc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_Start+0x30>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e09a      	b.n	8001dd2 <HAL_ADC_Start+0x166>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fd73 	bl	8002790 <ADC_Enable>
 8001caa:	4603      	mov	r3, r0
 8001cac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8086 	bne.w	8001dc2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a44      	ldr	r2, [pc, #272]	@ (8001de0 <HAL_ADC_Start+0x174>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d002      	beq.n	8001cda <HAL_ADC_Start+0x6e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e001      	b.n	8001cde <HAL_ADC_Start+0x72>
 8001cda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d002      	beq.n	8001cec <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0a:	f023 0206 	bic.w	r2, r3, #6
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d12:	e002      	b.n	8001d1a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	221c      	movs	r2, #28
 8001d20:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001de0 <HAL_ADC_Start+0x174>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_Start+0xce>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e001      	b.n	8001d3e <HAL_ADC_Start+0xd2>
 8001d3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d008      	beq.n	8001d58 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d002      	beq.n	8001d58 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d114      	bne.n	8001d82 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fdb8 	bl	80018f0 <LL_ADC_REG_StartConversion>
 8001d80:	e026      	b.n	8001dd0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <HAL_ADC_Start+0x174>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d002      	beq.n	8001d9e <HAL_ADC_Start+0x132>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e001      	b.n	8001da2 <HAL_ADC_Start+0x136>
 8001d9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001da2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00f      	beq.n	8001dd0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001db8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dc0:	e006      	b.n	8001dd0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001dca:	e001      	b.n	8001dd0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	50000300 	.word	0x50000300
 8001de0:	50000100 	.word	0x50000100

08001de4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dee:	4867      	ldr	r0, [pc, #412]	@ (8001f8c <HAL_ADC_PollForConversion+0x1a8>)
 8001df0:	f7ff fcc6 	bl	8001780 <LL_ADC_GetMultimode>
 8001df4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d102      	bne.n	8001e04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e02a      	b.n	8001e5a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d002      	beq.n	8001e16 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b09      	cmp	r3, #9
 8001e14:	d111      	bne.n	8001e3a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0a6      	b.n	8001f82 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e34:	2304      	movs	r3, #4
 8001e36:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e38:	e00f      	b.n	8001e5a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e3a:	4854      	ldr	r0, [pc, #336]	@ (8001f8c <HAL_ADC_PollForConversion+0x1a8>)
 8001e3c:	f7ff fcae 	bl	800179c <LL_ADC_GetMultiDMATransfer>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4a:	f043 0220 	orr.w	r2, r3, #32
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e095      	b.n	8001f82 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e56:	2304      	movs	r3, #4
 8001e58:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e5a:	f7ff fb25 	bl	80014a8 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e60:	e021      	b.n	8001ea6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e68:	d01d      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e6a:	f7ff fb1d 	bl	80014a8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <HAL_ADC_PollForConversion+0x9c>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06d      	b.n	8001f82 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0d6      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fbcd 	bl	8001664 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01c      	beq.n	8001f0a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7f5b      	ldrb	r3, [r3, #29]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d118      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d111      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a20      	ldr	r2, [pc, #128]	@ (8001f90 <HAL_ADC_PollForConversion+0x1ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d002      	beq.n	8001f1a <HAL_ADC_PollForConversion+0x136>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	e001      	b.n	8001f1e <HAL_ADC_PollForConversion+0x13a>
 8001f1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d008      	beq.n	8001f38 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d002      	beq.n	8001f38 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	d104      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e00d      	b.n	8001f5e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <HAL_ADC_PollForConversion+0x1ac>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d002      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x16e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e001      	b.n	8001f56 <HAL_ADC_PollForConversion+0x172>
 8001f52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f56:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d104      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e008      	b.n	8001f80 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d103      	bne.n	8001f80 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	220c      	movs	r2, #12
 8001f7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	50000300 	.word	0x50000300
 8001f90:	50000100 	.word	0x50000100

08001f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0b6      	sub	sp, #216	@ 0xd8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x22>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e3c8      	b.n	8002764 <HAL_ADC_ConfigChannel+0x7b4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fc9a 	bl	8001918 <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 83ad 	bne.w	8002746 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f7ff fb46 	bl	800168a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fc88 	bl	8001918 <LL_ADC_REG_IsConversionOngoing>
 8002008:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fc94 	bl	800193e <LL_ADC_INJ_IsConversionOngoing>
 8002016:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800201a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 81d9 	bne.w	80023d6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 81d4 	bne.w	80023d6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002036:	d10f      	bne.n	8002058 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff fb4d 	bl	80016e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff faf4 	bl	800163e <LL_ADC_SetSamplingTimeCommonConfig>
 8002056:	e00e      	b.n	8002076 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	461a      	mov	r2, r3
 8002066:	f7ff fb3c 	bl	80016e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fae4 	bl	800163e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d022      	beq.n	80020de <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020a8:	f7ff fa3e 	bl	8001528 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff fa8a 	bl	80015d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x124>
 80020ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x126>
 80020d4:	2300      	movs	r3, #0
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fa96 	bl	8001608 <LL_ADC_SetOffsetSaturation>
 80020dc:	e17b      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fa43 	bl	8001570 <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <HAL_ADC_ConfigChannel+0x15a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fa38 	bl	8001570 <LL_ADC_GetOffsetChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	e01e      	b.n	8002148 <HAL_ADC_ConfigChannel+0x198>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fa2d 	bl	8001570 <LL_ADC_GetOffsetChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002128:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800212c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e004      	b.n	8002146 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800213c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1b0>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	e018      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1e2>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800217c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e004      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002192:	429a      	cmp	r2, r3
 8002194:	d106      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f9fc 	bl	800159c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f9e0 	bl	8001570 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x220>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f9d5 	bl	8001570 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	e01e      	b.n	800220e <HAL_ADC_ConfigChannel+0x25e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f9ca 	bl	8001570 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80021ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80021f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x276>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	e018      	b.n	8002258 <HAL_ADC_ConfigChannel+0x2a8>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800223a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800223e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002242:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800224e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2101      	movs	r1, #1
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f999 	bl	800159c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2102      	movs	r1, #2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f97d 	bl	8001570 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x2e6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2102      	movs	r1, #2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f972 	bl	8001570 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e01e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x324>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2102      	movs	r1, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f967 	bl	8001570 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80022c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x33c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e016      	b.n	800231a <HAL_ADC_ConfigChannel+0x36a>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80022fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f938 	bl	800159c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2103      	movs	r1, #3
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f91c 	bl	8001570 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x3a8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2103      	movs	r1, #3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f911 	bl	8001570 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	e017      	b.n	8002388 <HAL_ADC_ConfigChannel+0x3d8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2103      	movs	r1, #3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f906 	bl	8001570 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002370:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002372:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800237a:	2320      	movs	r3, #32
 800237c:	e003      	b.n	8002386 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800237e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x3f0>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	e011      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x414>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80023bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d106      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2103      	movs	r1, #3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f8e3 	bl	800159c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fa62 	bl	80018a4 <LL_ADC_IsEnabled>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 8140 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f7ff f99f 	bl	8001738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a8f      	ldr	r2, [pc, #572]	@ (800263c <HAL_ADC_ConfigChannel+0x68c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 8131 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_ADC_ConfigChannel+0x47e>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0e9b      	lsrs	r3, r3, #26
 800241c:	3301      	adds	r3, #1
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2b09      	cmp	r3, #9
 8002424:	bf94      	ite	ls
 8002426:	2301      	movls	r3, #1
 8002428:	2300      	movhi	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	e019      	b.n	8002462 <HAL_ADC_ConfigChannel+0x4b2>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800243c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002440:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002446:	2320      	movs	r3, #32
 8002448:	e003      	b.n	8002452 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800244a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2b09      	cmp	r3, #9
 800245a:	bf94      	ite	ls
 800245c:	2301      	movls	r3, #1
 800245e:	2300      	movhi	r3, #0
 8002460:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	2b00      	cmp	r3, #0
 8002464:	d079      	beq.n	800255a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x4d2>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002480:	e015      	b.n	80024ae <HAL_ADC_ConfigChannel+0x4fe>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002492:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800249e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x51e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	e017      	b.n	80024fe <HAL_ADC_ConfigChannel+0x54e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80024dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80024e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80024ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x574>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	3301      	adds	r3, #1
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	051b      	lsls	r3, r3, #20
 8002522:	e018      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5a6>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002556:	430b      	orrs	r3, r1
 8002558:	e081      	b.n	800265e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x5c6>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	3301      	adds	r3, #1
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002574:	e015      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x5f2>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e003      	b.n	800259a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	069b      	lsls	r3, r3, #26
 800259e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x612>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0e9b      	lsrs	r3, r3, #26
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	e017      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x642>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	61fb      	str	r3, [r7, #28]
  return result;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <HAL_ADC_ConfigChannel+0x66e>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	3b1e      	subs	r3, #30
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800261c:	e01e      	b.n	800265c <HAL_ADC_ConfigChannel+0x6ac>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	613b      	str	r3, [r7, #16]
  return result;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e006      	b.n	8002648 <HAL_ADC_ConfigChannel+0x698>
 800263a:	bf00      	nop
 800263c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	3b1e      	subs	r3, #30
 8002656:	051b      	lsls	r3, r3, #20
 8002658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002662:	4619      	mov	r1, r3
 8002664:	f7ff f83d 	bl	80016e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b3f      	ldr	r3, [pc, #252]	@ (800276c <HAL_ADC_ConfigChannel+0x7bc>)
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d071      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002674:	483e      	ldr	r0, [pc, #248]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 8002676:	f7fe ff49 	bl	800150c <LL_ADC_GetCommonPathInternalCh>
 800267a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3c      	ldr	r2, [pc, #240]	@ (8002774 <HAL_ADC_ConfigChannel+0x7c4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x6e2>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3a      	ldr	r2, [pc, #232]	@ (8002778 <HAL_ADC_ConfigChannel+0x7c8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d127      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d121      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a6:	d157      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026b0:	4619      	mov	r1, r3
 80026b2:	482f      	ldr	r0, [pc, #188]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 80026b4:	f7fe ff17 	bl	80014e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b8:	4b30      	ldr	r3, [pc, #192]	@ (800277c <HAL_ADC_ConfigChannel+0x7cc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	4a30      	ldr	r2, [pc, #192]	@ (8002780 <HAL_ADC_ConfigChannel+0x7d0>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026d2:	e002      	b.n	80026da <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f9      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e0:	e03a      	b.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a27      	ldr	r2, [pc, #156]	@ (8002784 <HAL_ADC_ConfigChannel+0x7d4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d113      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	@ (8002788 <HAL_ADC_ConfigChannel+0x7d8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02a      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270a:	4619      	mov	r1, r3
 800270c:	4818      	ldr	r0, [pc, #96]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 800270e:	f7fe feea 	bl	80014e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002712:	e021      	b.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_ADC_ConfigChannel+0x7dc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11c      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800271e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	@ (8002788 <HAL_ADC_ConfigChannel+0x7d8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d011      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002738:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800273c:	4619      	mov	r1, r3
 800273e:	480c      	ldr	r0, [pc, #48]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 8002740:	f7fe fed1 	bl	80014e6 <LL_ADC_SetCommonPathInternalCh>
 8002744:	e008      	b.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002760:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002764:	4618      	mov	r0, r3
 8002766:	37d8      	adds	r7, #216	@ 0xd8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	80080000 	.word	0x80080000
 8002770:	50000300 	.word	0x50000300
 8002774:	c3210000 	.word	0xc3210000
 8002778:	90c00010 	.word	0x90c00010
 800277c:	20000000 	.word	0x20000000
 8002780:	053e2d63 	.word	0x053e2d63
 8002784:	c7520000 	.word	0xc7520000
 8002788:	50000100 	.word	0x50000100
 800278c:	cb840000 	.word	0xcb840000

08002790 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff f87f 	bl	80018a4 <LL_ADC_IsEnabled>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d169      	bne.n	8002880 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <ADC_Enable+0xfc>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e055      	b.n	8002882 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f83a 	bl	8001854 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027e0:	482b      	ldr	r0, [pc, #172]	@ (8002890 <ADC_Enable+0x100>)
 80027e2:	f7fe fe93 	bl	800150c <LL_ADC_GetCommonPathInternalCh>
 80027e6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f0:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <ADC_Enable+0x104>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <ADC_Enable+0x108>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800280a:	e002      	b.n	8002812 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	3b01      	subs	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002818:	f7fe fe46 	bl	80014a8 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800281e:	e028      	b.n	8002872 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f83d 	bl	80018a4 <LL_ADC_IsEnabled>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f80d 	bl	8001854 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283a:	f7fe fe35 	bl	80014a8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d914      	bls.n	8002872 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d00d      	beq.n	8002872 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e007      	b.n	8002882 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d1cf      	bne.n	8002820 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	8000003f 	.word	0x8000003f
 8002890:	50000300 	.word	0x50000300
 8002894:	20000000 	.word	0x20000000
 8002898:	053e2d63 	.word	0x053e2d63

0800289c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f80e 	bl	80018ca <LL_ADC_IsDisableOngoing>
 80028ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fff5 	bl	80018a4 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d047      	beq.n	8002950 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d144      	bne.n	8002950 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030d 	and.w	r3, r3, #13
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10c      	bne.n	80028ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe ffcf 	bl	800187c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2203      	movs	r2, #3
 80028e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028e6:	f7fe fddf 	bl	80014a8 <HAL_GetTick>
 80028ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028ec:	e029      	b.n	8002942 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e023      	b.n	8002952 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800290a:	f7fe fdcd 	bl	80014a8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d914      	bls.n	8002942 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e007      	b.n	8002952 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1dc      	bne.n	800290a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <LL_ADC_IsEnabled>:
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <LL_ADC_IsEnabled+0x18>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <LL_ADC_IsEnabled+0x1a>
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_StartCalibration>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002992:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800299c:	4313      	orrs	r3, r2
 800299e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_ADC_IsCalibrationOnGoing>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029c6:	d101      	bne.n	80029cc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_ADC_REG_IsConversionOngoing>:
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d101      	bne.n	80029f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_ADCEx_Calibration_Start+0x1c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e04d      	b.n	8002ab8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff39 	bl	800289c <ADC_Disable>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d136      	bne.n	8002aa2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a3c:	f023 0302 	bic.w	r3, r3, #2
 8002a40:	f043 0202 	orr.w	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff96 	bl	8002980 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a54:	e014      	b.n	8002a80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d90d      	bls.n	8002a80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	f023 0312 	bic.w	r3, r3, #18
 8002a6c:	f043 0210 	orr.w	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e01b      	b.n	8002ab8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff94 	bl	80029b2 <LL_ADC_IsCalibrationOnGoing>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e2      	bne.n	8002a56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	f023 0303 	bic.w	r3, r3, #3
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa0:	e005      	b.n	8002aae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	0004de01 	.word	0x0004de01

08002ac4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b0a1      	sub	sp, #132	@ 0x84
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e08b      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002aea:	2300      	movs	r3, #0
 8002aec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002aee:	2300      	movs	r3, #0
 8002af0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afa:	d102      	bne.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002afc:	4b41      	ldr	r3, [pc, #260]	@ (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e001      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e06a      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff57 	bl	80029da <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff51 	bl	80029da <LL_ADC_REG_IsConversionOngoing>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d14c      	bne.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d149      	bne.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b44:	4b30      	ldr	r3, [pc, #192]	@ (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b46:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d028      	beq.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b62:	035b      	lsls	r3, r3, #13
 8002b64:	430b      	orrs	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b70:	f7ff fef3 	bl	800295a <LL_ADC_IsEnabled>
 8002b74:	4604      	mov	r4, r0
 8002b76:	4823      	ldr	r0, [pc, #140]	@ (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b78:	f7ff feef 	bl	800295a <LL_ADC_IsEnabled>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4323      	orrs	r3, r4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d133      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b8c:	f023 030f 	bic.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6811      	ldr	r1, [r2, #0]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b9e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba0:	e024      	b.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bae:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002bb2:	f7ff fed2 	bl	800295a <LL_ADC_IsEnabled>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	4812      	ldr	r0, [pc, #72]	@ (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bba:	f7ff fece 	bl	800295a <LL_ADC_IsEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4323      	orrs	r3, r4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d112      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bce:	f023 030f 	bic.w	r3, r3, #15
 8002bd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002bd4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd6:	e009      	b.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bea:	e000      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bf6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3784      	adds	r7, #132	@ 0x84
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	50000100 	.word	0x50000100
 8002c08:	50000300 	.word	0x50000300

08002c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3e:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60d3      	str	r3, [r2, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <__NVIC_GetPriorityGrouping+0x18>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 0307 	and.w	r3, r3, #7
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	db0b      	blt.n	8002c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4907      	ldr	r1, [pc, #28]	@ (8002ca8 <__NVIC_EnableIRQ+0x38>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2001      	movs	r0, #1
 8002c92:	fa00 f202 	lsl.w	r2, r0, r2
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000e100 	.word	0xe000e100

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	@ (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	@ (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	@ 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff4c 	bl	8002c0c <__NVIC_SetPriorityGrouping>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8a:	f7ff ff63 	bl	8002c54 <__NVIC_GetPriorityGrouping>
 8002d8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	f7ff ffb3 	bl	8002d00 <NVIC_EncodePriority>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff82 	bl	8002cac <__NVIC_SetPriority>
}
 8002da8:	bf00      	nop
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff56 	bl	8002c70 <__NVIC_EnableIRQ>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dda:	e15a      	b.n	8003092 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 814c 	beq.w	800308c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d005      	beq.n	8002e0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d130      	bne.n	8002e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e42:	2201      	movs	r2, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0201 	and.w	r2, r3, #1
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d017      	beq.n	8002eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d123      	bne.n	8002efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	08da      	lsrs	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3208      	adds	r2, #8
 8002ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	6939      	ldr	r1, [r7, #16]
 8002efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0203 	and.w	r2, r3, #3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a6 	beq.w	800308c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f40:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_GPIO_Init+0x2e4>)
 8002f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f44:	4a5a      	ldr	r2, [pc, #360]	@ (80030b0 <HAL_GPIO_Init+0x2e4>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f4c:	4b58      	ldr	r3, [pc, #352]	@ (80030b0 <HAL_GPIO_Init+0x2e4>)
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f58:	4a56      	ldr	r2, [pc, #344]	@ (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f82:	d01f      	beq.n	8002fc4 <HAL_GPIO_Init+0x1f8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a4c      	ldr	r2, [pc, #304]	@ (80030b8 <HAL_GPIO_Init+0x2ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d019      	beq.n	8002fc0 <HAL_GPIO_Init+0x1f4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4b      	ldr	r2, [pc, #300]	@ (80030bc <HAL_GPIO_Init+0x2f0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_GPIO_Init+0x1f0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4a      	ldr	r2, [pc, #296]	@ (80030c0 <HAL_GPIO_Init+0x2f4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_GPIO_Init+0x1ec>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a49      	ldr	r2, [pc, #292]	@ (80030c4 <HAL_GPIO_Init+0x2f8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a48      	ldr	r2, [pc, #288]	@ (80030c8 <HAL_GPIO_Init+0x2fc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_GPIO_Init+0x1e4>
 8002fac:	2305      	movs	r3, #5
 8002fae:	e00a      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fb0:	2306      	movs	r3, #6
 8002fb2:	e008      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e006      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e004      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e002      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	f002 0203 	and.w	r2, r2, #3
 8002fcc:	0092      	lsls	r2, r2, #2
 8002fce:	4093      	lsls	r3, r2
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd6:	4937      	ldr	r1, [pc, #220]	@ (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	3302      	adds	r3, #2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe4:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <HAL_GPIO_Init+0x300>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003008:	4a30      	ldr	r2, [pc, #192]	@ (80030cc <HAL_GPIO_Init+0x300>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800300e:	4b2f      	ldr	r3, [pc, #188]	@ (80030cc <HAL_GPIO_Init+0x300>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003032:	4a26      	ldr	r2, [pc, #152]	@ (80030cc <HAL_GPIO_Init+0x300>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003038:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <HAL_GPIO_Init+0x300>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800305c:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_GPIO_Init+0x300>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003062:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <HAL_GPIO_Init+0x300>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003086:	4a11      	ldr	r2, [pc, #68]	@ (80030cc <HAL_GPIO_Init+0x300>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3301      	adds	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	f47f ae9d 	bne.w	8002ddc <HAL_GPIO_Init+0x10>
  }
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010000 	.word	0x40010000
 80030b8:	48000400 	.word	0x48000400
 80030bc:	48000800 	.word	0x48000800
 80030c0:	48000c00 	.word	0x48000c00
 80030c4:	48001000 	.word	0x48001000
 80030c8:	48001400 	.word	0x48001400
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4013      	ands	r3, r2
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43d9      	mvns	r1, r3
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	400b      	ands	r3, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	619a      	str	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d141      	bne.n	80031c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003142:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314e:	d131      	bne.n	80031b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003150:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003156:	4a46      	ldr	r2, [pc, #280]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800315c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003160:	4b43      	ldr	r3, [pc, #268]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003168:	4a41      	ldr	r2, [pc, #260]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800316e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003170:	4b40      	ldr	r3, [pc, #256]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2232      	movs	r2, #50	@ 0x32
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	4a3f      	ldr	r2, [pc, #252]	@ (8003278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	3301      	adds	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003186:	e002      	b.n	800318e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3b01      	subs	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318e:	4b38      	ldr	r3, [pc, #224]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319a:	d102      	bne.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f2      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031a2:	4b33      	ldr	r3, [pc, #204]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ae:	d158      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e057      	b.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031c4:	e04d      	b.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031cc:	d141      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ce:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031da:	d131      	bne.n	8003240 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031dc:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e2:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ec:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2232      	movs	r2, #50	@ 0x32
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	0c9b      	lsrs	r3, r3, #18
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003212:	e002      	b.n	800321a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b01      	subs	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d102      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f2      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323a:	d112      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e011      	b.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003250:	e007      	b.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800325a:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003260:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40007000 	.word	0x40007000
 8003274:	20000000 	.word	0x20000000
 8003278:	431bde83 	.word	0x431bde83

0800327c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a04      	ldr	r2, [pc, #16]	@ (8003298 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800328a:	6093      	str	r3, [r2, #8]
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40007000 	.word	0x40007000

0800329c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e2fe      	b.n	80038ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ba:	4b97      	ldr	r3, [pc, #604]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c4:	4b94      	ldr	r3, [pc, #592]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d102      	bne.n	80032da <HAL_RCC_OscConfig+0x3e>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e2d9      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b85      	ldr	r3, [pc, #532]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a84      	ldr	r2, [pc, #528]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b7f      	ldr	r3, [pc, #508]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7e      	ldr	r2, [pc, #504]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b7c      	ldr	r3, [pc, #496]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7b      	ldr	r2, [pc, #492]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b78      	ldr	r3, [pc, #480]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a77      	ldr	r2, [pc, #476]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b75      	ldr	r3, [pc, #468]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a74      	ldr	r2, [pc, #464]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f8a8 	bl	80014a8 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe f8a4 	bl	80014a8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e29e      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336e:	4b6a      	ldr	r3, [pc, #424]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe f894 	bl	80014a8 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f890 	bl	80014a8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	@ 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e28a      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003396:	4b60      	ldr	r3, [pc, #384]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b59      	ldr	r3, [pc, #356]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b56      	ldr	r3, [pc, #344]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_OscConfig+0x136>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_OscConfig+0x13c>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11f      	bne.n	8003418 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_OscConfig+0x154>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e25d      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b49      	ldr	r3, [pc, #292]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	4946      	ldr	r1, [pc, #280]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003404:	4b45      	ldr	r3, [pc, #276]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd ff55 	bl	80012b8 <HAL_InitTick>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d043      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e249      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d023      	beq.n	8003468 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003420:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3c      	ldr	r2, [pc, #240]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe f83c 	bl	80014a8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003434:	f7fe f838 	bl	80014a8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e232      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003446:	4b34      	ldr	r3, [pc, #208]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b31      	ldr	r3, [pc, #196]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	492d      	ldr	r1, [pc, #180]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
 8003466:	e01a      	b.n	800349e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003468:	4b2b      	ldr	r3, [pc, #172]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2a      	ldr	r2, [pc, #168]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 800346e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f818 	bl	80014a8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347c:	f7fe f814 	bl	80014a8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e20e      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1e0>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d041      	beq.n	800352e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01c      	beq.n	80034ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b8:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fd fff1 	bl	80014a8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fd ffed 	bl	80014a8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1e7      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ef      	beq.n	80034ca <HAL_RCC_OscConfig+0x22e>
 80034ea:	e020      	b.n	800352e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f2:	4a09      	ldr	r2, [pc, #36]	@ (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd ffd4 	bl	80014a8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003502:	e00d      	b.n	8003520 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7fd ffd0 	bl	80014a8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d906      	bls.n	8003520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e1ca      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003520:	4b8c      	ldr	r3, [pc, #560]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ea      	bne.n	8003504 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80a6 	beq.w	8003688 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003540:	4b84      	ldr	r3, [pc, #528]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_OscConfig+0x2b4>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x2b6>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	4b7f      	ldr	r3, [pc, #508]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355a:	4a7e      	ldr	r2, [pc, #504]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	@ 0x58
 8003562:	4b7c      	ldr	r3, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003572:	4b79      	ldr	r3, [pc, #484]	@ (8003758 <HAL_RCC_OscConfig+0x4bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357e:	4b76      	ldr	r3, [pc, #472]	@ (8003758 <HAL_RCC_OscConfig+0x4bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a75      	ldr	r2, [pc, #468]	@ (8003758 <HAL_RCC_OscConfig+0x4bc>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fd ff8d 	bl	80014a8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003592:	f7fd ff89 	bl	80014a8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e183      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003758 <HAL_RCC_OscConfig+0x4bc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d108      	bne.n	80035ca <HAL_RCC_OscConfig+0x32e>
 80035b8:	4b66      	ldr	r3, [pc, #408]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035be:	4a65      	ldr	r2, [pc, #404]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c8:	e024      	b.n	8003614 <HAL_RCC_OscConfig+0x378>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d110      	bne.n	80035f4 <HAL_RCC_OscConfig+0x358>
 80035d2:	4b60      	ldr	r3, [pc, #384]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f2:	e00f      	b.n	8003614 <HAL_RCC_OscConfig+0x378>
 80035f4:	4b57      	ldr	r3, [pc, #348]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fa:	4a56      	ldr	r2, [pc, #344]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003604:	4b53      	ldr	r3, [pc, #332]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360a:	4a52      	ldr	r2, [pc, #328]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd ff44 	bl	80014a8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fd ff40 	bl	80014a8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e138      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363a:	4b46      	ldr	r3, [pc, #280]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ed      	beq.n	8003624 <HAL_RCC_OscConfig+0x388>
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fd ff2d 	bl	80014a8 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd ff29 	bl	80014a8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e121      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003668:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ed      	bne.n	8003652 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4b35      	ldr	r3, [pc, #212]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003680:	4a34      	ldr	r2, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003686:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03c      	beq.n	800370e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fd fefc 	bl	80014a8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b4:	f7fd fef8 	bl	80014a8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0f2      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c6:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ef      	beq.n	80036b4 <HAL_RCC_OscConfig+0x418>
 80036d4:	e01b      	b.n	800370e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80036d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fedf 	bl	80014a8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ee:	f7fd fedb 	bl	80014a8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0d5      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003700:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ef      	bne.n	80036ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80c9 	beq.w	80038aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b0c      	cmp	r3, #12
 8003722:	f000 8083 	beq.w	800382c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d15e      	bne.n	80037ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a08      	ldr	r2, [pc, #32]	@ (8003754 <HAL_RCC_OscConfig+0x4b8>)
 8003734:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd feb5 	bl	80014a8 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003740:	e00c      	b.n	800375c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd feb1 	bl	80014a8 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d905      	bls.n	800375c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0ab      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375c:	4b55      	ldr	r3, [pc, #340]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ec      	bne.n	8003742 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003768:	4b52      	ldr	r3, [pc, #328]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4b52      	ldr	r3, [pc, #328]	@ (80038b8 <HAL_RCC_OscConfig+0x61c>)
 800376e:	4013      	ands	r3, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6a11      	ldr	r1, [r2, #32]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003778:	3a01      	subs	r2, #1
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003782:	0212      	lsls	r2, r2, #8
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0552      	lsls	r2, r2, #21
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003796:	0852      	lsrs	r2, r2, #1
 8003798:	3a01      	subs	r2, #1
 800379a:	0652      	lsls	r2, r2, #25
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037a2:	06d2      	lsls	r2, r2, #27
 80037a4:	430a      	orrs	r2, r1
 80037a6:	4943      	ldr	r1, [pc, #268]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b41      	ldr	r3, [pc, #260]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a40      	ldr	r2, [pc, #256]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b8:	4b3e      	ldr	r3, [pc, #248]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a3d      	ldr	r2, [pc, #244]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fe70 	bl	80014a8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fe6c 	bl	80014a8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e066      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037de:	4b35      	ldr	r3, [pc, #212]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x530>
 80037ea:	e05e      	b.n	80038aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b31      	ldr	r3, [pc, #196]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a30      	ldr	r2, [pc, #192]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 80037f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd fe56 	bl	80014a8 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fe52 	bl	80014a8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e04c      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003812:	4b28      	ldr	r3, [pc, #160]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800381e:	4b25      	ldr	r3, [pc, #148]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	4924      	ldr	r1, [pc, #144]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <HAL_RCC_OscConfig+0x620>)
 8003826:	4013      	ands	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
 800382a:	e03e      	b.n	80038aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e039      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003838:	4b1e      	ldr	r3, [pc, #120]	@ (80038b4 <HAL_RCC_OscConfig+0x618>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	429a      	cmp	r2, r3
 800384a:	d12c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d123      	bne.n	80038a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d11b      	bne.n	80038a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d113      	bne.n	80038a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	019f800c 	.word	0x019f800c
 80038bc:	feeefffc 	.word	0xfeeefffc

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e11e      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b91      	ldr	r3, [pc, #580]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 020f 	bic.w	r2, r3, #15
 80038ee:	498c      	ldr	r1, [pc, #560]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e106      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d073      	beq.n	80039fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d129      	bne.n	8003970 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391c:	4b81      	ldr	r3, [pc, #516]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0f4      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800392c:	f000 f9ba 	bl	8003ca4 <RCC_GetSysClockFreqFromPLLSource>
 8003930:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4a7c      	ldr	r2, [pc, #496]	@ (8003b28 <HAL_RCC_ClockConfig+0x268>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d93f      	bls.n	80039ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800393a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800394e:	2b00      	cmp	r3, #0
 8003950:	d033      	beq.n	80039ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003956:	2b00      	cmp	r3, #0
 8003958:	d12f      	bne.n	80039ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800395a:	4b72      	ldr	r3, [pc, #456]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003962:	4a70      	ldr	r2, [pc, #448]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003968:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e024      	b.n	80039ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d107      	bne.n	8003988 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003978:	4b6a      	ldr	r3, [pc, #424]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0c6      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003988:	4b66      	ldr	r3, [pc, #408]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0be      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003998:	f000 f8ce 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 800399c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a61      	ldr	r2, [pc, #388]	@ (8003b28 <HAL_RCC_ClockConfig+0x268>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d909      	bls.n	80039ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 80039b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4957      	ldr	r1, [pc, #348]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd fd6c 	bl	80014a8 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fd fd68 	bl	80014a8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e095      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d023      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a42      	ldr	r2, [pc, #264]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a34:	4a3b      	ldr	r2, [pc, #236]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b39      	ldr	r3, [pc, #228]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4936      	ldr	r1, [pc, #216]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d105      	bne.n	8003a62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a56:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4a32      	ldr	r2, [pc, #200]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a62:	4b2f      	ldr	r3, [pc, #188]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d21d      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a70:	4b2b      	ldr	r3, [pc, #172]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 020f 	bic.w	r2, r3, #15
 8003a78:	4929      	ldr	r1, [pc, #164]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a80:	f7fd fd12 	bl	80014a8 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fd fd0e 	bl	80014a8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e03b      	b.n	8003b16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	@ (8003b20 <HAL_RCC_ClockConfig+0x260>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1ed      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4917      	ldr	r1, [pc, #92]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490f      	ldr	r1, [pc, #60]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aea:	f000 f825 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490c      	ldr	r1, [pc, #48]	@ (8003b2c <HAL_RCC_ClockConfig+0x26c>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_RCC_ClockConfig+0x270>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <HAL_RCC_ClockConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fbd2 	bl	80012b8 <HAL_InitTick>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	04c4b400 	.word	0x04c4b400
 8003b2c:	08007e0c 	.word	0x08007e0c
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d102      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e047      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b50:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e03e      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b62:	4b23      	ldr	r3, [pc, #140]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b0c      	cmp	r3, #12
 8003b6c:	d136      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b6e:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b78:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	3301      	adds	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b96:	68d2      	ldr	r2, [r2, #12]
 8003b98:	0a12      	lsrs	r2, r2, #8
 8003b9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	617b      	str	r3, [r7, #20]
      break;
 8003ba4:	e00c      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ba6:	4a13      	ldr	r2, [pc, #76]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	0a12      	lsrs	r2, r2, #8
 8003bb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
      break;
 8003bbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0e5b      	lsrs	r3, r3, #25
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	e001      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003be0:	693b      	ldr	r3, [r7, #16]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200

08003bfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4904      	ldr	r1, [pc, #16]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	08007e1c 	.word	0x08007e1c

08003c40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c50:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0203 	and.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c82:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <HAL_RCC_GetClockConfig+0x60>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003caa:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d10c      	bne.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc8:	4a17      	ldr	r2, [pc, #92]	@ (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd2:	68d2      	ldr	r2, [r2, #12]
 8003cd4:	0a12      	lsrs	r2, r2, #8
 8003cd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]
    break;
 8003ce0:	e00c      	b.n	8003cfc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce2:	4a12      	ldr	r2, [pc, #72]	@ (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	4a0e      	ldr	r2, [pc, #56]	@ (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	0a12      	lsrs	r2, r2, #8
 8003cf0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    break;
 8003cfa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	0e5b      	lsrs	r3, r3, #25
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d16:	687b      	ldr	r3, [r7, #4]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40021000 	.word	0x40021000
 8003d28:	007a1200 	.word	0x007a1200
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8098 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d52:	4b43      	ldr	r3, [pc, #268]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	4a3f      	ldr	r2, [pc, #252]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a39      	ldr	r2, [pc, #228]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d86:	f7fd fb8f 	bl	80014a8 <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8c:	e009      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7fd fb8b 	bl	80014a8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d902      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	74fb      	strb	r3, [r7, #19]
        break;
 8003da0:	e005      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da2:	4b30      	ldr	r3, [pc, #192]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ef      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d159      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003db4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01e      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d019      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dd0:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ddc:	4b20      	ldr	r3, [pc, #128]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dec:	4b1c      	ldr	r3, [pc, #112]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dfc:	4a18      	ldr	r2, [pc, #96]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd fb4b 	bl	80014a8 <HAL_GetTick>
 8003e12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e14:	e00b      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd fb47 	bl	80014a8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d902      	bls.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ec      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	4903      	ldr	r1, [pc, #12]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e58:	e008      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	74bb      	strb	r3, [r7, #18]
 8003e5e:	e005      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6c:	7c7b      	ldrb	r3, [r7, #17]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4ba6      	ldr	r3, [pc, #664]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	4aa5      	ldr	r2, [pc, #660]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8a:	4ba0      	ldr	r3, [pc, #640]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	f023 0203 	bic.w	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	499c      	ldr	r1, [pc, #624]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eac:	4b97      	ldr	r3, [pc, #604]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb2:	f023 020c 	bic.w	r2, r3, #12
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4994      	ldr	r1, [pc, #592]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ece:	4b8f      	ldr	r3, [pc, #572]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	498b      	ldr	r1, [pc, #556]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef0:	4b86      	ldr	r3, [pc, #536]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4983      	ldr	r1, [pc, #524]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f12:	4b7e      	ldr	r3, [pc, #504]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	497a      	ldr	r1, [pc, #488]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f34:	4b75      	ldr	r3, [pc, #468]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	4972      	ldr	r1, [pc, #456]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f56:	4b6d      	ldr	r3, [pc, #436]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	4969      	ldr	r1, [pc, #420]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f78:	4b64      	ldr	r3, [pc, #400]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4961      	ldr	r1, [pc, #388]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	4958      	ldr	r1, [pc, #352]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fbc:	4b53      	ldr	r3, [pc, #332]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	4950      	ldr	r1, [pc, #320]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff4:	4b45      	ldr	r3, [pc, #276]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4942      	ldr	r1, [pc, #264]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004012:	d105      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004014:	4b3d      	ldr	r3, [pc, #244]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a3c      	ldr	r2, [pc, #240]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800401e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d015      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800402c:	4b37      	ldr	r3, [pc, #220]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004032:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	4934      	ldr	r1, [pc, #208]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800404a:	d105      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800404c:	4b2f      	ldr	r3, [pc, #188]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a2e      	ldr	r2, [pc, #184]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004056:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004064:	4b29      	ldr	r3, [pc, #164]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	4926      	ldr	r1, [pc, #152]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004082:	d105      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004084:	4b21      	ldr	r3, [pc, #132]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a20      	ldr	r2, [pc, #128]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800409c:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	4918      	ldr	r1, [pc, #96]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ba:	d105      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040bc:	4b13      	ldr	r3, [pc, #76]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a12      	ldr	r2, [pc, #72]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040d4:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	490a      	ldr	r1, [pc, #40]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040f2:	d105      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a04      	ldr	r2, [pc, #16]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004100:	7cbb      	ldrb	r3, [r7, #18]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000

08004110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e09d      	b.n	800425e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	d108      	bne.n	800413c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004132:	d009      	beq.n	8004148 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
 800413a:	e005      	b.n	8004148 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd f864 	bl	8001230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800417e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004188:	d902      	bls.n	8004190 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e002      	b.n	8004196 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004194:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800419e:	d007      	beq.n	80041b0 <HAL_SPI_Init+0xa0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	ea42 0103 	orr.w	r1, r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	f003 0204 	and.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800422c:	ea42 0103 	orr.w	r1, r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b08a      	sub	sp, #40	@ 0x28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_SPI_TransmitReceive+0x26>
 8004288:	2302      	movs	r3, #2
 800428a:	e20a      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x43c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004294:	f7fd f908 	bl	80014a8 <HAL_GetTick>
 8004298:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b0:	7efb      	ldrb	r3, [r7, #27]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d00e      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x6e>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042bc:	d106      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x66>
 80042c6:	7efb      	ldrb	r3, [r7, #27]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d003      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80042d2:	e1e0      	b.n	8004696 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_SPI_TransmitReceive+0x80>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_SPI_TransmitReceive+0x80>
 80042e0:	887b      	ldrh	r3, [r7, #2]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80042ec:	e1d3      	b.n	8004696 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d003      	beq.n	8004302 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2205      	movs	r2, #5
 80042fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	887a      	ldrh	r2, [r7, #2]
 8004312:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	887a      	ldrh	r2, [r7, #2]
 800431a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004344:	d802      	bhi.n	800434c <HAL_SPI_TransmitReceive+0xe6>
 8004346:	8a3b      	ldrh	r3, [r7, #16]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d908      	bls.n	800435e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	e007      	b.n	800436e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800436c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	d007      	beq.n	800438c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800438a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004394:	f240 8081 	bls.w	800449a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x140>
 80043a0:	8a7b      	ldrh	r3, [r7, #18]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d16d      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ca:	e05a      	b.n	8004482 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d11b      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x1ac>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d016      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x1ac>
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d113      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d11c      	bne.n	800445a <HAL_SPI_TransmitReceive+0x1f4>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	b292      	uxth	r2, r2
 8004438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004456:	2301      	movs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800445a:	f7fd f825 	bl	80014a8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004466:	429a      	cmp	r2, r3
 8004468:	d80b      	bhi.n	8004482 <HAL_SPI_TransmitReceive+0x21c>
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004470:	d007      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004480:	e109      	b.n	8004696 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d19f      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x166>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d199      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x166>
 8004498:	e0e3      	b.n	8004662 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_SPI_TransmitReceive+0x244>
 80044a2:	8a7b      	ldrh	r3, [r7, #18]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 80cf 	bne.w	8004648 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d912      	bls.n	80044da <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b02      	subs	r3, #2
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044d8:	e0b6      	b.n	8004648 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004500:	e0a2      	b.n	8004648 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b02      	cmp	r3, #2
 800450e:	d134      	bne.n	800457a <HAL_SPI_TransmitReceive+0x314>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d02f      	beq.n	800457a <HAL_SPI_TransmitReceive+0x314>
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	2b01      	cmp	r3, #1
 800451e:	d12c      	bne.n	800457a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d912      	bls.n	8004550 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	1c9a      	adds	r2, r3, #2
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b02      	subs	r3, #2
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800454e:	e012      	b.n	8004576 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d148      	bne.n	800461a <HAL_SPI_TransmitReceive+0x3b4>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d042      	beq.n	800461a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d923      	bls.n	80045e8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	b292      	uxth	r2, r2
 80045ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	1c9a      	adds	r2, r3, #2
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b02      	subs	r3, #2
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d81f      	bhi.n	8004616 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	e016      	b.n	8004616 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f103 020c 	add.w	r2, r3, #12
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004616:	2301      	movs	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800461a:	f7fc ff45 	bl	80014a8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004626:	429a      	cmp	r2, r3
 8004628:	d803      	bhi.n	8004632 <HAL_SPI_TransmitReceive+0x3cc>
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004630:	d102      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x3d2>
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d107      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004646:	e026      	b.n	8004696 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	f47f af57 	bne.w	8004502 <HAL_SPI_TransmitReceive+0x29c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f af50 	bne.w	8004502 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f93e 	bl	80048e8 <SPI_EndRxTxTransaction>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468c:	e003      	b.n	8004696 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800469e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3728      	adds	r7, #40	@ 0x28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046bc:	f7fc fef4 	bl	80014a8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046cc:	f7fc feec 	bl	80014a8 <HAL_GetTick>
 80046d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046d2:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	015b      	lsls	r3, r3, #5
 80046d8:	0d1b      	lsrs	r3, r3, #20
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046e2:	e054      	b.n	800478e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ea:	d050      	beq.n	800478e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ec:	f7fc fedc 	bl	80014a8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d902      	bls.n	8004702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d13d      	bne.n	800477e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d111      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004724:	d004      	beq.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d107      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004748:	d10f      	bne.n	800476a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e017      	b.n	80047ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3b01      	subs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d19b      	bne.n	80046e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000000 	.word	0x20000000

080047bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047ce:	f7fc fe6b 	bl	80014a8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80047de:	f7fc fe63 	bl	80014a8 <HAL_GetTick>
 80047e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047ec:	4b3d      	ldr	r3, [pc, #244]	@ (80048e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00da      	lsls	r2, r3, #3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	0d1b      	lsrs	r3, r3, #20
 80047fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004804:	e060      	b.n	80048c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800480c:	d107      	bne.n	800481e <SPI_WaitFifoStateUntilTimeout+0x62>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800481c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004824:	d050      	beq.n	80048c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004826:	f7fc fe3f 	bl	80014a8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004832:	429a      	cmp	r2, r3
 8004834:	d902      	bls.n	800483c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	d13d      	bne.n	80048b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800484a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004854:	d111      	bne.n	800487a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800485e:	d004      	beq.n	800486a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004868:	d107      	bne.n	800487a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004878:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004882:	d10f      	bne.n	80048a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e010      	b.n	80048da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d196      	bne.n	8004806 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3728      	adds	r7, #40	@ 0x28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000000 	.word	0x20000000

080048e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff ff5b 	bl	80047bc <SPI_WaitFifoStateUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e027      	b.n	800496c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	2180      	movs	r1, #128	@ 0x80
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff fec0 	bl	80046ac <SPI_WaitFlagStateUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e014      	b.n	800496c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2200      	movs	r2, #0
 800494a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff ff34 	bl	80047bc <SPI_WaitFifoStateUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e000      	b.n	800496c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e049      	b.n	8004a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f841 	bl	8004a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 fa22 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d001      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e04a      	b.n	8004ae6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a21      	ldr	r2, [pc, #132]	@ (8004af4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7a:	d013      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1d      	ldr	r2, [pc, #116]	@ (8004af8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d115      	bne.n	8004ad0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b17      	ldr	r3, [pc, #92]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d015      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0xaa>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abc:	d011      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	e008      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e000      	b.n	8004ae4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	00010007 	.word	0x00010007

08004b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0202 	mvn.w	r2, #2
 8004b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f931 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f923 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f934 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0204 	mvn.w	r2, #4
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f90b 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8fd 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f90e 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0208 	mvn.w	r2, #8
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8e5 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8d7 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8e8 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0210 	mvn.w	r2, #16
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8bf 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8b1 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8c2 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0201 	mvn.w	r2, #1
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc f9f4 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f951 	bl	8004f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f949 	bl	8004f5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f87c 	bl	8004de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00c      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0220 	mvn.w	r2, #32
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f911 	bl	8004f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f91d 	bl	8004f70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f915 	bl	8004f84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f90d 	bl	8004f98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f905 	bl	8004fac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a42      	ldr	r2, [pc, #264]	@ (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a33      	ldr	r2, [pc, #204]	@ (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01b      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d017      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a30      	ldr	r2, [pc, #192]	@ (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	@ (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00f      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <TIM_Base_SetConfig+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	@ (8004f30 <TIM_Base_SetConfig+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	@ (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	@ (8004f24 <TIM_Base_SetConfig+0x128>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a16      	ldr	r2, [pc, #88]	@ (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <TIM_Base_SetConfig+0x130>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a14      	ldr	r2, [pc, #80]	@ (8004f30 <TIM_Base_SetConfig+0x134>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d105      	bne.n	8004f0a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <__NVIC_SetPriority>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db0a      	blt.n	8004fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	490c      	ldr	r1, [pc, #48]	@ (800500c <__NVIC_SetPriority+0x4c>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	0112      	lsls	r2, r2, #4
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004fe8:	e00a      	b.n	8005000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4908      	ldr	r1, [pc, #32]	@ (8005010 <__NVIC_SetPriority+0x50>)
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	761a      	strb	r2, [r3, #24]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000e100 	.word	0xe000e100
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <SysTick_Handler+0x1c>)
 800501a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800501c:	f001 fd46 	bl	8006aac <xTaskGetSchedulerState>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d001      	beq.n	800502a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005026:	f002 fb3f 	bl	80076a8 <xPortSysTickHandler>
  }
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	e000e010 	.word	0xe000e010

08005034 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005038:	2100      	movs	r1, #0
 800503a:	f06f 0004 	mvn.w	r0, #4
 800503e:	f7ff ffbf 	bl	8004fc0 <__NVIC_SetPriority>
#endif
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504e:	f3ef 8305 	mrs	r3, IPSR
 8005052:	603b      	str	r3, [r7, #0]
  return(result);
 8005054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800505a:	f06f 0305 	mvn.w	r3, #5
 800505e:	607b      	str	r3, [r7, #4]
 8005060:	e00c      	b.n	800507c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <osKernelInitialize+0x44>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800506a:	4b08      	ldr	r3, [pc, #32]	@ (800508c <osKernelInitialize+0x44>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005070:	2300      	movs	r3, #0
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e002      	b.n	800507c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800507a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800507c:	687b      	ldr	r3, [r7, #4]
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000220 	.word	0x20000220

08005090 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005096:	f3ef 8305 	mrs	r3, IPSR
 800509a:	603b      	str	r3, [r7, #0]
  return(result);
 800509c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80050a2:	f06f 0305 	mvn.w	r3, #5
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	e010      	b.n	80050cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050aa:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <osKernelStart+0x48>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d109      	bne.n	80050c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050b2:	f7ff ffbf 	bl	8005034 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050b6:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <osKernelStart+0x48>)
 80050b8:	2202      	movs	r2, #2
 80050ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050bc:	f001 f892 	bl	80061e4 <vTaskStartScheduler>
      stat = osOK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	e002      	b.n	80050cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000220 	.word	0x20000220

080050dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	@ 0x38
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ec:	f3ef 8305 	mrs	r3, IPSR
 80050f0:	617b      	str	r3, [r7, #20]
  return(result);
 80050f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d17e      	bne.n	80051f6 <osThreadNew+0x11a>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d07b      	beq.n	80051f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005102:	2318      	movs	r3, #24
 8005104:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800510e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d045      	beq.n	80051a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <osThreadNew+0x48>
        name = attr->name;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <osThreadNew+0x6e>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b38      	cmp	r3, #56	@ 0x38
 800513c:	d805      	bhi.n	800514a <osThreadNew+0x6e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <osThreadNew+0x72>
        return (NULL);
 800514a:	2300      	movs	r3, #0
 800514c:	e054      	b.n	80051f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <osThreadNew+0xa8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2ba7      	cmp	r3, #167	@ 0xa7
 800516c:	d90a      	bls.n	8005184 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <osThreadNew+0xa8>
        mem = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e010      	b.n	80051a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10c      	bne.n	80051a6 <osThreadNew+0xca>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <osThreadNew+0xca>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <osThreadNew+0xca>
          mem = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e001      	b.n	80051a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d110      	bne.n	80051ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051b4:	9202      	str	r2, [sp, #8]
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fe1a 	bl	8005dfc <xTaskCreateStatic>
 80051c8:	4603      	mov	r3, r0
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e013      	b.n	80051f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f107 0310 	add.w	r3, r7, #16
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fe68 	bl	8005ebc <xTaskCreate>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d001      	beq.n	80051f6 <osThreadNew+0x11a>
            hTask = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051f6:	693b      	ldr	r3, [r7, #16]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	@ 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005208:	f3ef 8305 	mrs	r3, IPSR
 800520c:	60bb      	str	r3, [r7, #8]
  return(result);
 800520e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <osDelay+0x1c>
    stat = osErrorISR;
 8005214:	f06f 0305 	mvn.w	r3, #5
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e007      	b.n	800522c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 ffa6 	bl	8006178 <vTaskDelay>
    }
  }

  return (stat);
 800522c:	68fb      	ldr	r3, [r7, #12]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a07      	ldr	r2, [pc, #28]	@ (8005264 <vApplicationGetIdleTaskMemory+0x2c>)
 8005248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a06      	ldr	r2, [pc, #24]	@ (8005268 <vApplicationGetIdleTaskMemory+0x30>)
 800524e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2280      	movs	r2, #128	@ 0x80
 8005254:	601a      	str	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000224 	.word	0x20000224
 8005268:	200002cc 	.word	0x200002cc

0800526c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a07      	ldr	r2, [pc, #28]	@ (8005298 <vApplicationGetTimerTaskMemory+0x2c>)
 800527c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4a06      	ldr	r2, [pc, #24]	@ (800529c <vApplicationGetTimerTaskMemory+0x30>)
 8005282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800528a:	601a      	str	r2, [r3, #0]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	200004cc 	.word	0x200004cc
 800529c:	20000574 	.word	0x20000574

080052a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f103 0208 	add.w	r2, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f103 0208 	add.w	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f103 0208 	add.w	r2, r3, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005358:	d103      	bne.n	8005362 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e00c      	b.n	800537c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3308      	adds	r3, #8
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e002      	b.n	8005370 <vListInsert+0x2e>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d2f6      	bcs.n	800536a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6892      	ldr	r2, [r2, #8]
 80053ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6852      	ldr	r2, [r2, #4]
 80053d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d103      	bne.n	80053e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	1e5a      	subs	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005434:	f002 f8a8 	bl	8007588 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	441a      	add	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	3b01      	subs	r3, #1
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	22ff      	movs	r2, #255	@ 0xff
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	22ff      	movs	r2, #255	@ 0xff
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d114      	bne.n	80054b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01a      	beq.n	80054c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3310      	adds	r3, #16
 8005496:	4618      	mov	r0, r3
 8005498:	f001 f942 	bl	8006720 <xTaskRemoveFromEventList>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d012      	beq.n	80054c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <xQueueGenericReset+0xd0>)
 80054a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	e009      	b.n	80054c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3310      	adds	r3, #16
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fef1 	bl	80052a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3324      	adds	r3, #36	@ 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff feec 	bl	80052a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054c8:	f002 f890 	bl	80075ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054cc:	2301      	movs	r3, #1
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08e      	sub	sp, #56	@ 0x38
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	e7fd      	b.n	8005522 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <xQueueGenericCreateStatic+0x56>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <xQueueGenericCreateStatic+0x5a>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <xQueueGenericCreateStatic+0x5c>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	623b      	str	r3, [r7, #32]
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <xQueueGenericCreateStatic+0x84>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <xQueueGenericCreateStatic+0x88>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <xQueueGenericCreateStatic+0x8a>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	61fb      	str	r3, [r7, #28]
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005582:	2350      	movs	r3, #80	@ 0x50
 8005584:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b50      	cmp	r3, #80	@ 0x50
 800558a:	d00b      	beq.n	80055a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	61bb      	str	r3, [r7, #24]
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f805 	bl	80055d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3730      	adds	r7, #48	@ 0x30
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e002      	b.n	80055f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005604:	2101      	movs	r1, #1
 8005606:	69b8      	ldr	r0, [r7, #24]
 8005608:	f7ff fefe 	bl	8005408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	@ 0x38
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <xQueueGenericSend+0x34>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <xQueueGenericSend+0x42>
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <xQueueGenericSend+0x46>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSend+0x48>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <xQueueGenericSend+0x64>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d103      	bne.n	800568e <xQueueGenericSend+0x72>
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <xQueueGenericSend+0x76>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueGenericSend+0x78>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <xQueueGenericSend+0x94>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	623b      	str	r3, [r7, #32]
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056b0:	f001 f9fc 	bl	8006aac <xTaskGetSchedulerState>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <xQueueGenericSend+0xa4>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <xQueueGenericSend+0xa8>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <xQueueGenericSend+0xaa>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	61fb      	str	r3, [r7, #28]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056e2:	f001 ff51 	bl	8007588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <xQueueGenericSend+0xdc>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d129      	bne.n	800574c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fe:	f000 fa0f 	bl	8005b20 <prvCopyDataToQueue>
 8005702:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	3324      	adds	r3, #36	@ 0x24
 8005710:	4618      	mov	r0, r3
 8005712:	f001 f805 	bl	8006720 <xTaskRemoveFromEventList>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800571c:	4b3f      	ldr	r3, [pc, #252]	@ (800581c <xQueueGenericSend+0x200>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	e00a      	b.n	8005744 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005734:	4b39      	ldr	r3, [pc, #228]	@ (800581c <xQueueGenericSend+0x200>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005744:	f001 ff52 	bl	80075ec <vPortExitCritical>
				return pdPASS;
 8005748:	2301      	movs	r3, #1
 800574a:	e063      	b.n	8005814 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005752:	f001 ff4b 	bl	80075ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005756:	2300      	movs	r3, #0
 8005758:	e05c      	b.n	8005814 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005760:	f107 0314 	add.w	r3, r7, #20
 8005764:	4618      	mov	r0, r3
 8005766:	f001 f83f 	bl	80067e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800576e:	f001 ff3d 	bl	80075ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005772:	f000 fda7 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005776:	f001 ff07 	bl	8007588 <vPortEnterCritical>
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005780:	b25b      	sxtb	r3, r3
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005786:	d103      	bne.n	8005790 <xQueueGenericSend+0x174>
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005796:	b25b      	sxtb	r3, r3
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x18a>
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a6:	f001 ff21 	bl	80075ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057aa:	1d3a      	adds	r2, r7, #4
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	4611      	mov	r1, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 f82e 	bl	8006814 <xTaskCheckForTimeOut>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d124      	bne.n	8005808 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057c0:	f000 faa6 	bl	8005d10 <prvIsQueueFull>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	3310      	adds	r3, #16
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 ff52 	bl	800667c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057da:	f000 fa31 	bl	8005c40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057de:	f000 fd7f 	bl	80062e0 <xTaskResumeAll>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f47f af7c 	bne.w	80056e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057ea:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <xQueueGenericSend+0x200>)
 80057ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	e772      	b.n	80056e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057fe:	f000 fa1f 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005802:	f000 fd6d 	bl	80062e0 <xTaskResumeAll>
 8005806:	e76c      	b.n	80056e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800580a:	f000 fa19 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580e:	f000 fd67 	bl	80062e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005812:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005814:	4618      	mov	r0, r3
 8005816:	3738      	adds	r7, #56	@ 0x38
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	e000ed04 	.word	0xe000ed04

08005820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b090      	sub	sp, #64	@ 0x40
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <xQueueGenericSendFromISR+0x3e>
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <xQueueGenericSendFromISR+0x42>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <xQueueGenericSendFromISR+0x44>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d103      	bne.n	800588e <xQueueGenericSendFromISR+0x6e>
 8005886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <xQueueGenericSendFromISR+0x72>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <xQueueGenericSendFromISR+0x74>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	623b      	str	r3, [r7, #32]
}
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
 80058ae:	e7fd      	b.n	80058ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058b0:	f001 ff4a 	bl	8007748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058b4:	f3ef 8211 	mrs	r2, BASEPRI
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61fa      	str	r2, [r7, #28]
 80058ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <xQueueGenericSendFromISR+0xc2>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d12f      	bne.n	8005942 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058f8:	f000 f912 	bl	8005b20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005904:	d112      	bne.n	800592c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	3324      	adds	r3, #36	@ 0x24
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ff04 	bl	8006720 <xTaskRemoveFromEventList>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00e      	beq.n	800593c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e007      	b.n	800593c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800592c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005930:	3301      	adds	r3, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	b25a      	sxtb	r2, r3
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800593c:	2301      	movs	r3, #1
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005940:	e001      	b.n	8005946 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005942:	2300      	movs	r3, #0
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005948:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005950:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005954:	4618      	mov	r0, r3
 8005956:	3740      	adds	r7, #64	@ 0x40
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <xQueueReceive+0x32>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	623b      	str	r3, [r7, #32]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <xQueueReceive+0x40>
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <xQueueReceive+0x44>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <xQueueReceive+0x46>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueReceive+0x62>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61fb      	str	r3, [r7, #28]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059be:	f001 f875 	bl	8006aac <xTaskGetSchedulerState>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <xQueueReceive+0x72>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueReceive+0x76>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueReceive+0x78>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <xQueueReceive+0x94>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f0:	f001 fdca 	bl	8007588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01f      	beq.n	8005a40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a04:	f000 f8f6 	bl	8005bf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00f      	beq.n	8005a38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	3310      	adds	r3, #16
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fe7f 	bl	8006720 <xTaskRemoveFromEventList>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a28:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <xQueueReceive+0x1c0>)
 8005a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a38:	f001 fdd8 	bl	80075ec <vPortExitCritical>
				return pdPASS;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e069      	b.n	8005b14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a46:	f001 fdd1 	bl	80075ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e062      	b.n	8005b14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a54:	f107 0310 	add.w	r3, r7, #16
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fec5 	bl	80067e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a62:	f001 fdc3 	bl	80075ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a66:	f000 fc2d 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a6a:	f001 fd8d 	bl	8007588 <vPortEnterCritical>
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a7a:	d103      	bne.n	8005a84 <xQueueReceive+0x128>
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a90:	d103      	bne.n	8005a9a <xQueueReceive+0x13e>
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a9a:	f001 fda7 	bl	80075ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9e:	1d3a      	adds	r2, r7, #4
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 feb4 	bl	8006814 <xTaskCheckForTimeOut>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d123      	bne.n	8005afa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab4:	f000 f916 	bl	8005ce4 <prvIsQueueEmpty>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	3324      	adds	r3, #36	@ 0x24
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fdd8 	bl	800667c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ace:	f000 f8b7 	bl	8005c40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad2:	f000 fc05 	bl	80062e0 <xTaskResumeAll>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d189      	bne.n	80059f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005adc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <xQueueReceive+0x1c0>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	e780      	b.n	80059f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af0:	f000 f8a6 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af4:	f000 fbf4 	bl	80062e0 <xTaskResumeAll>
 8005af8:	e77a      	b.n	80059f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005afc:	f000 f8a0 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b00:	f000 fbee 	bl	80062e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b06:	f000 f8ed 	bl	8005ce4 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f43f af6f 	beq.w	80059f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3730      	adds	r7, #48	@ 0x30
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d14d      	bne.n	8005be2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 ffcc 	bl	8006ae8 <xTaskPriorityDisinherit>
 8005b50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	e043      	b.n	8005be2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d119      	bne.n	8005b94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	f002 f8a0 	bl	8007cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d32b      	bcc.n	8005be2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e026      	b.n	8005be2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68d8      	ldr	r0, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	f002 f886 	bl	8007cb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bac:	425b      	negs	r3, r3
 8005bae:	441a      	add	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d207      	bcs.n	8005bd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	425b      	negs	r3, r3
 8005bca:	441a      	add	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d105      	bne.n	8005be2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005bea:	697b      	ldr	r3, [r7, #20]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0e:	441a      	add	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d303      	bcc.n	8005c28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68d9      	ldr	r1, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	461a      	mov	r2, r3
 8005c32:	6838      	ldr	r0, [r7, #0]
 8005c34:	f002 f83c 	bl	8007cb0 <memcpy>
	}
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c48:	f001 fc9e 	bl	8007588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c54:	e011      	b.n	8005c7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fd5c 	bl	8006720 <xTaskRemoveFromEventList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c6e:	f000 fe35 	bl	80068dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dce9      	bgt.n	8005c56 <prvUnlockQueue+0x16>
 8005c82:	e000      	b.n	8005c86 <prvUnlockQueue+0x46>
					break;
 8005c84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	22ff      	movs	r2, #255	@ 0xff
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c8e:	f001 fcad 	bl	80075ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c92:	f001 fc79 	bl	8007588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9e:	e011      	b.n	8005cc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3310      	adds	r3, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fd37 	bl	8006720 <xTaskRemoveFromEventList>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb8:	f000 fe10 	bl	80068dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dce9      	bgt.n	8005ca0 <prvUnlockQueue+0x60>
 8005ccc:	e000      	b.n	8005cd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	22ff      	movs	r2, #255	@ 0xff
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cd8:	f001 fc88 	bl	80075ec <vPortExitCritical>
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cec:	f001 fc4c 	bl	8007588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e001      	b.n	8005d02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f001 fc73 	bl	80075ec <vPortExitCritical>

	return xReturn;
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d18:	f001 fc36 	bl	8007588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d102      	bne.n	8005d2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e001      	b.n	8005d32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d32:	f001 fc5b 	bl	80075ec <vPortExitCritical>

	return xReturn;
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e014      	b.n	8005d7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d50:	4a0f      	ldr	r2, [pc, #60]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d5c:	490c      	ldr	r1, [pc, #48]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d66:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d72:	e006      	b.n	8005d82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d9e7      	bls.n	8005d50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000974 	.word	0x20000974

08005d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da4:	f001 fbf0 	bl	8007588 <vPortEnterCritical>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dae:	b25b      	sxtb	r3, r3
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005db4:	d103      	bne.n	8005dbe <vQueueWaitForMessageRestricted+0x2a>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dca:	d103      	bne.n	8005dd4 <vQueueWaitForMessageRestricted+0x40>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd4:	f001 fc0a 	bl	80075ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	3324      	adds	r3, #36	@ 0x24
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fc6d 	bl	80066c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f7ff ff26 	bl	8005c40 <prvUnlockQueue>
	}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	623b      	str	r3, [r7, #32]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61fb      	str	r3, [r7, #28]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e46:	23a8      	movs	r3, #168	@ 0xa8
 8005e48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005e4e:	d00b      	beq.n	8005e68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	61bb      	str	r3, [r7, #24]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <xTaskCreateStatic+0xb2>
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01b      	beq.n	8005eae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	9302      	str	r3, [sp, #8]
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f851 	bl	8005f48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ea8:	f000 f8f6 	bl	8006098 <prvAddNewTaskToReadyList>
 8005eac:	e001      	b.n	8005eb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eb2:	697b      	ldr	r3, [r7, #20]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	@ 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	@ 0x30
 8005ec0:	af04      	add	r7, sp, #16
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fc7b 	bl	80077cc <pvPortMalloc>
 8005ed6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ede:	20a8      	movs	r0, #168	@ 0xa8
 8005ee0:	f001 fc74 	bl	80077cc <pvPortMalloc>
 8005ee4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ef2:	e005      	b.n	8005f00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef4:	6978      	ldr	r0, [r7, #20]
 8005ef6:	f001 fd37 	bl	8007968 <vPortFree>
 8005efa:	e001      	b.n	8005f00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	2300      	movs	r3, #0
 8005f12:	9303      	str	r3, [sp, #12]
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	9302      	str	r3, [sp, #8]
 8005f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f80f 	bl	8005f48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f2a:	69f8      	ldr	r0, [r7, #28]
 8005f2c:	f000 f8b4 	bl	8006098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f30:	2301      	movs	r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e002      	b.n	8005f3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	461a      	mov	r2, r3
 8005f60:	21a5      	movs	r1, #165	@ 0xa5
 8005f62:	f001 fe21 	bl	8007ba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f70:	3b01      	subs	r3, #1
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f023 0307 	bic.w	r3, r3, #7
 8005f7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	617b      	str	r3, [r7, #20]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01f      	beq.n	8005fe8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	e012      	b.n	8005fd4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	7819      	ldrb	r1, [r3, #0]
 8005fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3334      	adds	r3, #52	@ 0x34
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d006      	beq.n	8005fdc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d9e9      	bls.n	8005fae <prvInitialiseNewTask+0x66>
 8005fda:	e000      	b.n	8005fde <prvInitialiseNewTask+0x96>
			{
				break;
 8005fdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fe6:	e003      	b.n	8005ff0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2b37      	cmp	r3, #55	@ 0x37
 8005ff4:	d901      	bls.n	8005ffa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff6:	2337      	movs	r3, #55	@ 0x37
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006004:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	2200      	movs	r2, #0
 800600a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	3304      	adds	r3, #4
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff f965 	bl	80052e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	3318      	adds	r3, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff f960 	bl	80052e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006024:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006034:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	2200      	movs	r2, #0
 8006042:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	3354      	adds	r3, #84	@ 0x54
 800604a:	224c      	movs	r2, #76	@ 0x4c
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fdaa 	bl	8007ba8 <memset>
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	4a0d      	ldr	r2, [pc, #52]	@ (800608c <prvInitialiseNewTask+0x144>)
 8006058:	659a      	str	r2, [r3, #88]	@ 0x58
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	4a0c      	ldr	r2, [pc, #48]	@ (8006090 <prvInitialiseNewTask+0x148>)
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	4a0c      	ldr	r2, [pc, #48]	@ (8006094 <prvInitialiseNewTask+0x14c>)
 8006064:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	69b8      	ldr	r0, [r7, #24]
 800606c:	f001 f95a 	bl	8007324 <pxPortInitialiseStack>
 8006070:	4602      	mov	r2, r0
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006082:	bf00      	nop
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20001c08 	.word	0x20001c08
 8006090:	20001c70 	.word	0x20001c70
 8006094:	20001cd8 	.word	0x20001cd8

08006098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060a0:	f001 fa72 	bl	8007588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a4:	4b2d      	ldr	r3, [pc, #180]	@ (800615c <prvAddNewTaskToReadyList+0xc4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	4a2c      	ldr	r2, [pc, #176]	@ (800615c <prvAddNewTaskToReadyList+0xc4>)
 80060ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006160 <prvAddNewTaskToReadyList+0xc8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006160 <prvAddNewTaskToReadyList+0xc8>)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060bc:	4b27      	ldr	r3, [pc, #156]	@ (800615c <prvAddNewTaskToReadyList+0xc4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d110      	bne.n	80060e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060c4:	f000 fc2e 	bl	8006924 <prvInitialiseTaskLists>
 80060c8:	e00d      	b.n	80060e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060ca:	4b26      	ldr	r3, [pc, #152]	@ (8006164 <prvAddNewTaskToReadyList+0xcc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060d2:	4b23      	ldr	r3, [pc, #140]	@ (8006160 <prvAddNewTaskToReadyList+0xc8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060dc:	429a      	cmp	r2, r3
 80060de:	d802      	bhi.n	80060e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006160 <prvAddNewTaskToReadyList+0xc8>)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <prvAddNewTaskToReadyList+0xd0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006168 <prvAddNewTaskToReadyList+0xd0>)
 80060ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006168 <prvAddNewTaskToReadyList+0xd0>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fc:	4b1b      	ldr	r3, [pc, #108]	@ (800616c <prvAddNewTaskToReadyList+0xd4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <prvAddNewTaskToReadyList+0x74>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	4a18      	ldr	r2, [pc, #96]	@ (800616c <prvAddNewTaskToReadyList+0xd4>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <prvAddNewTaskToReadyList+0xd8>)
 800611a:	441a      	add	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7ff f8e9 	bl	80052fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006128:	f001 fa60 	bl	80075ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800612c:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <prvAddNewTaskToReadyList+0xcc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00e      	beq.n	8006152 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006134:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <prvAddNewTaskToReadyList+0xc8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	429a      	cmp	r2, r3
 8006140:	d207      	bcs.n	8006152 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006142:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <prvAddNewTaskToReadyList+0xdc>)
 8006144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000e88 	.word	0x20000e88
 8006160:	200009b4 	.word	0x200009b4
 8006164:	20000e94 	.word	0x20000e94
 8006168:	20000ea4 	.word	0x20000ea4
 800616c:	20000e90 	.word	0x20000e90
 8006170:	200009b8 	.word	0x200009b8
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800618a:	4b14      	ldr	r3, [pc, #80]	@ (80061dc <vTaskDelay+0x64>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <vTaskDelay+0x32>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	e7fd      	b.n	80061a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061aa:	f000 f88b 	bl	80062c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061ae:	2100      	movs	r1, #0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fd09 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061b6:	f000 f893 	bl	80062e0 <xTaskResumeAll>
 80061ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d107      	bne.n	80061d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80061c2:	4b07      	ldr	r3, [pc, #28]	@ (80061e0 <vTaskDelay+0x68>)
 80061c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000eb0 	.word	0x20000eb0
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061f2:	463a      	mov	r2, r7
 80061f4:	1d39      	adds	r1, r7, #4
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff f81c 	bl	8005238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	9202      	str	r2, [sp, #8]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	2300      	movs	r3, #0
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2300      	movs	r3, #0
 8006210:	460a      	mov	r2, r1
 8006212:	4924      	ldr	r1, [pc, #144]	@ (80062a4 <vTaskStartScheduler+0xc0>)
 8006214:	4824      	ldr	r0, [pc, #144]	@ (80062a8 <vTaskStartScheduler+0xc4>)
 8006216:	f7ff fdf1 	bl	8005dfc <xTaskCreateStatic>
 800621a:	4603      	mov	r3, r0
 800621c:	4a23      	ldr	r2, [pc, #140]	@ (80062ac <vTaskStartScheduler+0xc8>)
 800621e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006220:	4b22      	ldr	r3, [pc, #136]	@ (80062ac <vTaskStartScheduler+0xc8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006228:	2301      	movs	r3, #1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e001      	b.n	8006232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d102      	bne.n	800623e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006238:	f000 fd1a 	bl	8006c70 <xTimerCreateTimerTask>
 800623c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d11b      	bne.n	800627c <vTaskStartScheduler+0x98>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	613b      	str	r3, [r7, #16]
}
 8006256:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006258:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <vTaskStartScheduler+0xcc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3354      	adds	r3, #84	@ 0x54
 800625e:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <vTaskStartScheduler+0xd0>)
 8006260:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006262:	4b15      	ldr	r3, [pc, #84]	@ (80062b8 <vTaskStartScheduler+0xd4>)
 8006264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006268:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800626a:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <vTaskStartScheduler+0xd8>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006270:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <vTaskStartScheduler+0xdc>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006276:	f001 f8e3 	bl	8007440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800627a:	e00f      	b.n	800629c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006282:	d10b      	bne.n	800629c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	60fb      	str	r3, [r7, #12]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <vTaskStartScheduler+0xb4>
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	08007da8 	.word	0x08007da8
 80062a8:	080068f5 	.word	0x080068f5
 80062ac:	20000eac 	.word	0x20000eac
 80062b0:	200009b4 	.word	0x200009b4
 80062b4:	20000010 	.word	0x20000010
 80062b8:	20000ea8 	.word	0x20000ea8
 80062bc:	20000e94 	.word	0x20000e94
 80062c0:	20000e8c 	.word	0x20000e8c

080062c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062c8:	4b04      	ldr	r3, [pc, #16]	@ (80062dc <vTaskSuspendAll+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a03      	ldr	r2, [pc, #12]	@ (80062dc <vTaskSuspendAll+0x18>)
 80062d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000eb0 	.word	0x20000eb0

080062e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ee:	4b42      	ldr	r3, [pc, #264]	@ (80063f8 <xTaskResumeAll+0x118>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <xTaskResumeAll+0x2e>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800630e:	f001 f93b 	bl	8007588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006312:	4b39      	ldr	r3, [pc, #228]	@ (80063f8 <xTaskResumeAll+0x118>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3b01      	subs	r3, #1
 8006318:	4a37      	ldr	r2, [pc, #220]	@ (80063f8 <xTaskResumeAll+0x118>)
 800631a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631c:	4b36      	ldr	r3, [pc, #216]	@ (80063f8 <xTaskResumeAll+0x118>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d162      	bne.n	80063ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006324:	4b35      	ldr	r3, [pc, #212]	@ (80063fc <xTaskResumeAll+0x11c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05e      	beq.n	80063ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632c:	e02f      	b.n	800638e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632e:	4b34      	ldr	r3, [pc, #208]	@ (8006400 <xTaskResumeAll+0x120>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3318      	adds	r3, #24
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff f83a 	bl	80053b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3304      	adds	r3, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff f835 	bl	80053b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634e:	4b2d      	ldr	r3, [pc, #180]	@ (8006404 <xTaskResumeAll+0x124>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d903      	bls.n	800635e <xTaskResumeAll+0x7e>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	4a2a      	ldr	r2, [pc, #168]	@ (8006404 <xTaskResumeAll+0x124>)
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4a27      	ldr	r2, [pc, #156]	@ (8006408 <xTaskResumeAll+0x128>)
 800636c:	441a      	add	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3304      	adds	r3, #4
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f7fe ffc0 	bl	80052fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800637e:	4b23      	ldr	r3, [pc, #140]	@ (800640c <xTaskResumeAll+0x12c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006388:	4b21      	ldr	r3, [pc, #132]	@ (8006410 <xTaskResumeAll+0x130>)
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638e:	4b1c      	ldr	r3, [pc, #112]	@ (8006400 <xTaskResumeAll+0x120>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1cb      	bne.n	800632e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800639c:	f000 fb66 	bl	8006a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006414 <xTaskResumeAll+0x134>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d010      	beq.n	80063ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063ac:	f000 f846 	bl	800643c <xTaskIncrementTick>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80063b6:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <xTaskResumeAll+0x130>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3b01      	subs	r3, #1
 80063c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1f1      	bne.n	80063ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80063c8:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <xTaskResumeAll+0x134>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063ce:	4b10      	ldr	r3, [pc, #64]	@ (8006410 <xTaskResumeAll+0x130>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063da:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <xTaskResumeAll+0x138>)
 80063dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ea:	f001 f8ff 	bl	80075ec <vPortExitCritical>

	return xAlreadyYielded;
 80063ee:	68bb      	ldr	r3, [r7, #8]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000eb0 	.word	0x20000eb0
 80063fc:	20000e88 	.word	0x20000e88
 8006400:	20000e48 	.word	0x20000e48
 8006404:	20000e90 	.word	0x20000e90
 8006408:	200009b8 	.word	0x200009b8
 800640c:	200009b4 	.word	0x200009b4
 8006410:	20000e9c 	.word	0x20000e9c
 8006414:	20000e98 	.word	0x20000e98
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006422:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <xTaskGetTickCount+0x1c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006428:	687b      	ldr	r3, [r7, #4]
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000e8c 	.word	0x20000e8c

0800643c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006446:	4b4f      	ldr	r3, [pc, #316]	@ (8006584 <xTaskIncrementTick+0x148>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 8090 	bne.w	8006570 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006450:	4b4d      	ldr	r3, [pc, #308]	@ (8006588 <xTaskIncrementTick+0x14c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006458:	4a4b      	ldr	r2, [pc, #300]	@ (8006588 <xTaskIncrementTick+0x14c>)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d121      	bne.n	80064a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006464:	4b49      	ldr	r3, [pc, #292]	@ (800658c <xTaskIncrementTick+0x150>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <xTaskIncrementTick+0x4a>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	603b      	str	r3, [r7, #0]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <xTaskIncrementTick+0x46>
 8006486:	4b41      	ldr	r3, [pc, #260]	@ (800658c <xTaskIncrementTick+0x150>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	4b40      	ldr	r3, [pc, #256]	@ (8006590 <xTaskIncrementTick+0x154>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a3e      	ldr	r2, [pc, #248]	@ (800658c <xTaskIncrementTick+0x150>)
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	4a3e      	ldr	r2, [pc, #248]	@ (8006590 <xTaskIncrementTick+0x154>)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	4b3e      	ldr	r3, [pc, #248]	@ (8006594 <xTaskIncrementTick+0x158>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006594 <xTaskIncrementTick+0x158>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	f000 fae2 	bl	8006a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006598 <xTaskIncrementTick+0x15c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d349      	bcc.n	8006546 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b2:	4b36      	ldr	r3, [pc, #216]	@ (800658c <xTaskIncrementTick+0x150>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064bc:	4b36      	ldr	r3, [pc, #216]	@ (8006598 <xTaskIncrementTick+0x15c>)
 80064be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064c2:	601a      	str	r2, [r3, #0]
					break;
 80064c4:	e03f      	b.n	8006546 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c6:	4b31      	ldr	r3, [pc, #196]	@ (800658c <xTaskIncrementTick+0x150>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d203      	bcs.n	80064e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064de:	4a2e      	ldr	r2, [pc, #184]	@ (8006598 <xTaskIncrementTick+0x15c>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064e4:	e02f      	b.n	8006546 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe ff62 	bl	80053b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	3318      	adds	r3, #24
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe ff59 	bl	80053b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006506:	4b25      	ldr	r3, [pc, #148]	@ (800659c <xTaskIncrementTick+0x160>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d903      	bls.n	8006516 <xTaskIncrementTick+0xda>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	4a22      	ldr	r2, [pc, #136]	@ (800659c <xTaskIncrementTick+0x160>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <xTaskIncrementTick+0x164>)
 8006524:	441a      	add	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7fe fee4 	bl	80052fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006536:	4b1b      	ldr	r3, [pc, #108]	@ (80065a4 <xTaskIncrementTick+0x168>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	429a      	cmp	r2, r3
 800653e:	d3b8      	bcc.n	80064b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006544:	e7b5      	b.n	80064b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006546:	4b17      	ldr	r3, [pc, #92]	@ (80065a4 <xTaskIncrementTick+0x168>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654c:	4914      	ldr	r1, [pc, #80]	@ (80065a0 <xTaskIncrementTick+0x164>)
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d901      	bls.n	8006562 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006562:	4b11      	ldr	r3, [pc, #68]	@ (80065a8 <xTaskIncrementTick+0x16c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800656a:	2301      	movs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e004      	b.n	800657a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006570:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <xTaskIncrementTick+0x170>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a0d      	ldr	r2, [pc, #52]	@ (80065ac <xTaskIncrementTick+0x170>)
 8006578:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800657a:	697b      	ldr	r3, [r7, #20]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000eb0 	.word	0x20000eb0
 8006588:	20000e8c 	.word	0x20000e8c
 800658c:	20000e40 	.word	0x20000e40
 8006590:	20000e44 	.word	0x20000e44
 8006594:	20000ea0 	.word	0x20000ea0
 8006598:	20000ea8 	.word	0x20000ea8
 800659c:	20000e90 	.word	0x20000e90
 80065a0:	200009b8 	.word	0x200009b8
 80065a4:	200009b4 	.word	0x200009b4
 80065a8:	20000e9c 	.word	0x20000e9c
 80065ac:	20000e98 	.word	0x20000e98

080065b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006664 <vTaskSwitchContext+0xb4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065be:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <vTaskSwitchContext+0xb8>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065c4:	e047      	b.n	8006656 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80065c6:	4b28      	ldr	r3, [pc, #160]	@ (8006668 <vTaskSwitchContext+0xb8>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065cc:	4b27      	ldr	r3, [pc, #156]	@ (800666c <vTaskSwitchContext+0xbc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e011      	b.n	80065f8 <vTaskSwitchContext+0x48>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	607b      	str	r3, [r7, #4]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <vTaskSwitchContext+0x3e>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	491d      	ldr	r1, [pc, #116]	@ (8006670 <vTaskSwitchContext+0xc0>)
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0e3      	beq.n	80065d4 <vTaskSwitchContext+0x24>
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4a16      	ldr	r2, [pc, #88]	@ (8006670 <vTaskSwitchContext+0xc0>)
 8006618:	4413      	add	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	3308      	adds	r3, #8
 800662e:	429a      	cmp	r2, r3
 8006630:	d104      	bne.n	800663c <vTaskSwitchContext+0x8c>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	605a      	str	r2, [r3, #4]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	4a0c      	ldr	r2, [pc, #48]	@ (8006674 <vTaskSwitchContext+0xc4>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4a09      	ldr	r2, [pc, #36]	@ (800666c <vTaskSwitchContext+0xbc>)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <vTaskSwitchContext+0xc4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3354      	adds	r3, #84	@ 0x54
 8006652:	4a09      	ldr	r2, [pc, #36]	@ (8006678 <vTaskSwitchContext+0xc8>)
 8006654:	6013      	str	r3, [r2, #0]
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000eb0 	.word	0x20000eb0
 8006668:	20000e9c 	.word	0x20000e9c
 800666c:	20000e90 	.word	0x20000e90
 8006670:	200009b8 	.word	0x200009b8
 8006674:	200009b4 	.word	0x200009b4
 8006678:	20000010 	.word	0x20000010

0800667c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60fb      	str	r3, [r7, #12]
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	e7fd      	b.n	80066a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a4:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <vTaskPlaceOnEventList+0x48>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3318      	adds	r3, #24
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fe fe48 	bl	8005342 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066b2:	2101      	movs	r1, #1
 80066b4:	6838      	ldr	r0, [r7, #0]
 80066b6:	f000 fa87 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200009b4 	.word	0x200009b4

080066c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	617b      	str	r3, [r7, #20]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <vTaskPlaceOnEventListRestricted+0x54>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4619      	mov	r1, r3
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7fe fdfd 	bl	80052fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800670a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	f000 fa5a 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
	}
 8006714:	bf00      	nop
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	200009b4 	.word	0x200009b4

08006720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3318      	adds	r3, #24
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fe2e 	bl	80053b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006758:	4b1d      	ldr	r3, [pc, #116]	@ (80067d0 <xTaskRemoveFromEventList+0xb0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d11d      	bne.n	800679c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fe25 	bl	80053b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	4b19      	ldr	r3, [pc, #100]	@ (80067d4 <xTaskRemoveFromEventList+0xb4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d903      	bls.n	800677e <xTaskRemoveFromEventList+0x5e>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	4a16      	ldr	r2, [pc, #88]	@ (80067d4 <xTaskRemoveFromEventList+0xb4>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4a13      	ldr	r2, [pc, #76]	@ (80067d8 <xTaskRemoveFromEventList+0xb8>)
 800678c:	441a      	add	r2, r3
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7fe fdb0 	bl	80052fa <vListInsertEnd>
 800679a:	e005      	b.n	80067a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3318      	adds	r3, #24
 80067a0:	4619      	mov	r1, r3
 80067a2:	480e      	ldr	r0, [pc, #56]	@ (80067dc <xTaskRemoveFromEventList+0xbc>)
 80067a4:	f7fe fda9 	bl	80052fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ac:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <xTaskRemoveFromEventList+0xc0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d905      	bls.n	80067c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067ba:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <xTaskRemoveFromEventList+0xc4>)
 80067bc:	2201      	movs	r2, #1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e001      	b.n	80067c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067c6:	697b      	ldr	r3, [r7, #20]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000eb0 	.word	0x20000eb0
 80067d4:	20000e90 	.word	0x20000e90
 80067d8:	200009b8 	.word	0x200009b8
 80067dc:	20000e48 	.word	0x20000e48
 80067e0:	200009b4 	.word	0x200009b4
 80067e4:	20000e9c 	.word	0x20000e9c

080067e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067f0:	4b06      	ldr	r3, [pc, #24]	@ (800680c <vTaskInternalSetTimeOutState+0x24>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <vTaskInternalSetTimeOutState+0x28>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	605a      	str	r2, [r3, #4]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	20000ea0 	.word	0x20000ea0
 8006810:	20000e8c 	.word	0x20000e8c

08006814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	613b      	str	r3, [r7, #16]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800685a:	f000 fe95 	bl	8007588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800685e:	4b1d      	ldr	r3, [pc, #116]	@ (80068d4 <xTaskCheckForTimeOut+0xc0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006876:	d102      	bne.n	800687e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006878:	2300      	movs	r3, #0
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e023      	b.n	80068c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b15      	ldr	r3, [pc, #84]	@ (80068d8 <xTaskCheckForTimeOut+0xc4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d007      	beq.n	800689a <xTaskCheckForTimeOut+0x86>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e015      	b.n	80068c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d20b      	bcs.n	80068bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ff99 	bl	80067e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	e004      	b.n	80068c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068c6:	f000 fe91 	bl	80075ec <vPortExitCritical>

	return xReturn;
 80068ca:	69fb      	ldr	r3, [r7, #28]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000e8c 	.word	0x20000e8c
 80068d8:	20000ea0 	.word	0x20000ea0

080068dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068e0:	4b03      	ldr	r3, [pc, #12]	@ (80068f0 <vTaskMissedYield+0x14>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
}
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20000e9c 	.word	0x20000e9c

080068f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068fc:	f000 f852 	bl	80069a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006900:	4b06      	ldr	r3, [pc, #24]	@ (800691c <prvIdleTask+0x28>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d9f9      	bls.n	80068fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <prvIdleTask+0x2c>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006918:	e7f0      	b.n	80068fc <prvIdleTask+0x8>
 800691a:	bf00      	nop
 800691c:	200009b8 	.word	0x200009b8
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800692a:	2300      	movs	r3, #0
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	e00c      	b.n	800694a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4a12      	ldr	r2, [pc, #72]	@ (8006984 <prvInitialiseTaskLists+0x60>)
 800693c:	4413      	add	r3, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fcae 	bl	80052a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3301      	adds	r3, #1
 8006948:	607b      	str	r3, [r7, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b37      	cmp	r3, #55	@ 0x37
 800694e:	d9ef      	bls.n	8006930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006950:	480d      	ldr	r0, [pc, #52]	@ (8006988 <prvInitialiseTaskLists+0x64>)
 8006952:	f7fe fca5 	bl	80052a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006956:	480d      	ldr	r0, [pc, #52]	@ (800698c <prvInitialiseTaskLists+0x68>)
 8006958:	f7fe fca2 	bl	80052a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800695c:	480c      	ldr	r0, [pc, #48]	@ (8006990 <prvInitialiseTaskLists+0x6c>)
 800695e:	f7fe fc9f 	bl	80052a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006962:	480c      	ldr	r0, [pc, #48]	@ (8006994 <prvInitialiseTaskLists+0x70>)
 8006964:	f7fe fc9c 	bl	80052a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006968:	480b      	ldr	r0, [pc, #44]	@ (8006998 <prvInitialiseTaskLists+0x74>)
 800696a:	f7fe fc99 	bl	80052a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <prvInitialiseTaskLists+0x78>)
 8006970:	4a05      	ldr	r2, [pc, #20]	@ (8006988 <prvInitialiseTaskLists+0x64>)
 8006972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <prvInitialiseTaskLists+0x7c>)
 8006976:	4a05      	ldr	r2, [pc, #20]	@ (800698c <prvInitialiseTaskLists+0x68>)
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200009b8 	.word	0x200009b8
 8006988:	20000e18 	.word	0x20000e18
 800698c:	20000e2c 	.word	0x20000e2c
 8006990:	20000e48 	.word	0x20000e48
 8006994:	20000e5c 	.word	0x20000e5c
 8006998:	20000e74 	.word	0x20000e74
 800699c:	20000e40 	.word	0x20000e40
 80069a0:	20000e44 	.word	0x20000e44

080069a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069aa:	e019      	b.n	80069e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069ac:	f000 fdec 	bl	8007588 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b0:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <prvCheckTasksWaitingTermination+0x50>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe fcf9 	bl	80053b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069c2:	4b0d      	ldr	r3, [pc, #52]	@ (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a0b      	ldr	r2, [pc, #44]	@ (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069cc:	4b0b      	ldr	r3, [pc, #44]	@ (80069fc <prvCheckTasksWaitingTermination+0x58>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	4a0a      	ldr	r2, [pc, #40]	@ (80069fc <prvCheckTasksWaitingTermination+0x58>)
 80069d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069d6:	f000 fe09 	bl	80075ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f810 	bl	8006a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e0:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <prvCheckTasksWaitingTermination+0x58>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e1      	bne.n	80069ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000e5c 	.word	0x20000e5c
 80069f8:	20000e88 	.word	0x20000e88
 80069fc:	20000e70 	.word	0x20000e70

08006a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3354      	adds	r3, #84	@ 0x54
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f8d3 	bl	8007bb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d108      	bne.n	8006a2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 ffa1 	bl	8007968 <vPortFree>
				vPortFree( pxTCB );
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 ff9e 	bl	8007968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a2c:	e019      	b.n	8006a62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d103      	bne.n	8006a40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 ff95 	bl	8007968 <vPortFree>
	}
 8006a3e:	e010      	b.n	8006a62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d00b      	beq.n	8006a62 <prvDeleteTCB+0x62>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	60fb      	str	r3, [r7, #12]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <prvDeleteTCB+0x5e>
	}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <prvResetNextTaskUnblockTime+0x38>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a84:	e008      	b.n	8006a98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a86:	4b07      	ldr	r3, [pc, #28]	@ (8006aa4 <prvResetNextTaskUnblockTime+0x38>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a04      	ldr	r2, [pc, #16]	@ (8006aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8006a96:	6013      	str	r3, [r2, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20000e40 	.word	0x20000e40
 8006aa8:	20000ea8 	.word	0x20000ea8

08006aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <xTaskGetSchedulerState+0x34>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aba:	2301      	movs	r3, #1
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	e008      	b.n	8006ad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac0:	4b08      	ldr	r3, [pc, #32]	@ (8006ae4 <xTaskGetSchedulerState+0x38>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	e001      	b.n	8006ad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ad2:	687b      	ldr	r3, [r7, #4]
	}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	20000e94 	.word	0x20000e94
 8006ae4:	20000eb0 	.word	0x20000eb0

08006ae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d058      	beq.n	8006bb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006afe:	4b2f      	ldr	r3, [pc, #188]	@ (8006bbc <xTaskPriorityDisinherit+0xd4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d00b      	beq.n	8006b20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	60fb      	str	r3, [r7, #12]
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10b      	bne.n	8006b40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60bb      	str	r3, [r7, #8]
}
 8006b3a:	bf00      	nop
 8006b3c:	bf00      	nop
 8006b3e:	e7fd      	b.n	8006b3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d02c      	beq.n	8006bb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d128      	bne.n	8006bb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fc26 	bl	80053b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b80:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc0 <xTaskPriorityDisinherit+0xd8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d903      	bls.n	8006b90 <xTaskPriorityDisinherit+0xa8>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006bc0 <xTaskPriorityDisinherit+0xd8>)
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4a09      	ldr	r2, [pc, #36]	@ (8006bc4 <xTaskPriorityDisinherit+0xdc>)
 8006b9e:	441a      	add	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f7fe fba7 	bl	80052fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bb0:	697b      	ldr	r3, [r7, #20]
	}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200009b4 	.word	0x200009b4
 8006bc0:	20000e90 	.word	0x20000e90
 8006bc4:	200009b8 	.word	0x200009b8

08006bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bd2:	4b21      	ldr	r3, [pc, #132]	@ (8006c58 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bd8:	4b20      	ldr	r3, [pc, #128]	@ (8006c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fbe8 	bl	80053b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bea:	d10a      	bne.n	8006c02 <prvAddCurrentTaskToDelayedList+0x3a>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4819      	ldr	r0, [pc, #100]	@ (8006c60 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bfc:	f7fe fb7d 	bl	80052fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c00:	e026      	b.n	8006c50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c0a:	4b14      	ldr	r3, [pc, #80]	@ (8006c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d209      	bcs.n	8006c2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	@ (8006c64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7fe fb8b 	bl	8005342 <vListInsert>
}
 8006c2c:	e010      	b.n	8006c50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fb81 	bl	8005342 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c40:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d202      	bcs.n	8006c50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c4a:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6013      	str	r3, [r2, #0]
}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	20000e8c 	.word	0x20000e8c
 8006c5c:	200009b4 	.word	0x200009b4
 8006c60:	20000e74 	.word	0x20000e74
 8006c64:	20000e44 	.word	0x20000e44
 8006c68:	20000e40 	.word	0x20000e40
 8006c6c:	20000ea8 	.word	0x20000ea8

08006c70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	@ 0x28
 8006c74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c7a:	f000 fb13 	bl	80072a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <xTimerCreateTimerTask+0x84>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d021      	beq.n	8006cca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c8e:	1d3a      	adds	r2, r7, #4
 8006c90:	f107 0108 	add.w	r1, r7, #8
 8006c94:	f107 030c 	add.w	r3, r7, #12
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fae7 	bl	800526c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	2302      	movs	r3, #2
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2300      	movs	r3, #0
 8006cae:	460a      	mov	r2, r1
 8006cb0:	4911      	ldr	r1, [pc, #68]	@ (8006cf8 <xTimerCreateTimerTask+0x88>)
 8006cb2:	4812      	ldr	r0, [pc, #72]	@ (8006cfc <xTimerCreateTimerTask+0x8c>)
 8006cb4:	f7ff f8a2 	bl	8005dfc <xTaskCreateStatic>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4a11      	ldr	r2, [pc, #68]	@ (8006d00 <xTimerCreateTimerTask+0x90>)
 8006cbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cbe:	4b10      	ldr	r3, [pc, #64]	@ (8006d00 <xTimerCreateTimerTask+0x90>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	613b      	str	r3, [r7, #16]
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	e7fd      	b.n	8006ce4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ce8:	697b      	ldr	r3, [r7, #20]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000ee4 	.word	0x20000ee4
 8006cf8:	08007db0 	.word	0x08007db0
 8006cfc:	08006e3d 	.word	0x08006e3d
 8006d00:	20000ee8 	.word	0x20000ee8

08006d04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	@ 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <xTimerGenericCommand+0x30>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	623b      	str	r3, [r7, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d34:	4b19      	ldr	r3, [pc, #100]	@ (8006d9c <xTimerGenericCommand+0x98>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d02a      	beq.n	8006d92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	dc18      	bgt.n	8006d80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d4e:	f7ff fead 	bl	8006aac <xTaskGetSchedulerState>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d109      	bne.n	8006d6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d58:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <xTimerGenericCommand+0x98>)
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f107 0110 	add.w	r1, r7, #16
 8006d60:	2300      	movs	r3, #0
 8006d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d64:	f7fe fc5a 	bl	800561c <xQueueGenericSend>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d6a:	e012      	b.n	8006d92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <xTimerGenericCommand+0x98>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	f107 0110 	add.w	r1, r7, #16
 8006d74:	2300      	movs	r3, #0
 8006d76:	2200      	movs	r2, #0
 8006d78:	f7fe fc50 	bl	800561c <xQueueGenericSend>
 8006d7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d7e:	e008      	b.n	8006d92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d80:	4b06      	ldr	r3, [pc, #24]	@ (8006d9c <xTimerGenericCommand+0x98>)
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	f107 0110 	add.w	r1, r7, #16
 8006d88:	2300      	movs	r3, #0
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	f7fe fd48 	bl	8005820 <xQueueGenericSendFromISR>
 8006d90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3728      	adds	r7, #40	@ 0x28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000ee4 	.word	0x20000ee4

08006da0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006daa:	4b23      	ldr	r3, [pc, #140]	@ (8006e38 <prvProcessExpiredTimer+0x98>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe fafb 	bl	80053b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d023      	beq.n	8006e14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	18d1      	adds	r1, r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	6978      	ldr	r0, [r7, #20]
 8006dda:	f000 f8d5 	bl	8006f88 <prvInsertTimerInActiveList>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de4:	2300      	movs	r3, #0
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	2100      	movs	r1, #0
 8006dee:	6978      	ldr	r0, [r7, #20]
 8006df0:	f7ff ff88 	bl	8006d04 <xTimerGenericCommand>
 8006df4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d114      	bne.n	8006e26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	6978      	ldr	r0, [r7, #20]
 8006e2c:	4798      	blx	r3
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000edc 	.word	0x20000edc

08006e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e44:	f107 0308 	add.w	r3, r7, #8
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 f859 	bl	8006f00 <prvGetNextExpireTime>
 8006e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f805 	bl	8006e64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e5a:	f000 f8d7 	bl	800700c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e5e:	bf00      	nop
 8006e60:	e7f0      	b.n	8006e44 <prvTimerTask+0x8>
	...

08006e64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e6e:	f7ff fa29 	bl	80062c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e72:	f107 0308 	add.w	r3, r7, #8
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f866 	bl	8006f48 <prvSampleTimeNow>
 8006e7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d130      	bne.n	8006ee6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <prvProcessTimerOrBlockTask+0x3c>
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d806      	bhi.n	8006ea0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e92:	f7ff fa25 	bl	80062e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff81 	bl	8006da0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e9e:	e024      	b.n	8006eea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ea6:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <prvProcessTimerOrBlockTask+0x90>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <prvProcessTimerOrBlockTask+0x50>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <prvProcessTimerOrBlockTask+0x52>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef8 <prvProcessTimerOrBlockTask+0x94>)
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f7fe ff65 	bl	8005d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006eca:	f7ff fa09 	bl	80062e0 <xTaskResumeAll>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ed4:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <prvProcessTimerOrBlockTask+0x98>)
 8006ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	f3bf 8f6f 	isb	sy
}
 8006ee4:	e001      	b.n	8006eea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ee6:	f7ff f9fb 	bl	80062e0 <xTaskResumeAll>
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000ee0 	.word	0x20000ee0
 8006ef8:	20000ee4 	.word	0x20000ee4
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f08:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <prvGetNextExpireTime+0x44>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <prvGetNextExpireTime+0x16>
 8006f12:	2201      	movs	r2, #1
 8006f14:	e000      	b.n	8006f18 <prvGetNextExpireTime+0x18>
 8006f16:	2200      	movs	r2, #0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f24:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <prvGetNextExpireTime+0x44>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e001      	b.n	8006f34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f34:	68fb      	ldr	r3, [r7, #12]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000edc 	.word	0x20000edc

08006f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f50:	f7ff fa64 	bl	800641c <xTaskGetTickCount>
 8006f54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f56:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <prvSampleTimeNow+0x3c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d205      	bcs.n	8006f6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f60:	f000 f93a 	bl	80071d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	e002      	b.n	8006f72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f72:	4a04      	ldr	r2, [pc, #16]	@ (8006f84 <prvSampleTimeNow+0x3c>)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f78:	68fb      	ldr	r3, [r7, #12]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000eec 	.word	0x20000eec

08006f88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d812      	bhi.n	8006fd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e01b      	b.n	8006ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fc2:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <prvInsertTimerInActiveList+0x7c>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe f9b8 	bl	8005342 <vListInsert>
 8006fd2:	e012      	b.n	8006ffa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d206      	bcs.n	8006fea <prvInsertTimerInActiveList+0x62>
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e007      	b.n	8006ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fea:	4b07      	ldr	r3, [pc, #28]	@ (8007008 <prvInsertTimerInActiveList+0x80>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fe f9a4 	bl	8005342 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ffa:	697b      	ldr	r3, [r7, #20]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000ee0 	.word	0x20000ee0
 8007008:	20000edc 	.word	0x20000edc

0800700c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	@ 0x38
 8007010:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007012:	e0ce      	b.n	80071b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	da19      	bge.n	800704e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	3304      	adds	r3, #4
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	61fb      	str	r3, [r7, #28]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800703e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007044:	6850      	ldr	r0, [r2, #4]
 8007046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007048:	6892      	ldr	r2, [r2, #8]
 800704a:	4611      	mov	r1, r2
 800704c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f2c0 80ae 	blt.w	80071b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	3304      	adds	r3, #4
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe f9a4 	bl	80053b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800706c:	463b      	mov	r3, r7
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff ff6a 	bl	8006f48 <prvSampleTimeNow>
 8007074:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b09      	cmp	r3, #9
 800707a:	f200 8097 	bhi.w	80071ac <prvProcessReceivedCommands+0x1a0>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <prvProcessReceivedCommands+0x78>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070ad 	.word	0x080070ad
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070ad 	.word	0x080070ad
 8007090:	08007123 	.word	0x08007123
 8007094:	08007137 	.word	0x08007137
 8007098:	08007183 	.word	0x08007183
 800709c:	080070ad 	.word	0x080070ad
 80070a0:	080070ad 	.word	0x080070ad
 80070a4:	08007123 	.word	0x08007123
 80070a8:	08007137 	.word	0x08007137
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070b2:	f043 0301 	orr.w	r3, r3, #1
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	18d1      	adds	r1, r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070cc:	f7ff ff5c 	bl	8006f88 <prvInsertTimerInActiveList>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d06c      	beq.n	80071b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d061      	beq.n	80071b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	441a      	add	r2, r3
 80070f4:	2300      	movs	r3, #0
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070fe:	f7ff fe01 	bl	8006d04 <xTimerGenericCommand>
 8007102:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d152      	bne.n	80071b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61bb      	str	r3, [r7, #24]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007134:	e03d      	b.n	80071b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	617b      	str	r3, [r7, #20]
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	18d1      	adds	r1, r2, r3
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800717c:	f7ff ff04 	bl	8006f88 <prvInsertTimerInActiveList>
					break;
 8007180:	e017      	b.n	80071b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007192:	f000 fbe9 	bl	8007968 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007196:	e00c      	b.n	80071b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071aa:	e002      	b.n	80071b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80071b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071b2:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <prvProcessReceivedCommands+0x1c8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1d39      	adds	r1, r7, #4
 80071b8:	2200      	movs	r2, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fbce 	bl	800595c <xQueueReceive>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f af26 	bne.w	8007014 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	3730      	adds	r7, #48	@ 0x30
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000ee4 	.word	0x20000ee4

080071d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071de:	e049      	b.n	8007274 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071e0:	4b2e      	ldr	r3, [pc, #184]	@ (800729c <prvSwitchTimerLists+0xc4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b2c      	ldr	r3, [pc, #176]	@ (800729c <prvSwitchTimerLists+0xc4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe f8db 	bl	80053b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d02f      	beq.n	8007274 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4413      	add	r3, r2
 800721c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	d90e      	bls.n	8007244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007232:	4b1a      	ldr	r3, [pc, #104]	@ (800729c <prvSwitchTimerLists+0xc4>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7fe f880 	bl	8005342 <vListInsert>
 8007242:	e017      	b.n	8007274 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007244:	2300      	movs	r3, #0
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	2100      	movs	r1, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff fd58 	bl	8006d04 <xTimerGenericCommand>
 8007254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	603b      	str	r3, [r7, #0]
}
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	e7fd      	b.n	8007270 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007274:	4b09      	ldr	r3, [pc, #36]	@ (800729c <prvSwitchTimerLists+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1b0      	bne.n	80071e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800727e:	4b07      	ldr	r3, [pc, #28]	@ (800729c <prvSwitchTimerLists+0xc4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007284:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <prvSwitchTimerLists+0xc8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a04      	ldr	r2, [pc, #16]	@ (800729c <prvSwitchTimerLists+0xc4>)
 800728a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800728c:	4a04      	ldr	r2, [pc, #16]	@ (80072a0 <prvSwitchTimerLists+0xc8>)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6013      	str	r3, [r2, #0]
}
 8007292:	bf00      	nop
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000edc 	.word	0x20000edc
 80072a0:	20000ee0 	.word	0x20000ee0

080072a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072aa:	f000 f96d 	bl	8007588 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ae:	4b15      	ldr	r3, [pc, #84]	@ (8007304 <prvCheckForValidListAndQueue+0x60>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d120      	bne.n	80072f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072b6:	4814      	ldr	r0, [pc, #80]	@ (8007308 <prvCheckForValidListAndQueue+0x64>)
 80072b8:	f7fd fff2 	bl	80052a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072bc:	4813      	ldr	r0, [pc, #76]	@ (800730c <prvCheckForValidListAndQueue+0x68>)
 80072be:	f7fd ffef 	bl	80052a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072c2:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <prvCheckForValidListAndQueue+0x6c>)
 80072c4:	4a10      	ldr	r2, [pc, #64]	@ (8007308 <prvCheckForValidListAndQueue+0x64>)
 80072c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072c8:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <prvCheckForValidListAndQueue+0x70>)
 80072ca:	4a10      	ldr	r2, [pc, #64]	@ (800730c <prvCheckForValidListAndQueue+0x68>)
 80072cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072ce:	2300      	movs	r3, #0
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4b11      	ldr	r3, [pc, #68]	@ (8007318 <prvCheckForValidListAndQueue+0x74>)
 80072d4:	4a11      	ldr	r2, [pc, #68]	@ (800731c <prvCheckForValidListAndQueue+0x78>)
 80072d6:	2110      	movs	r1, #16
 80072d8:	200a      	movs	r0, #10
 80072da:	f7fe f8ff 	bl	80054dc <xQueueGenericCreateStatic>
 80072de:	4603      	mov	r3, r0
 80072e0:	4a08      	ldr	r2, [pc, #32]	@ (8007304 <prvCheckForValidListAndQueue+0x60>)
 80072e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072e4:	4b07      	ldr	r3, [pc, #28]	@ (8007304 <prvCheckForValidListAndQueue+0x60>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072ec:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <prvCheckForValidListAndQueue+0x60>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	490b      	ldr	r1, [pc, #44]	@ (8007320 <prvCheckForValidListAndQueue+0x7c>)
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe fd24 	bl	8005d40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072f8:	f000 f978 	bl	80075ec <vPortExitCritical>
}
 80072fc:	bf00      	nop
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000ee4 	.word	0x20000ee4
 8007308:	20000eb4 	.word	0x20000eb4
 800730c:	20000ec8 	.word	0x20000ec8
 8007310:	20000edc 	.word	0x20000edc
 8007314:	20000ee0 	.word	0x20000ee0
 8007318:	20000f90 	.word	0x20000f90
 800731c:	20000ef0 	.word	0x20000ef0
 8007320:	08007db8 	.word	0x08007db8

08007324 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3b04      	subs	r3, #4
 8007334:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800733c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3b04      	subs	r3, #4
 8007342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f023 0201 	bic.w	r2, r3, #1
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b04      	subs	r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007354:	4a0c      	ldr	r2, [pc, #48]	@ (8007388 <pxPortInitialiseStack+0x64>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3b14      	subs	r3, #20
 800735e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3b04      	subs	r3, #4
 800736a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f06f 0202 	mvn.w	r2, #2
 8007372:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3b20      	subs	r3, #32
 8007378:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800737a:	68fb      	ldr	r3, [r7, #12]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	0800738d 	.word	0x0800738d

0800738c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007396:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <prvTaskExitError+0x58>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800739e:	d00b      	beq.n	80073b8 <prvTaskExitError+0x2c>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <prvTaskExitError+0x28>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	60bb      	str	r3, [r7, #8]
}
 80073ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073cc:	bf00      	nop
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0fc      	beq.n	80073ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	2000000c 	.word	0x2000000c
	...

080073f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073f0:	4b07      	ldr	r3, [pc, #28]	@ (8007410 <pxCurrentTCBConst2>)
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	6808      	ldr	r0, [r1, #0]
 80073f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	f380 8809 	msr	PSP, r0
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8811 	msr	BASEPRI, r0
 800740a:	4770      	bx	lr
 800740c:	f3af 8000 	nop.w

08007410 <pxCurrentTCBConst2>:
 8007410:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007418:	4808      	ldr	r0, [pc, #32]	@ (800743c <prvPortStartFirstTask+0x24>)
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f380 8808 	msr	MSP, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8814 	msr	CONTROL, r0
 800742a:	b662      	cpsie	i
 800742c:	b661      	cpsie	f
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	df00      	svc	0
 8007438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800743a:	bf00      	nop
 800743c:	e000ed08 	.word	0xe000ed08

08007440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007446:	4b47      	ldr	r3, [pc, #284]	@ (8007564 <xPortStartScheduler+0x124>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a47      	ldr	r2, [pc, #284]	@ (8007568 <xPortStartScheduler+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10b      	bne.n	8007468 <xPortStartScheduler+0x28>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007468:	4b3e      	ldr	r3, [pc, #248]	@ (8007564 <xPortStartScheduler+0x124>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a3f      	ldr	r2, [pc, #252]	@ (800756c <xPortStartScheduler+0x12c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d10b      	bne.n	800748a <xPortStartScheduler+0x4a>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60fb      	str	r3, [r7, #12]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800748a:	4b39      	ldr	r3, [pc, #228]	@ (8007570 <xPortStartScheduler+0x130>)
 800748c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	22ff      	movs	r2, #255	@ 0xff
 800749a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	4b31      	ldr	r3, [pc, #196]	@ (8007574 <xPortStartScheduler+0x134>)
 80074b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074b2:	4b31      	ldr	r3, [pc, #196]	@ (8007578 <xPortStartScheduler+0x138>)
 80074b4:	2207      	movs	r2, #7
 80074b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074b8:	e009      	b.n	80074ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007578 <xPortStartScheduler+0x138>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3b01      	subs	r3, #1
 80074c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007578 <xPortStartScheduler+0x138>)
 80074c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d6:	2b80      	cmp	r3, #128	@ 0x80
 80074d8:	d0ef      	beq.n	80074ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074da:	4b27      	ldr	r3, [pc, #156]	@ (8007578 <xPortStartScheduler+0x138>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1c3 0307 	rsb	r3, r3, #7
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d00b      	beq.n	80074fe <xPortStartScheduler+0xbe>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	60bb      	str	r3, [r7, #8]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007578 <xPortStartScheduler+0x138>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	4a1c      	ldr	r2, [pc, #112]	@ (8007578 <xPortStartScheduler+0x138>)
 8007506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007508:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <xPortStartScheduler+0x138>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007510:	4a19      	ldr	r2, [pc, #100]	@ (8007578 <xPortStartScheduler+0x138>)
 8007512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800751c:	4b17      	ldr	r3, [pc, #92]	@ (800757c <xPortStartScheduler+0x13c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a16      	ldr	r2, [pc, #88]	@ (800757c <xPortStartScheduler+0x13c>)
 8007522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007528:	4b14      	ldr	r3, [pc, #80]	@ (800757c <xPortStartScheduler+0x13c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a13      	ldr	r2, [pc, #76]	@ (800757c <xPortStartScheduler+0x13c>)
 800752e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007534:	f000 f8da 	bl	80076ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007538:	4b11      	ldr	r3, [pc, #68]	@ (8007580 <xPortStartScheduler+0x140>)
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800753e:	f000 f8f9 	bl	8007734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007542:	4b10      	ldr	r3, [pc, #64]	@ (8007584 <xPortStartScheduler+0x144>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a0f      	ldr	r2, [pc, #60]	@ (8007584 <xPortStartScheduler+0x144>)
 8007548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800754c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800754e:	f7ff ff63 	bl	8007418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007552:	f7ff f82d 	bl	80065b0 <vTaskSwitchContext>
	prvTaskExitError();
 8007556:	f7ff ff19 	bl	800738c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	e000ed00 	.word	0xe000ed00
 8007568:	410fc271 	.word	0x410fc271
 800756c:	410fc270 	.word	0x410fc270
 8007570:	e000e400 	.word	0xe000e400
 8007574:	20000fe0 	.word	0x20000fe0
 8007578:	20000fe4 	.word	0x20000fe4
 800757c:	e000ed20 	.word	0xe000ed20
 8007580:	2000000c 	.word	0x2000000c
 8007584:	e000ef34 	.word	0xe000ef34

08007588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075a2:	4b10      	ldr	r3, [pc, #64]	@ (80075e4 <vPortEnterCritical+0x5c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	4a0e      	ldr	r2, [pc, #56]	@ (80075e4 <vPortEnterCritical+0x5c>)
 80075aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075ac:	4b0d      	ldr	r3, [pc, #52]	@ (80075e4 <vPortEnterCritical+0x5c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d110      	bne.n	80075d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b4:	4b0c      	ldr	r3, [pc, #48]	@ (80075e8 <vPortEnterCritical+0x60>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	603b      	str	r3, [r7, #0]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <vPortEnterCritical+0x4a>
	}
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000000c 	.word	0x2000000c
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075f2:	4b12      	ldr	r3, [pc, #72]	@ (800763c <vPortExitCritical+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <vPortExitCritical+0x26>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	607b      	str	r3, [r7, #4]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007612:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3b01      	subs	r3, #1
 8007618:	4a08      	ldr	r2, [pc, #32]	@ (800763c <vPortExitCritical+0x50>)
 800761a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800761c:	4b07      	ldr	r3, [pc, #28]	@ (800763c <vPortExitCritical+0x50>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d105      	bne.n	8007630 <vPortExitCritical+0x44>
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f383 8811 	msr	BASEPRI, r3
}
 800762e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	2000000c 	.word	0x2000000c

08007640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007640:	f3ef 8009 	mrs	r0, PSP
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <pxCurrentTCBConst>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f01e 0f10 	tst.w	lr, #16
 8007650:	bf08      	it	eq
 8007652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	6010      	str	r0, [r2, #0]
 800765c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007664:	f380 8811 	msr	BASEPRI, r0
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f7fe ff9e 	bl	80065b0 <vTaskSwitchContext>
 8007674:	f04f 0000 	mov.w	r0, #0
 8007678:	f380 8811 	msr	BASEPRI, r0
 800767c:	bc09      	pop	{r0, r3}
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	6808      	ldr	r0, [r1, #0]
 8007682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007686:	f01e 0f10 	tst.w	lr, #16
 800768a:	bf08      	it	eq
 800768c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007690:	f380 8809 	msr	PSP, r0
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst>:
 80076a0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
}
 80076c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076c2:	f7fe febb 	bl	800643c <xTaskIncrementTick>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076cc:	4b06      	ldr	r3, [pc, #24]	@ (80076e8 <xPortSysTickHandler+0x40>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f383 8811 	msr	BASEPRI, r3
}
 80076de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007720 <vPortSetupTimerInterrupt+0x34>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007724 <vPortSetupTimerInterrupt+0x38>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <vPortSetupTimerInterrupt+0x3c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0a      	ldr	r2, [pc, #40]	@ (800772c <vPortSetupTimerInterrupt+0x40>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	4a09      	ldr	r2, [pc, #36]	@ (8007730 <vPortSetupTimerInterrupt+0x44>)
 800770a:	3b01      	subs	r3, #1
 800770c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800770e:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <vPortSetupTimerInterrupt+0x34>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	e000e010 	.word	0xe000e010
 8007724:	e000e018 	.word	0xe000e018
 8007728:	20000000 	.word	0x20000000
 800772c:	10624dd3 	.word	0x10624dd3
 8007730:	e000e014 	.word	0xe000e014

08007734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007744 <vPortEnableVFP+0x10>
 8007738:	6801      	ldr	r1, [r0, #0]
 800773a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800773e:	6001      	str	r1, [r0, #0]
 8007740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007742:	bf00      	nop
 8007744:	e000ed88 	.word	0xe000ed88

08007748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d915      	bls.n	8007786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800775a:	4a18      	ldr	r2, [pc, #96]	@ (80077bc <vPortValidateInterruptPriority+0x74>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007764:	4b16      	ldr	r3, [pc, #88]	@ (80077c0 <vPortValidateInterruptPriority+0x78>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	7afa      	ldrb	r2, [r7, #11]
 800776a:	429a      	cmp	r2, r3
 800776c:	d20b      	bcs.n	8007786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007786:	4b0f      	ldr	r3, [pc, #60]	@ (80077c4 <vPortValidateInterruptPriority+0x7c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800778e:	4b0e      	ldr	r3, [pc, #56]	@ (80077c8 <vPortValidateInterruptPriority+0x80>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d90b      	bls.n	80077ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	603b      	str	r3, [r7, #0]
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	e7fd      	b.n	80077aa <vPortValidateInterruptPriority+0x62>
	}
 80077ae:	bf00      	nop
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	e000e3f0 	.word	0xe000e3f0
 80077c0:	20000fe0 	.word	0x20000fe0
 80077c4:	e000ed0c 	.word	0xe000ed0c
 80077c8:	20000fe4 	.word	0x20000fe4

080077cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	@ 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077d8:	f7fe fd74 	bl	80062c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007950 <pvPortMalloc+0x184>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077e4:	f000 f924 	bl	8007a30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007954 <pvPortMalloc+0x188>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8095 	bne.w	8007920 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01e      	beq.n	800783a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077fc:	2208      	movs	r2, #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b00      	cmp	r3, #0
 800780c:	d015      	beq.n	800783a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f023 0307 	bic.w	r3, r3, #7
 8007814:	3308      	adds	r3, #8
 8007816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <pvPortMalloc+0x6e>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	617b      	str	r3, [r7, #20]
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	e7fd      	b.n	8007836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d06f      	beq.n	8007920 <pvPortMalloc+0x154>
 8007840:	4b45      	ldr	r3, [pc, #276]	@ (8007958 <pvPortMalloc+0x18c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d86a      	bhi.n	8007920 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800784a:	4b44      	ldr	r3, [pc, #272]	@ (800795c <pvPortMalloc+0x190>)
 800784c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800784e:	4b43      	ldr	r3, [pc, #268]	@ (800795c <pvPortMalloc+0x190>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007854:	e004      	b.n	8007860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d903      	bls.n	8007872 <pvPortMalloc+0xa6>
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f1      	bne.n	8007856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007872:	4b37      	ldr	r3, [pc, #220]	@ (8007950 <pvPortMalloc+0x184>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007878:	429a      	cmp	r2, r3
 800787a:	d051      	beq.n	8007920 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2208      	movs	r2, #8
 8007882:	4413      	add	r3, r2
 8007884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	2308      	movs	r3, #8
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	429a      	cmp	r2, r3
 800789c:	d920      	bls.n	80078e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800789e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <pvPortMalloc+0xfc>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	613b      	str	r3, [r7, #16]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078da:	69b8      	ldr	r0, [r7, #24]
 80078dc:	f000 f90a 	bl	8007af4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007958 <pvPortMalloc+0x18c>)
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007958 <pvPortMalloc+0x18c>)
 80078ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007958 <pvPortMalloc+0x18c>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <pvPortMalloc+0x194>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d203      	bcs.n	8007902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078fa:	4b17      	ldr	r3, [pc, #92]	@ (8007958 <pvPortMalloc+0x18c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a18      	ldr	r2, [pc, #96]	@ (8007960 <pvPortMalloc+0x194>)
 8007900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	4b13      	ldr	r3, [pc, #76]	@ (8007954 <pvPortMalloc+0x188>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	431a      	orrs	r2, r3
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007916:	4b13      	ldr	r3, [pc, #76]	@ (8007964 <pvPortMalloc+0x198>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	4a11      	ldr	r2, [pc, #68]	@ (8007964 <pvPortMalloc+0x198>)
 800791e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007920:	f7fe fcde 	bl	80062e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <pvPortMalloc+0x17a>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	60fb      	str	r3, [r7, #12]
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	e7fd      	b.n	8007942 <pvPortMalloc+0x176>
	return pvReturn;
 8007946:	69fb      	ldr	r3, [r7, #28]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3728      	adds	r7, #40	@ 0x28
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20001bf0 	.word	0x20001bf0
 8007954:	20001c04 	.word	0x20001c04
 8007958:	20001bf4 	.word	0x20001bf4
 800795c:	20001be8 	.word	0x20001be8
 8007960:	20001bf8 	.word	0x20001bf8
 8007964:	20001bfc 	.word	0x20001bfc

08007968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d04f      	beq.n	8007a1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800797a:	2308      	movs	r3, #8
 800797c:	425b      	negs	r3, r3
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	4413      	add	r3, r2
 8007982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	4b25      	ldr	r3, [pc, #148]	@ (8007a24 <vPortFree+0xbc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4013      	ands	r3, r2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <vPortFree+0x46>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60fb      	str	r3, [r7, #12]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <vPortFree+0x66>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	4b14      	ldr	r3, [pc, #80]	@ (8007a24 <vPortFree+0xbc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01e      	beq.n	8007a1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d11a      	bne.n	8007a1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a24 <vPortFree+0xbc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	401a      	ands	r2, r3
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079f4:	f7fe fc66 	bl	80062c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007a28 <vPortFree+0xc0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	4a09      	ldr	r2, [pc, #36]	@ (8007a28 <vPortFree+0xc0>)
 8007a04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f000 f874 	bl	8007af4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a0c:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <vPortFree+0xc4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3301      	adds	r3, #1
 8007a12:	4a06      	ldr	r2, [pc, #24]	@ (8007a2c <vPortFree+0xc4>)
 8007a14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a16:	f7fe fc63 	bl	80062e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20001c04 	.word	0x20001c04
 8007a28:	20001bf4 	.word	0x20001bf4
 8007a2c:	20001c00 	.word	0x20001c00

08007a30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a3c:	4b27      	ldr	r3, [pc, #156]	@ (8007adc <prvHeapInit+0xac>)
 8007a3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00c      	beq.n	8007a64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3307      	adds	r3, #7
 8007a4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007adc <prvHeapInit+0xac>)
 8007a60:	4413      	add	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae0 <prvHeapInit+0xb0>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ae0 <prvHeapInit+0xb0>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ae4 <prvHeapInit+0xb4>)
 8007a90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a92:	4b14      	ldr	r3, [pc, #80]	@ (8007ae4 <prvHeapInit+0xb4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ae4 <prvHeapInit+0xb4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae4 <prvHeapInit+0xb4>)
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae8 <prvHeapInit+0xb8>)
 8007abe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	4a09      	ldr	r2, [pc, #36]	@ (8007aec <prvHeapInit+0xbc>)
 8007ac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ac8:	4b09      	ldr	r3, [pc, #36]	@ (8007af0 <prvHeapInit+0xc0>)
 8007aca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ace:	601a      	str	r2, [r3, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	20000fe8 	.word	0x20000fe8
 8007ae0:	20001be8 	.word	0x20001be8
 8007ae4:	20001bf0 	.word	0x20001bf0
 8007ae8:	20001bf8 	.word	0x20001bf8
 8007aec:	20001bf4 	.word	0x20001bf4
 8007af0:	20001c04 	.word	0x20001c04

08007af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007afc:	4b28      	ldr	r3, [pc, #160]	@ (8007ba0 <prvInsertBlockIntoFreeList+0xac>)
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	e002      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x14>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d8f7      	bhi.n	8007b02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d108      	bne.n	8007b36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	441a      	add	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	441a      	add	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d118      	bne.n	8007b7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d00d      	beq.n	8007b72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e008      	b.n	8007b84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e003      	b.n	8007b84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d002      	beq.n	8007b92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20001be8 	.word	0x20001be8
 8007ba4:	20001bf0 	.word	0x20001bf0

08007ba8 <memset>:
 8007ba8:	4402      	add	r2, r0
 8007baa:	4603      	mov	r3, r0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d100      	bne.n	8007bb2 <memset+0xa>
 8007bb0:	4770      	bx	lr
 8007bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb6:	e7f9      	b.n	8007bac <memset+0x4>

08007bb8 <_reclaim_reent>:
 8007bb8:	4b29      	ldr	r3, [pc, #164]	@ (8007c60 <_reclaim_reent+0xa8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4283      	cmp	r3, r0
 8007bbe:	b570      	push	{r4, r5, r6, lr}
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	d04b      	beq.n	8007c5c <_reclaim_reent+0xa4>
 8007bc4:	69c3      	ldr	r3, [r0, #28]
 8007bc6:	b1ab      	cbz	r3, 8007bf4 <_reclaim_reent+0x3c>
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	b16b      	cbz	r3, 8007be8 <_reclaim_reent+0x30>
 8007bcc:	2500      	movs	r5, #0
 8007bce:	69e3      	ldr	r3, [r4, #28]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	5959      	ldr	r1, [r3, r5]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d13b      	bne.n	8007c50 <_reclaim_reent+0x98>
 8007bd8:	3504      	adds	r5, #4
 8007bda:	2d80      	cmp	r5, #128	@ 0x80
 8007bdc:	d1f7      	bne.n	8007bce <_reclaim_reent+0x16>
 8007bde:	69e3      	ldr	r3, [r4, #28]
 8007be0:	4620      	mov	r0, r4
 8007be2:	68d9      	ldr	r1, [r3, #12]
 8007be4:	f000 f872 	bl	8007ccc <_free_r>
 8007be8:	69e3      	ldr	r3, [r4, #28]
 8007bea:	6819      	ldr	r1, [r3, #0]
 8007bec:	b111      	cbz	r1, 8007bf4 <_reclaim_reent+0x3c>
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 f86c 	bl	8007ccc <_free_r>
 8007bf4:	6961      	ldr	r1, [r4, #20]
 8007bf6:	b111      	cbz	r1, 8007bfe <_reclaim_reent+0x46>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 f867 	bl	8007ccc <_free_r>
 8007bfe:	69e1      	ldr	r1, [r4, #28]
 8007c00:	b111      	cbz	r1, 8007c08 <_reclaim_reent+0x50>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f862 	bl	8007ccc <_free_r>
 8007c08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c0a:	b111      	cbz	r1, 8007c12 <_reclaim_reent+0x5a>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f85d 	bl	8007ccc <_free_r>
 8007c12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c14:	b111      	cbz	r1, 8007c1c <_reclaim_reent+0x64>
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f858 	bl	8007ccc <_free_r>
 8007c1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c1e:	b111      	cbz	r1, 8007c26 <_reclaim_reent+0x6e>
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 f853 	bl	8007ccc <_free_r>
 8007c26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c28:	b111      	cbz	r1, 8007c30 <_reclaim_reent+0x78>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f84e 	bl	8007ccc <_free_r>
 8007c30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c32:	b111      	cbz	r1, 8007c3a <_reclaim_reent+0x82>
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f849 	bl	8007ccc <_free_r>
 8007c3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c3c:	b111      	cbz	r1, 8007c44 <_reclaim_reent+0x8c>
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f844 	bl	8007ccc <_free_r>
 8007c44:	6a23      	ldr	r3, [r4, #32]
 8007c46:	b14b      	cbz	r3, 8007c5c <_reclaim_reent+0xa4>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c4e:	4718      	bx	r3
 8007c50:	680e      	ldr	r6, [r1, #0]
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f83a 	bl	8007ccc <_free_r>
 8007c58:	4631      	mov	r1, r6
 8007c5a:	e7bb      	b.n	8007bd4 <_reclaim_reent+0x1c>
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000010 	.word	0x20000010

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	@ (8007c9c <__libc_init_array+0x38>)
 8007c68:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca0 <__libc_init_array+0x3c>)
 8007c6a:	1b64      	subs	r4, r4, r5
 8007c6c:	10a4      	asrs	r4, r4, #2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca4 <__libc_init_array+0x40>)
 8007c76:	4c0c      	ldr	r4, [pc, #48]	@ (8007ca8 <__libc_init_array+0x44>)
 8007c78:	f000 f87e 	bl	8007d78 <_init>
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	2600      	movs	r6, #0
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	4798      	blx	r3
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	4798      	blx	r3
 8007c98:	3601      	adds	r6, #1
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08007e24 	.word	0x08007e24
 8007ca0:	08007e24 	.word	0x08007e24
 8007ca4:	08007e24 	.word	0x08007e24
 8007ca8:	08007e28 	.word	0x08007e28

08007cac <__retarget_lock_acquire_recursive>:
 8007cac:	4770      	bx	lr

08007cae <__retarget_lock_release_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <memcpy>:
 8007cb0:	440a      	add	r2, r1
 8007cb2:	4291      	cmp	r1, r2
 8007cb4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007cb8:	d100      	bne.n	8007cbc <memcpy+0xc>
 8007cba:	4770      	bx	lr
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	d1f9      	bne.n	8007cbe <memcpy+0xe>
 8007cca:	bd10      	pop	{r4, pc}

08007ccc <_free_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4605      	mov	r5, r0
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d041      	beq.n	8007d58 <_free_r+0x8c>
 8007cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd8:	1f0c      	subs	r4, r1, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bfb8      	it	lt
 8007cde:	18e4      	addlt	r4, r4, r3
 8007ce0:	f000 f83e 	bl	8007d60 <__malloc_lock>
 8007ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d5c <_free_r+0x90>)
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	b933      	cbnz	r3, 8007cf8 <_free_r+0x2c>
 8007cea:	6063      	str	r3, [r4, #4]
 8007cec:	6014      	str	r4, [r2, #0]
 8007cee:	4628      	mov	r0, r5
 8007cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf4:	f000 b83a 	b.w	8007d6c <__malloc_unlock>
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d908      	bls.n	8007d0e <_free_r+0x42>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	1821      	adds	r1, r4, r0
 8007d00:	428b      	cmp	r3, r1
 8007d02:	bf01      	itttt	eq
 8007d04:	6819      	ldreq	r1, [r3, #0]
 8007d06:	685b      	ldreq	r3, [r3, #4]
 8007d08:	1809      	addeq	r1, r1, r0
 8007d0a:	6021      	streq	r1, [r4, #0]
 8007d0c:	e7ed      	b.n	8007cea <_free_r+0x1e>
 8007d0e:	461a      	mov	r2, r3
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	b10b      	cbz	r3, 8007d18 <_free_r+0x4c>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d9fa      	bls.n	8007d0e <_free_r+0x42>
 8007d18:	6811      	ldr	r1, [r2, #0]
 8007d1a:	1850      	adds	r0, r2, r1
 8007d1c:	42a0      	cmp	r0, r4
 8007d1e:	d10b      	bne.n	8007d38 <_free_r+0x6c>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	4401      	add	r1, r0
 8007d24:	1850      	adds	r0, r2, r1
 8007d26:	4283      	cmp	r3, r0
 8007d28:	6011      	str	r1, [r2, #0]
 8007d2a:	d1e0      	bne.n	8007cee <_free_r+0x22>
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	6053      	str	r3, [r2, #4]
 8007d32:	4408      	add	r0, r1
 8007d34:	6010      	str	r0, [r2, #0]
 8007d36:	e7da      	b.n	8007cee <_free_r+0x22>
 8007d38:	d902      	bls.n	8007d40 <_free_r+0x74>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	e7d6      	b.n	8007cee <_free_r+0x22>
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	1821      	adds	r1, r4, r0
 8007d44:	428b      	cmp	r3, r1
 8007d46:	bf04      	itt	eq
 8007d48:	6819      	ldreq	r1, [r3, #0]
 8007d4a:	685b      	ldreq	r3, [r3, #4]
 8007d4c:	6063      	str	r3, [r4, #4]
 8007d4e:	bf04      	itt	eq
 8007d50:	1809      	addeq	r1, r1, r0
 8007d52:	6021      	streq	r1, [r4, #0]
 8007d54:	6054      	str	r4, [r2, #4]
 8007d56:	e7ca      	b.n	8007cee <_free_r+0x22>
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20001d44 	.word	0x20001d44

08007d60 <__malloc_lock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	@ (8007d68 <__malloc_lock+0x8>)
 8007d62:	f7ff bfa3 	b.w	8007cac <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	20001d40 	.word	0x20001d40

08007d6c <__malloc_unlock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	@ (8007d74 <__malloc_unlock+0x8>)
 8007d6e:	f7ff bf9e 	b.w	8007cae <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	20001d40 	.word	0x20001d40

08007d78 <_init>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr

08007d84 <_fini>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr
