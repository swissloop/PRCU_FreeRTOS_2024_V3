
PRCU_with_FreeRTOS_2024_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c88  08004c88  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004c88  08004c88  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c88  08004c88  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b9c  20000060  08004cf0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  08004cf0  00006bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d04  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307a  00000000  00000000  0001bd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0001ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000341a  00000000  00000000  00021182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d2a  00000000  00000000  0002459c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9cba  00000000  00000000  000382c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  00101fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001076dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004be8 	.word	0x08004be8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08004be8 	.word	0x08004be8

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa19 	bl	800065a <HAL_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED); // Calibrates ADC for high pressure sensor

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f824 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f86e 	bl	800030c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fe46 	bl	8001ec0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000234:	4a09      	ldr	r2, [pc, #36]	@ (800025c <main+0x3c>)
 8000236:	2100      	movs	r1, #0
 8000238:	4809      	ldr	r0, [pc, #36]	@ (8000260 <main+0x40>)
 800023a:	f001 fe8b 	bl	8001f54 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <main+0x44>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000244:	4a08      	ldr	r2, [pc, #32]	@ (8000268 <main+0x48>)
 8000246:	2100      	movs	r1, #0
 8000248:	4808      	ldr	r0, [pc, #32]	@ (800026c <main+0x4c>)
 800024a:	f001 fe83 	bl	8001f54 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <main+0x50>)
 8000252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000254:	f001 fe58 	bl	8001f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	bf00      	nop
 800025a:	e7fd      	b.n	8000258 <main+0x38>
 800025c:	08004c28 	.word	0x08004c28
 8000260:	080003e5 	.word	0x080003e5
 8000264:	2000007c 	.word	0x2000007c
 8000268:	08004c4c 	.word	0x08004c4c
 800026c:	08000411 	.word	0x08000411
 8000270:	20000080 	.word	0x20000080

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b094      	sub	sp, #80	@ 0x50
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2238      	movs	r2, #56	@ 0x38
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f004 fbc8 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000296:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800029a:	f000 fca9 	bl	8000bf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	2340      	movs	r3, #64	@ 0x40
 80002aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b0:	2302      	movs	r3, #2
 80002b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002b4:	2304      	movs	r3, #4
 80002b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002b8:	234b      	movs	r3, #75	@ 0x4b
 80002ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002bc:	2302      	movs	r3, #2
 80002be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c0:	2302      	movs	r3, #2
 80002c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c4:	2302      	movs	r3, #2
 80002c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fd43 	bl	8000d58 <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002d8:	f000 f8c2 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2303      	movs	r3, #3
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2104      	movs	r1, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 f841 	bl	800137c <HAL_RCC_ClockConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000300:	f000 f8ae 	bl	8000460 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3750      	adds	r7, #80	@ 0x50
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000322:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <MX_GPIO_Init+0xd0>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	4a2d      	ldr	r2, [pc, #180]	@ (80003dc <MX_GPIO_Init+0xd0>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800032e:	4b2b      	ldr	r3, [pc, #172]	@ (80003dc <MX_GPIO_Init+0xd0>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033a:	4b28      	ldr	r3, [pc, #160]	@ (80003dc <MX_GPIO_Init+0xd0>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	4a27      	ldr	r2, [pc, #156]	@ (80003dc <MX_GPIO_Init+0xd0>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000346:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <MX_GPIO_Init+0xd0>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2140      	movs	r1, #64	@ 0x40
 8000356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035a:	f000 fc17 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin|System_Ready_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	21c0      	movs	r1, #192	@ 0xc0
 8000362:	481f      	ldr	r0, [pc, #124]	@ (80003e0 <MX_GPIO_Init+0xd4>)
 8000364:	f000 fc12 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : High_Pressure_ADC_Pin */
  GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 8000368:	2320      	movs	r3, #32
 800036a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800036c:	2303      	movs	r3, #3
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000374:	f107 030c 	add.w	r3, r7, #12
 8000378:	4619      	mov	r1, r3
 800037a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037e:	f000 fa83 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : Valve_Enable_Pin */
  GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8000382:	2340      	movs	r3, #64	@ 0x40
 8000384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800038a:	2302      	movs	r3, #2
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800039c:	f000 fa74 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : Low_Pressure_ADC_Pin */
  GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 80003a0:	2302      	movs	r3, #2
 80003a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003a4:	2303      	movs	r3, #3
 80003a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 030c 	add.w	r3, r7, #12
 80003b0:	4619      	mov	r1, r3
 80003b2:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <MX_GPIO_Init+0xd4>)
 80003b4:	f000 fa68 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
  GPIO_InitStruct.Pin = PRS_Ready_Pin|System_Ready_Pin;
 80003b8:	23c0      	movs	r3, #192	@ 0xc0
 80003ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003c0:	2302      	movs	r3, #2
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c8:	f107 030c 	add.w	r3, r7, #12
 80003cc:	4619      	mov	r1, r3
 80003ce:	4804      	ldr	r0, [pc, #16]	@ (80003e0 <MX_GPIO_Init+0xd4>)
 80003d0:	f000 fa5a 	bl	8000888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	48000400 	.word	0x48000400

080003e4 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 80003ec:	2140      	movs	r1, #64	@ 0x40
 80003ee:	4807      	ldr	r0, [pc, #28]	@ (800040c <StartBlink01+0x28>)
 80003f0:	f000 fbe4 	bl	8000bbc <HAL_GPIO_TogglePin>
	  osDelay(100);
 80003f4:	2064      	movs	r0, #100	@ 0x64
 80003f6:	f001 fe3f 	bl	8002078 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 80003fa:	2140      	movs	r1, #64	@ 0x40
 80003fc:	4803      	ldr	r0, [pc, #12]	@ (800040c <StartBlink01+0x28>)
 80003fe:	f000 fbdd 	bl	8000bbc <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000402:	2064      	movs	r0, #100	@ 0x64
 8000404:	f001 fe38 	bl	8002078 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000408:	bf00      	nop
 800040a:	e7ef      	b.n	80003ec <StartBlink01+0x8>
 800040c:	48000400 	.word	0x48000400

08000410 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000418:	2140      	movs	r1, #64	@ 0x40
 800041a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041e:	f000 fbcd 	bl	8000bbc <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000422:	2064      	movs	r0, #100	@ 0x64
 8000424:	f001 fe28 	bl	8002078 <osDelay>
	  HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000428:	2140      	movs	r1, #64	@ 0x40
 800042a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042e:	f000 fbc5 	bl	8000bbc <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000432:	2064      	movs	r0, #100	@ 0x64
 8000434:	f001 fe20 	bl	8002078 <osDelay>
	  HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000438:	bf00      	nop
 800043a:	e7ed      	b.n	8000418 <StartBlink02+0x8>

0800043c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d101      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800044e:	f000 f91d 	bl	800068c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40001000 	.word	0x40001000

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <Error_Handler+0x8>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <HAL_MspInit+0x50>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000476:	4a11      	ldr	r2, [pc, #68]	@ (80004bc <HAL_MspInit+0x50>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6613      	str	r3, [r2, #96]	@ 0x60
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x50>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x50>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048e:	4a0b      	ldr	r2, [pc, #44]	@ (80004bc <HAL_MspInit+0x50>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	6593      	str	r3, [r2, #88]	@ 0x58
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_MspInit+0x50>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	210f      	movs	r1, #15
 80004a6:	f06f 0001 	mvn.w	r0, #1
 80004aa:	f000 f9c5 	bl	8000838 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004ae:	f000 fc43 	bl	8000d38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	@ 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000584 <HAL_InitTick+0xc4>)
 80004d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000584 <HAL_InitTick+0xc4>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6593      	str	r3, [r2, #88]	@ 0x58
 80004dc:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <HAL_InitTick+0xc4>)
 80004de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e8:	f107 020c 	add.w	r2, r7, #12
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 f902 	bl	80016fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004f8:	f001 f8ea 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 80004fc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000500:	4a21      	ldr	r2, [pc, #132]	@ (8000588 <HAL_InitTick+0xc8>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3b01      	subs	r3, #1
 800050a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <HAL_InitTick+0xcc>)
 800050e:	4a20      	ldr	r2, [pc, #128]	@ (8000590 <HAL_InitTick+0xd0>)
 8000510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000512:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <HAL_InitTick+0xcc>)
 8000514:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000518:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800051a:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <HAL_InitTick+0xcc>)
 800051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <HAL_InitTick+0xcc>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <HAL_InitTick+0xcc>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800052c:	4817      	ldr	r0, [pc, #92]	@ (800058c <HAL_InitTick+0xcc>)
 800052e:	f001 f95d 	bl	80017ec <HAL_TIM_Base_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800053c:	2b00      	cmp	r3, #0
 800053e:	d11b      	bne.n	8000578 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000540:	4812      	ldr	r0, [pc, #72]	@ (800058c <HAL_InitTick+0xcc>)
 8000542:	f001 f9b5 	bl	80018b0 <HAL_TIM_Base_Start_IT>
 8000546:	4603      	mov	r3, r0
 8000548:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800054c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000550:	2b00      	cmp	r3, #0
 8000552:	d111      	bne.n	8000578 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000554:	2036      	movs	r0, #54	@ 0x36
 8000556:	f000 f989 	bl	800086c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d808      	bhi.n	8000572 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2036      	movs	r0, #54	@ 0x36
 8000566:	f000 f967 	bl	8000838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <HAL_InitTick+0xd4>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	e002      	b.n	8000578 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000578:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800057c:	4618      	mov	r0, r3
 800057e:	3730      	adds	r7, #48	@ 0x30
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	431bde83 	.word	0x431bde83
 800058c:	20000084 	.word	0x20000084
 8000590:	40001000 	.word	0x40001000
 8000594:	20000004 	.word	0x20000004

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <NMI_Handler+0x4>

080005a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <MemManage_Handler+0x4>

080005b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <UsageFault_Handler+0x4>

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <TIM6_DAC_IRQHandler+0x10>)
 80005d6:	f001 f9d5 	bl	8001984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000084 	.word	0x20000084

080005e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <SystemInit+0x20>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ee:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <SystemInit+0x20>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800060c:	f7ff ffea 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	@ (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	@ (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f004 fa4d 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063a:	f7ff fdf1 	bl	8000220 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800064c:	08004c90 	.word	0x08004c90
  ldr r2, =_sbss
 8000650:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000654:	20001bfc 	.word	0x20001bfc

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>

0800065a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	2300      	movs	r3, #0
 8000662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f8dc 	bl	8000822 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066a:	200f      	movs	r0, #15
 800066c:	f7ff ff28 	bl	80004c0 <HAL_InitTick>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e001      	b.n	8000680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800067c:	f7ff fef6 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000680:	79fb      	ldrb	r3, [r7, #7]

}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <HAL_IncTick+0x1c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_IncTick+0x20>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4413      	add	r3, r2
 800069a:	4a03      	ldr	r2, [pc, #12]	@ (80006a8 <HAL_IncTick+0x1c>)
 800069c:	6013      	str	r3, [r2, #0]
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	200000d0 	.word	0x200000d0
 80006ac:	20000008 	.word	0x20000008

080006b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	200000d0 	.word	0x200000d0

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 021f 	and.w	r2, r3, #31
 8000744:	4907      	ldr	r1, [pc, #28]	@ (8000764 <__NVIC_EnableIRQ+0x38>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	095b      	lsrs	r3, r3, #5
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	@ (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	@ (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	@ 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	@ 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ff4c 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000846:	f7ff ff63 	bl	8000710 <__NVIC_GetPriorityGrouping>
 800084a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	6978      	ldr	r0, [r7, #20]
 8000852:	f7ff ffb3 	bl	80007bc <NVIC_EncodePriority>
 8000856:	4602      	mov	r2, r0
 8000858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff82 	bl	8000768 <__NVIC_SetPriority>
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff56 	bl	800072c <__NVIC_EnableIRQ>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000896:	e15a      	b.n	8000b4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	2101      	movs	r1, #1
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 814c 	beq.w	8000b48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d005      	beq.n	80008c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d130      	bne.n	800092a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68da      	ldr	r2, [r3, #12]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008fe:	2201      	movs	r2, #1
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	091b      	lsrs	r3, r3, #4
 8000914:	f003 0201 	and.w	r2, r3, #1
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	2b03      	cmp	r3, #3
 8000934:	d017      	beq.n	8000966 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2203      	movs	r2, #3
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	2b02      	cmp	r3, #2
 8000970:	d123      	bne.n	80009ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	08da      	lsrs	r2, r3, #3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3208      	adds	r2, #8
 800097a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	220f      	movs	r2, #15
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	691a      	ldr	r2, [r3, #16]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	08da      	lsrs	r2, r3, #3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3208      	adds	r2, #8
 80009b4:	6939      	ldr	r1, [r7, #16]
 80009b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 0203 	and.w	r2, r3, #3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 80a6 	beq.w	8000b48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fc:	4b5b      	ldr	r3, [pc, #364]	@ (8000b6c <HAL_GPIO_Init+0x2e4>)
 80009fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a00:	4a5a      	ldr	r2, [pc, #360]	@ (8000b6c <HAL_GPIO_Init+0x2e4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a08:	4b58      	ldr	r3, [pc, #352]	@ (8000b6c <HAL_GPIO_Init+0x2e4>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a14:	4a56      	ldr	r2, [pc, #344]	@ (8000b70 <HAL_GPIO_Init+0x2e8>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a3e:	d01f      	beq.n	8000a80 <HAL_GPIO_Init+0x1f8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4c      	ldr	r2, [pc, #304]	@ (8000b74 <HAL_GPIO_Init+0x2ec>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d019      	beq.n	8000a7c <HAL_GPIO_Init+0x1f4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d013      	beq.n	8000a78 <HAL_GPIO_Init+0x1f0>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a4a      	ldr	r2, [pc, #296]	@ (8000b7c <HAL_GPIO_Init+0x2f4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1ec>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a49      	ldr	r2, [pc, #292]	@ (8000b80 <HAL_GPIO_Init+0x2f8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1e8>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a48      	ldr	r2, [pc, #288]	@ (8000b84 <HAL_GPIO_Init+0x2fc>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1e4>
 8000a68:	2305      	movs	r3, #5
 8000a6a:	e00a      	b.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	e008      	b.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a70:	2304      	movs	r3, #4
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a74:	2303      	movs	r3, #3
 8000a76:	e004      	b.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	e002      	b.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a80:	2300      	movs	r3, #0
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	f002 0203 	and.w	r2, r2, #3
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a92:	4937      	ldr	r1, [pc, #220]	@ (8000b70 <HAL_GPIO_Init+0x2e8>)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aa0:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac4:	4a30      	ldr	r2, [pc, #192]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000aca:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aee:	4a26      	ldr	r2, [pc, #152]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b42:	4a11      	ldr	r2, [pc, #68]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f47f ae9d 	bne.w	8000898 <HAL_GPIO_Init+0x10>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	48001000 	.word	0x48001000
 8000b84:	48001400 	.word	0x48001400
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9c:	787b      	ldrb	r3, [r7, #1]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba8:	e002      	b.n	8000bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	041a      	lsls	r2, r3, #16
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43d9      	mvns	r1, r3
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	400b      	ands	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d141      	bne.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0a:	d131      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c0c:	4b47      	ldr	r3, [pc, #284]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c12:	4a46      	ldr	r2, [pc, #280]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1c:	4b43      	ldr	r3, [pc, #268]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c24:	4a41      	ldr	r2, [pc, #260]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c2c:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2232      	movs	r2, #50	@ 0x32
 8000c32:	fb02 f303 	mul.w	r3, r2, r3
 8000c36:	4a3f      	ldr	r2, [pc, #252]	@ (8000d34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	0c9b      	lsrs	r3, r3, #18
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c42:	e002      	b.n	8000c4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c56:	d102      	bne.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f2      	bne.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c5e:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c6a:	d158      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e057      	b.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c76:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c80:	e04d      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c88:	d141      	bne.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c96:	d131      	bne.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c9e:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2232      	movs	r2, #50	@ 0x32
 8000cbe:	fb02 f303 	mul.w	r3, r2, r3
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	0c9b      	lsrs	r3, r3, #18
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cce:	e002      	b.n	8000cd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ce2:	d102      	bne.n	8000cea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f2      	bne.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf6:	d112      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e011      	b.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d0c:	e007      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	20000000 	.word	0x20000000
 8000d34:	431bde83 	.word	0x431bde83

08000d38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d46:	6093      	str	r3, [r2, #8]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40007000 	.word	0x40007000

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e2fe      	b.n	8001368 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d075      	beq.n	8000e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d76:	4b97      	ldr	r3, [pc, #604]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d80:	4b94      	ldr	r3, [pc, #592]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b0c      	cmp	r3, #12
 8000d8e:	d102      	bne.n	8000d96 <HAL_RCC_OscConfig+0x3e>
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d002      	beq.n	8000d9c <HAL_RCC_OscConfig+0x44>
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d10b      	bne.n	8000db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	4b8d      	ldr	r3, [pc, #564]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d05b      	beq.n	8000e60 <HAL_RCC_OscConfig+0x108>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d157      	bne.n	8000e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e2d9      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dbc:	d106      	bne.n	8000dcc <HAL_RCC_OscConfig+0x74>
 8000dbe:	4b85      	ldr	r3, [pc, #532]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a84      	ldr	r2, [pc, #528]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e01d      	b.n	8000e08 <HAL_RCC_OscConfig+0xb0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x98>
 8000dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7e      	ldr	r2, [pc, #504]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b7c      	ldr	r3, [pc, #496]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a7b      	ldr	r2, [pc, #492]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e00b      	b.n	8000e08 <HAL_RCC_OscConfig+0xb0>
 8000df0:	4b78      	ldr	r3, [pc, #480]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a77      	ldr	r2, [pc, #476]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b75      	ldr	r3, [pc, #468]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a74      	ldr	r2, [pc, #464]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e10:	f7ff fc4e 	bl	80006b0 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fc4a 	bl	80006b0 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	@ 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e29e      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0xc0>
 8000e36:	e014      	b.n	8000e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e38:	f7ff fc3a 	bl	80006b0 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc36 	bl	80006b0 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	@ 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e28a      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e52:	4b60      	ldr	r3, [pc, #384]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0xe8>
 8000e5e:	e000      	b.n	8000e62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d075      	beq.n	8000f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6e:	4b59      	ldr	r3, [pc, #356]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e78:	4b56      	ldr	r3, [pc, #344]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b0c      	cmp	r3, #12
 8000e86:	d102      	bne.n	8000e8e <HAL_RCC_OscConfig+0x136>
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d002      	beq.n	8000e94 <HAL_RCC_OscConfig+0x13c>
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d11f      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e94:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <HAL_RCC_OscConfig+0x154>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e25d      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	4b49      	ldr	r3, [pc, #292]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	061b      	lsls	r3, r3, #24
 8000eba:	4946      	ldr	r1, [pc, #280]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ec0:	4b45      	ldr	r3, [pc, #276]	@ (8000fd8 <HAL_RCC_OscConfig+0x280>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fafb 	bl	80004c0 <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d043      	beq.n	8000f58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e249      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d023      	beq.n	8000f24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000edc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fbe2 	bl	80006b0 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fbde 	bl	80006b0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e232      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	492d      	ldr	r1, [pc, #180]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e01a      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fbbe 	bl	80006b0 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fbba 	bl	80006b0 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e20e      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1e0>
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d041      	beq.n	8000fea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f74:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fb97 	bl	80006b0 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb93 	bl	80006b0 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e1e7      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0ef      	beq.n	8000f86 <HAL_RCC_OscConfig+0x22e>
 8000fa6:	e020      	b.n	8000fea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <HAL_RCC_OscConfig+0x27c>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fb7a 	bl	80006b0 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fbe:	e00d      	b.n	8000fdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fb76 	bl	80006b0 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d906      	bls.n	8000fdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e1ca      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fdc:	4b8c      	ldr	r3, [pc, #560]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8000fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1ea      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80a6 	beq.w	8001144 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ffc:	4b84      	ldr	r3, [pc, #528]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_RCC_OscConfig+0x2b4>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x2b6>
 800100c:	2300      	movs	r3, #0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00d      	beq.n	800102e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b7f      	ldr	r3, [pc, #508]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	4a7e      	ldr	r2, [pc, #504]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	@ 0x58
 800101e:	4b7c      	ldr	r3, [pc, #496]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800102a:	2301      	movs	r3, #1
 800102c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102e:	4b79      	ldr	r3, [pc, #484]	@ (8001214 <HAL_RCC_OscConfig+0x4bc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001036:	2b00      	cmp	r3, #0
 8001038:	d118      	bne.n	800106c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800103a:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <HAL_RCC_OscConfig+0x4bc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a75      	ldr	r2, [pc, #468]	@ (8001214 <HAL_RCC_OscConfig+0x4bc>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001046:	f7ff fb33 	bl	80006b0 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104e:	f7ff fb2f 	bl	80006b0 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e183      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001060:	4b6c      	ldr	r3, [pc, #432]	@ (8001214 <HAL_RCC_OscConfig+0x4bc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_RCC_OscConfig+0x32e>
 8001074:	4b66      	ldr	r3, [pc, #408]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800107a:	4a65      	ldr	r2, [pc, #404]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001084:	e024      	b.n	80010d0 <HAL_RCC_OscConfig+0x378>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d110      	bne.n	80010b0 <HAL_RCC_OscConfig+0x358>
 800108e:	4b60      	ldr	r3, [pc, #384]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001094:	4a5e      	ldr	r2, [pc, #376]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800109e:	4b5c      	ldr	r3, [pc, #368]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010ae:	e00f      	b.n	80010d0 <HAL_RCC_OscConfig+0x378>
 80010b0:	4b57      	ldr	r3, [pc, #348]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010b6:	4a56      	ldr	r2, [pc, #344]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010c0:	4b53      	ldr	r3, [pc, #332]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010c6:	4a52      	ldr	r2, [pc, #328]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d016      	beq.n	8001106 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff faea 	bl	80006b0 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010de:	e00a      	b.n	80010f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f7ff fae6 	bl	80006b0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e138      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010f6:	4b46      	ldr	r3, [pc, #280]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80010f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0ed      	beq.n	80010e0 <HAL_RCC_OscConfig+0x388>
 8001104:	e015      	b.n	8001132 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001106:	f7ff fad3 	bl	80006b0 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff facf 	bl	80006b0 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e121      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001124:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ed      	bne.n	800110e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001138:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113c:	4a34      	ldr	r2, [pc, #208]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 800113e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001142:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	2b00      	cmp	r3, #0
 800114e:	d03c      	beq.n	80011ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01c      	beq.n	8001192 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001158:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 800115a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800115e:	4a2c      	ldr	r2, [pc, #176]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff faa2 	bl	80006b0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001170:	f7ff fa9e 	bl	80006b0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e0f2      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001182:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ef      	beq.n	8001170 <HAL_RCC_OscConfig+0x418>
 8001190:	e01b      	b.n	80011ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 8001194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001198:	4a1d      	ldr	r2, [pc, #116]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a2:	f7ff fa85 	bl	80006b0 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011aa:	f7ff fa81 	bl	80006b0 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e0d5      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80011be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1ef      	bne.n	80011aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80c9 	beq.w	8001366 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	f000 8083 	beq.w	80012e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d15e      	bne.n	80012a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_RCC_OscConfig+0x4b8>)
 80011f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fa5b 	bl	80006b0 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011fc:	e00c      	b.n	8001218 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7ff fa57 	bl	80006b0 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d905      	bls.n	8001218 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0ab      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
 8001210:	40021000 	.word	0x40021000
 8001214:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001218:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1ec      	bne.n	80011fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001224:	4b52      	ldr	r3, [pc, #328]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	4b52      	ldr	r3, [pc, #328]	@ (8001374 <HAL_RCC_OscConfig+0x61c>)
 800122a:	4013      	ands	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6a11      	ldr	r1, [r2, #32]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001234:	3a01      	subs	r2, #1
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	4311      	orrs	r1, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800123e:	0212      	lsls	r2, r2, #8
 8001240:	4311      	orrs	r1, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001246:	0852      	lsrs	r2, r2, #1
 8001248:	3a01      	subs	r2, #1
 800124a:	0552      	lsls	r2, r2, #21
 800124c:	4311      	orrs	r1, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001252:	0852      	lsrs	r2, r2, #1
 8001254:	3a01      	subs	r2, #1
 8001256:	0652      	lsls	r2, r2, #25
 8001258:	4311      	orrs	r1, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800125e:	06d2      	lsls	r2, r2, #27
 8001260:	430a      	orrs	r2, r1
 8001262:	4943      	ldr	r1, [pc, #268]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 8001264:	4313      	orrs	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001268:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a40      	ldr	r2, [pc, #256]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 800126e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001272:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001274:	4b3e      	ldr	r3, [pc, #248]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4a3d      	ldr	r2, [pc, #244]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 800127a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800127e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fa16 	bl	80006b0 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fa12 	bl	80006b0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e066      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x530>
 80012a6:	e05e      	b.n	8001366 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a30      	ldr	r2, [pc, #192]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 80012ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff f9fc 	bl	80006b0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012bc:	f7ff f9f8 	bl	80006b0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e04c      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ce:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4924      	ldr	r1, [pc, #144]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <HAL_RCC_OscConfig+0x620>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	60cb      	str	r3, [r1, #12]
 80012e6:	e03e      	b.n	8001366 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e039      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_RCC_OscConfig+0x618>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	429a      	cmp	r2, r3
 8001306:	d12c      	bne.n	8001362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	3b01      	subs	r3, #1
 8001314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d123      	bne.n	8001362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001326:	429a      	cmp	r2, r3
 8001328:	d11b      	bne.n	8001362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d113      	bne.n	8001362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	3b01      	subs	r3, #1
 8001348:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	d109      	bne.n	8001362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	019f800c 	.word	0x019f800c
 8001378:	feeefffc 	.word	0xfeeefffc

0800137c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e11e      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b91      	ldr	r3, [pc, #580]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d910      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b8e      	ldr	r3, [pc, #568]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 020f 	bic.w	r2, r3, #15
 80013aa:	498c      	ldr	r1, [pc, #560]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b8a      	ldr	r3, [pc, #552]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e106      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d073      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d129      	bne.n	800142c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d8:	4b81      	ldr	r3, [pc, #516]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0f4      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80013e8:	f000 f9ba 	bl	8001760 <RCC_GetSysClockFreqFromPLLSource>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4a7c      	ldr	r2, [pc, #496]	@ (80015e4 <HAL_RCC_ClockConfig+0x268>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d93f      	bls.n	8001476 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013f6:	4b7a      	ldr	r3, [pc, #488]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800140a:	2b00      	cmp	r3, #0
 800140c:	d033      	beq.n	8001476 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d12f      	bne.n	8001476 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001416:	4b72      	ldr	r3, [pc, #456]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800141e:	4a70      	ldr	r2, [pc, #448]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001424:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001426:	2380      	movs	r3, #128	@ 0x80
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e024      	b.n	8001476 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d107      	bne.n	8001444 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001434:	4b6a      	ldr	r3, [pc, #424]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0c6      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0be      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001454:	f000 f8ce 	bl	80015f4 <HAL_RCC_GetSysClockFreq>
 8001458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4a61      	ldr	r2, [pc, #388]	@ (80015e4 <HAL_RCC_ClockConfig+0x268>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d909      	bls.n	8001476 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800146a:	4a5d      	ldr	r2, [pc, #372]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001470:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f023 0203 	bic.w	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4957      	ldr	r1, [pc, #348]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001488:	f7ff f912 	bl	80006b0 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001490:	f7ff f90e 	bl	80006b0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e095      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	4b4e      	ldr	r3, [pc, #312]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 020c 	and.w	r2, r3, #12
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d1eb      	bne.n	8001490 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d023      	beq.n	800150c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b43      	ldr	r3, [pc, #268]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a42      	ldr	r2, [pc, #264]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80014d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80014f0:	4a3b      	ldr	r2, [pc, #236]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80014f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4936      	ldr	r1, [pc, #216]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
 800150a:	e008      	b.n	800151e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b80      	cmp	r3, #128	@ 0x80
 8001510:	d105      	bne.n	800151e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001518:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800151c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d21d      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152c:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 020f 	bic.w	r2, r3, #15
 8001534:	4929      	ldr	r1, [pc, #164]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800153c:	f7ff f8b8 	bl	80006b0 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff f8b4 	bl	80006b0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e03b      	b.n	80015d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_RCC_ClockConfig+0x260>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d1ed      	bne.n	8001544 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4917      	ldr	r1, [pc, #92]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490f      	ldr	r1, [pc, #60]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a6:	f000 f825 	bl	80015f4 <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_RCC_ClockConfig+0x264>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <HAL_RCC_ClockConfig+0x26c>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_RCC_ClockConfig+0x270>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_RCC_ClockConfig+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff78 	bl	80004c0 <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	04c4b400 	.word	0x04c4b400
 80015e8:	08004c70 	.word	0x08004c70
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015fa:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d102      	bne.n	800160c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	e047      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800160c:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d102      	bne.n	800161e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	e03e      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800161e:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d136      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3301      	adds	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001648:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	4a16      	ldr	r2, [pc, #88]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001652:	68d2      	ldr	r2, [r2, #12]
 8001654:	0a12      	lsrs	r2, r2, #8
 8001656:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
      break;
 8001660:	e00c      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001662:	4a13      	ldr	r2, [pc, #76]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4a10      	ldr	r2, [pc, #64]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800166c:	68d2      	ldr	r2, [r2, #12]
 800166e:	0a12      	lsrs	r2, r2, #8
 8001670:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
      break;
 800167a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0e5b      	lsrs	r3, r3, #25
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	3301      	adds	r3, #1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	e001      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800169c:	693b      	ldr	r3, [r7, #16]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	007a1200 	.word	0x007a1200

080016b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016bc:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <HAL_RCC_GetHCLKFreq+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4904      	ldr	r1, [pc, #16]	@ (80016f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	08004c80 	.word	0x08004c80

080016fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	220f      	movs	r2, #15
 800170a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <HAL_RCC_GetClockConfig+0x60>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 020f 	and.w	r2, r3, #15
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40022000 	.word	0x40022000

08001760 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d10c      	bne.n	800179e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001784:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800178e:	68d2      	ldr	r2, [r2, #12]
 8001790:	0a12      	lsrs	r2, r2, #8
 8001792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
    break;
 800179c:	e00c      	b.n	80017b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4a0e      	ldr	r2, [pc, #56]	@ (80017e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	0a12      	lsrs	r2, r2, #8
 80017ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    break;
 80017b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0e5b      	lsrs	r3, r3, #25
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	3301      	adds	r3, #1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017d2:	687b      	ldr	r3, [r7, #4]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	007a1200 	.word	0x007a1200
 80017e8:	00f42400 	.word	0x00f42400

080017ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e049      	b.n	8001892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f841 	bl	800189a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f000 fa22 	bl	8001c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d001      	beq.n	80018c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e04a      	b.n	800195e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a21      	ldr	r2, [pc, #132]	@ (800196c <HAL_TIM_Base_Start_IT+0xbc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d018      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x6c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f2:	d013      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x6c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001970 <HAL_TIM_Base_Start_IT+0xc0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00e      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x6c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1c      	ldr	r2, [pc, #112]	@ (8001974 <HAL_TIM_Base_Start_IT+0xc4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d009      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x6c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1a      	ldr	r2, [pc, #104]	@ (8001978 <HAL_TIM_Base_Start_IT+0xc8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d004      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x6c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a19      	ldr	r2, [pc, #100]	@ (800197c <HAL_TIM_Base_Start_IT+0xcc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d115      	bne.n	8001948 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_TIM_Base_Start_IT+0xd0>)
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b06      	cmp	r3, #6
 800192c:	d015      	beq.n	800195a <HAL_TIM_Base_Start_IT+0xaa>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001934:	d011      	beq.n	800195a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001946:	e008      	b.n	800195a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e000      	b.n	800195c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40000400 	.word	0x40000400
 8001974:	40000800 	.word	0x40000800
 8001978:	40013400 	.word	0x40013400
 800197c:	40014000 	.word	0x40014000
 8001980:	00010007 	.word	0x00010007

08001984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d020      	beq.n	80019e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01b      	beq.n	80019e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0202 	mvn.w	r2, #2
 80019b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f931 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 80019d4:	e005      	b.n	80019e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f923 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f934 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d020      	beq.n	8001a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01b      	beq.n	8001a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0204 	mvn.w	r2, #4
 8001a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f90b 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001a20:	e005      	b.n	8001a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8fd 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f90e 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d020      	beq.n	8001a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01b      	beq.n	8001a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0208 	mvn.w	r2, #8
 8001a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2204      	movs	r2, #4
 8001a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8e5 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001a6c:	e005      	b.n	8001a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8d7 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f8e8 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0210 	mvn.w	r2, #16
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8bf 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8b1 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8c2 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0201 	mvn.w	r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe fca6 	bl	800043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00c      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f951 	bl	8001dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00c      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f949 	bl	8001dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00c      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f87c 	bl	8001c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00c      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0220 	mvn.w	r2, #32
 8001b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f911 	bl	8001dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00c      	beq.n	8001bae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8001ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f91d 	bl	8001de8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8001bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f915 	bl	8001dfc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8001bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f90d 	bl	8001e10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8001c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f905 	bl	8001e24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a42      	ldr	r2, [pc, #264]	@ (8001d90 <TIM_Base_SetConfig+0x11c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00f      	beq.n	8001cac <TIM_Base_SetConfig+0x38>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c92:	d00b      	beq.n	8001cac <TIM_Base_SetConfig+0x38>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3f      	ldr	r2, [pc, #252]	@ (8001d94 <TIM_Base_SetConfig+0x120>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <TIM_Base_SetConfig+0x38>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d98 <TIM_Base_SetConfig+0x124>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <TIM_Base_SetConfig+0x38>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8001d9c <TIM_Base_SetConfig+0x128>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d108      	bne.n	8001cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a33      	ldr	r2, [pc, #204]	@ (8001d90 <TIM_Base_SetConfig+0x11c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01b      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ccc:	d017      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a30      	ldr	r2, [pc, #192]	@ (8001d94 <TIM_Base_SetConfig+0x120>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <TIM_Base_SetConfig+0x124>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00f      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d9c <TIM_Base_SetConfig+0x128>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00b      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8001da0 <TIM_Base_SetConfig+0x12c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8001da4 <TIM_Base_SetConfig+0x130>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <TIM_Base_SetConfig+0x8a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001da8 <TIM_Base_SetConfig+0x134>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d108      	bne.n	8001d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <TIM_Base_SetConfig+0x11c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00f      	beq.n	8001d5c <TIM_Base_SetConfig+0xe8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <TIM_Base_SetConfig+0x128>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00b      	beq.n	8001d5c <TIM_Base_SetConfig+0xe8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <TIM_Base_SetConfig+0x12c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <TIM_Base_SetConfig+0xe8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <TIM_Base_SetConfig+0x130>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0xe8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <TIM_Base_SetConfig+0x134>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d103      	bne.n	8001d64 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f023 0201 	bic.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
  }
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40013400 	.word	0x40013400
 8001da0:	40014000 	.word	0x40014000
 8001da4:	40014400 	.word	0x40014400
 8001da8:	40014800 	.word	0x40014800

08001dac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <__NVIC_SetPriority>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Handler+0x1c>)
 8001e92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e94:	f001 fd46 	bl	8003924 <xTaskGetSchedulerState>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e9e:	f002 fb3b 	bl	8004518 <xPortSysTickHandler>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f06f 0004 	mvn.w	r0, #4
 8001eb6:	f7ff ffbf 	bl	8001e38 <__NVIC_SetPriority>
#endif
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ec6:	f3ef 8305 	mrs	r3, IPSR
 8001eca:	603b      	str	r3, [r7, #0]
  return(result);
 8001ecc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ed2:	f06f 0305 	mvn.w	r3, #5
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	e00c      	b.n	8001ef4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <osKernelInitialize+0x44>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <osKernelInitialize+0x44>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	e002      	b.n	8001ef4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200000d4 	.word	0x200000d4

08001f08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f0e:	f3ef 8305 	mrs	r3, IPSR
 8001f12:	603b      	str	r3, [r7, #0]
  return(result);
 8001f14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f1a:	f06f 0305 	mvn.w	r3, #5
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	e010      	b.n	8001f44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <osKernelStart+0x48>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d109      	bne.n	8001f3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f2a:	f7ff ffbf 	bl	8001eac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <osKernelStart+0x48>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f34:	f001 f892 	bl	800305c <vTaskStartScheduler>
      stat = osOK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	e002      	b.n	8001f44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000d4 	.word	0x200000d4

08001f54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	@ 0x38
 8001f58:	af04      	add	r7, sp, #16
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f64:	f3ef 8305 	mrs	r3, IPSR
 8001f68:	617b      	str	r3, [r7, #20]
  return(result);
 8001f6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d17e      	bne.n	800206e <osThreadNew+0x11a>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d07b      	beq.n	800206e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f7a:	2318      	movs	r3, #24
 8001f7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d045      	beq.n	800201a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <osThreadNew+0x48>
        name = attr->name;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <osThreadNew+0x6e>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b38      	cmp	r3, #56	@ 0x38
 8001fb4:	d805      	bhi.n	8001fc2 <osThreadNew+0x6e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <osThreadNew+0x72>
        return (NULL);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e054      	b.n	8002070 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00e      	beq.n	8001ffc <osThreadNew+0xa8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2ba7      	cmp	r3, #167	@ 0xa7
 8001fe4:	d90a      	bls.n	8001ffc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <osThreadNew+0xa8>
        mem = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	e010      	b.n	800201e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10c      	bne.n	800201e <osThreadNew+0xca>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <osThreadNew+0xca>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <osThreadNew+0xca>
          mem = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	e001      	b.n	800201e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d110      	bne.n	8002046 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800202c:	9202      	str	r2, [sp, #8]
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	6a3a      	ldr	r2, [r7, #32]
 8002038:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fe1a 	bl	8002c74 <xTaskCreateStatic>
 8002040:	4603      	mov	r3, r0
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e013      	b.n	800206e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d110      	bne.n	800206e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	b29a      	uxth	r2, r3
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fe68 	bl	8002d34 <xTaskCreate>
 8002064:	4603      	mov	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <osThreadNew+0x11a>
            hTask = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800206e:	693b      	ldr	r3, [r7, #16]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002080:	f3ef 8305 	mrs	r3, IPSR
 8002084:	60bb      	str	r3, [r7, #8]
  return(result);
 8002086:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <osDelay+0x1c>
    stat = osErrorISR;
 800208c:	f06f 0305 	mvn.w	r3, #5
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e007      	b.n	80020a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 ffa6 	bl	8002ff0 <vTaskDelay>
    }
  }

  return (stat);
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <vApplicationGetIdleTaskMemory+0x2c>)
 80020c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <vApplicationGetIdleTaskMemory+0x30>)
 80020c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200000d8 	.word	0x200000d8
 80020e0:	20000180 	.word	0x20000180

080020e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <vApplicationGetTimerTaskMemory+0x2c>)
 80020f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4a06      	ldr	r2, [pc, #24]	@ (8002114 <vApplicationGetTimerTaskMemory+0x30>)
 80020fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000380 	.word	0x20000380
 8002114:	20000428 	.word	0x20000428

08002118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0208 	add.w	r2, r3, #8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0208 	add.w	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021d0:	d103      	bne.n	80021da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e00c      	b.n	80021f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3308      	adds	r3, #8
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e002      	b.n	80021e8 <vListInsert+0x2e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d2f6      	bcs.n	80021e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d103      	bne.n	8002260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022ac:	f002 f8a4 	bl	80043f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	3b01      	subs	r3, #1
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	441a      	add	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	22ff      	movs	r2, #255	@ 0xff
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	22ff      	movs	r2, #255	@ 0xff
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d114      	bne.n	800232c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3310      	adds	r3, #16
 800230e:	4618      	mov	r0, r3
 8002310:	f001 f942 	bl	8003598 <xTaskRemoveFromEventList>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800231a:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <xQueueGenericReset+0xd0>)
 800231c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	e009      	b.n	8002340 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3310      	adds	r3, #16
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fef1 	bl	8002118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3324      	adds	r3, #36	@ 0x24
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff feec 	bl	8002118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002340:	f002 f88c 	bl	800445c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000ed04 	.word	0xe000ed04

08002354 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	@ 0x38
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	e7fd      	b.n	800239a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <xQueueGenericCreateStatic+0x56>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <xQueueGenericCreateStatic+0x5a>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <xQueueGenericCreateStatic+0x5c>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	623b      	str	r3, [r7, #32]
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <xQueueGenericCreateStatic+0x84>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <xQueueGenericCreateStatic+0x88>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <xQueueGenericCreateStatic+0x8a>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80023e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	61fb      	str	r3, [r7, #28]
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	e7fd      	b.n	80023f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023fa:	2350      	movs	r3, #80	@ 0x50
 80023fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b50      	cmp	r3, #80	@ 0x50
 8002402:	d00b      	beq.n	800241c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	61bb      	str	r3, [r7, #24]
}
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800241c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002430:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f805 	bl	800244e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002446:	4618      	mov	r0, r3
 8002448:	3730      	adds	r7, #48	@ 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e002      	b.n	8002470 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800247c:	2101      	movs	r1, #1
 800247e:	69b8      	ldr	r0, [r7, #24]
 8002480:	f7ff fefe 	bl	8002280 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	@ 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024a2:	2300      	movs	r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <xQueueGenericSend+0x34>
	__asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <xQueueGenericSend+0x42>
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <xQueueGenericSend+0x46>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueGenericSend+0x48>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <xQueueGenericSend+0x64>
	__asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d103      	bne.n	8002506 <xQueueGenericSend+0x72>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <xQueueGenericSend+0x76>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueGenericSend+0x78>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <xQueueGenericSend+0x94>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	623b      	str	r3, [r7, #32]
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002528:	f001 f9fc 	bl	8003924 <xTaskGetSchedulerState>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <xQueueGenericSend+0xa4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <xQueueGenericSend+0xa8>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <xQueueGenericSend+0xaa>
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10b      	bne.n	800255a <xQueueGenericSend+0xc6>
	__asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	61fb      	str	r3, [r7, #28]
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	e7fd      	b.n	8002556 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800255a:	f001 ff4d 	bl	80043f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800255e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <xQueueGenericSend+0xdc>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d129      	bne.n	80025c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002576:	f000 fa0f 	bl	8002998 <prvCopyDataToQueue>
 800257a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	3324      	adds	r3, #36	@ 0x24
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f805 	bl	8003598 <xTaskRemoveFromEventList>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002594:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <xQueueGenericSend+0x200>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	e00a      	b.n	80025bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <xQueueGenericSend+0x200>)
 80025ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025bc:	f001 ff4e 	bl	800445c <vPortExitCritical>
				return pdPASS;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e063      	b.n	800268c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025ca:	f001 ff47 	bl	800445c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e05c      	b.n	800268c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f83f 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025e2:	2301      	movs	r3, #1
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025e6:	f001 ff39 	bl	800445c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025ea:	f000 fda7 	bl	800313c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025ee:	f001 ff03 	bl	80043f8 <vPortEnterCritical>
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025fe:	d103      	bne.n	8002608 <xQueueGenericSend+0x174>
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800260e:	b25b      	sxtb	r3, r3
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002614:	d103      	bne.n	800261e <xQueueGenericSend+0x18a>
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800261e:	f001 ff1d 	bl	800445c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002622:	1d3a      	adds	r2, r7, #4
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f001 f82e 	bl	800368c <xTaskCheckForTimeOut>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d124      	bne.n	8002680 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002638:	f000 faa6 	bl	8002b88 <prvIsQueueFull>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d018      	beq.n	8002674 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	3310      	adds	r3, #16
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 ff52 	bl	80034f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002652:	f000 fa31 	bl	8002ab8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002656:	f000 fd7f 	bl	8003158 <xTaskResumeAll>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f af7c 	bne.w	800255a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <xQueueGenericSend+0x200>)
 8002664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	e772      	b.n	800255a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002676:	f000 fa1f 	bl	8002ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800267a:	f000 fd6d 	bl	8003158 <xTaskResumeAll>
 800267e:	e76c      	b.n	800255a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002682:	f000 fa19 	bl	8002ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002686:	f000 fd67 	bl	8003158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800268a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800268c:	4618      	mov	r0, r3
 800268e:	3738      	adds	r7, #56	@ 0x38
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	e000ed04 	.word	0xe000ed04

08002698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b090      	sub	sp, #64	@ 0x40
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80026aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <xQueueGenericSendFromISR+0x3e>
 80026ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueGenericSendFromISR+0x42>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueGenericSendFromISR+0x44>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d103      	bne.n	8002706 <xQueueGenericSendFromISR+0x6e>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <xQueueGenericSendFromISR+0x72>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <xQueueGenericSendFromISR+0x74>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	623b      	str	r3, [r7, #32]
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002728:	f001 ff46 	bl	80045b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800272c:	f3ef 8211 	mrs	r2, BASEPRI
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	61fa      	str	r2, [r7, #28]
 8002742:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002744:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002746:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <xQueueGenericSendFromISR+0xc2>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d12f      	bne.n	80027ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002760:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002770:	f000 f912 	bl	8002998 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002774:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800277c:	d112      	bne.n	80027a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	3324      	adds	r3, #36	@ 0x24
 800278a:	4618      	mov	r0, r3
 800278c:	f000 ff04 	bl	8003598 <xTaskRemoveFromEventList>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027a8:	3301      	adds	r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	b25a      	sxtb	r2, r3
 80027ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80027b4:	2301      	movs	r3, #1
 80027b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80027b8:	e001      	b.n	80027be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3740      	adds	r7, #64	@ 0x40
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10b      	bne.n	8002806 <xQueueReceive+0x32>
	__asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	623b      	str	r3, [r7, #32]
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	e7fd      	b.n	8002802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <xQueueReceive+0x40>
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <xQueueReceive+0x44>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <xQueueReceive+0x46>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <xQueueReceive+0x62>
	__asm volatile
 800281e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	61fb      	str	r3, [r7, #28]
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	e7fd      	b.n	8002832 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002836:	f001 f875 	bl	8003924 <xTaskGetSchedulerState>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xQueueReceive+0x72>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xQueueReceive+0x76>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <xQueueReceive+0x78>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <xQueueReceive+0x94>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61bb      	str	r3, [r7, #24]
}
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002868:	f001 fdc6 	bl	80043f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01f      	beq.n	80028b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800287c:	f000 f8f6 	bl	8002a6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00f      	beq.n	80028b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002892:	3310      	adds	r3, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fe7f 	bl	8003598 <xTaskRemoveFromEventList>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <xQueueReceive+0x1c0>)
 80028a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028b0:	f001 fdd4 	bl	800445c <vPortExitCritical>
				return pdPASS;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e069      	b.n	800298c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028be:	f001 fdcd 	bl	800445c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e062      	b.n	800298c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fec5 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028da:	f001 fdbf 	bl	800445c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028de:	f000 fc2d 	bl	800313c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e2:	f001 fd89 	bl	80043f8 <vPortEnterCritical>
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f2:	d103      	bne.n	80028fc <xQueueReceive+0x128>
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002908:	d103      	bne.n	8002912 <xQueueReceive+0x13e>
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002912:	f001 fda3 	bl	800445c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002916:	1d3a      	adds	r2, r7, #4
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 feb4 	bl	800368c <xTaskCheckForTimeOut>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d123      	bne.n	8002972 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800292a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800292c:	f000 f916 	bl	8002b5c <prvIsQueueEmpty>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d017      	beq.n	8002966 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	3324      	adds	r3, #36	@ 0x24
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fdd8 	bl	80034f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002946:	f000 f8b7 	bl	8002ab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800294a:	f000 fc05 	bl	8003158 <xTaskResumeAll>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d189      	bne.n	8002868 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <xQueueReceive+0x1c0>)
 8002956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	e780      	b.n	8002868 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002968:	f000 f8a6 	bl	8002ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800296c:	f000 fbf4 	bl	8003158 <xTaskResumeAll>
 8002970:	e77a      	b.n	8002868 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002974:	f000 f8a0 	bl	8002ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002978:	f000 fbee 	bl	8003158 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800297e:	f000 f8ed 	bl	8002b5c <prvIsQueueEmpty>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	f43f af6f 	beq.w	8002868 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800298a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800298c:	4618      	mov	r0, r3
 800298e:	3730      	adds	r7, #48	@ 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d14d      	bne.n	8002a5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 ffcc 	bl	8003960 <xTaskPriorityDisinherit>
 80029c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e043      	b.n	8002a5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d119      	bne.n	8002a0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6858      	ldr	r0, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	461a      	mov	r2, r3
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	f002 f89c 	bl	8004b20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	441a      	add	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d32b      	bcc.n	8002a5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	e026      	b.n	8002a5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68d8      	ldr	r0, [r3, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	461a      	mov	r2, r3
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	f002 f882 	bl	8004b20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	425b      	negs	r3, r3
 8002a26:	441a      	add	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	425b      	negs	r3, r3
 8002a42:	441a      	add	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d105      	bne.n	8002a5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002a62:	697b      	ldr	r3, [r7, #20]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	441a      	add	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d303      	bcc.n	8002aa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68d9      	ldr	r1, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	f002 f838 	bl	8004b20 <memcpy>
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ac0:	f001 fc9a 	bl	80043f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002acc:	e011      	b.n	8002af2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3324      	adds	r3, #36	@ 0x24
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fd5c 	bl	8003598 <xTaskRemoveFromEventList>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ae6:	f000 fe35 	bl	8003754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	dce9      	bgt.n	8002ace <prvUnlockQueue+0x16>
 8002afa:	e000      	b.n	8002afe <prvUnlockQueue+0x46>
					break;
 8002afc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	22ff      	movs	r2, #255	@ 0xff
 8002b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002b06:	f001 fca9 	bl	800445c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b0a:	f001 fc75 	bl	80043f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b16:	e011      	b.n	8002b3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3310      	adds	r3, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fd37 	bl	8003598 <xTaskRemoveFromEventList>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b30:	f000 fe10 	bl	8003754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b34:	7bbb      	ldrb	r3, [r7, #14]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	dce9      	bgt.n	8002b18 <prvUnlockQueue+0x60>
 8002b44:	e000      	b.n	8002b48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	22ff      	movs	r2, #255	@ 0xff
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002b50:	f001 fc84 	bl	800445c <vPortExitCritical>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b64:	f001 fc48 	bl	80043f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e001      	b.n	8002b7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b7a:	f001 fc6f 	bl	800445c <vPortExitCritical>

	return xReturn;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b90:	f001 fc32 	bl	80043f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d102      	bne.n	8002ba6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e001      	b.n	8002baa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002baa:	f001 fc57 	bl	800445c <vPortExitCritical>

	return xReturn;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e014      	b.n	8002bf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c08 <vQueueAddToRegistry+0x50>)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bd4:	490c      	ldr	r1, [pc, #48]	@ (8002c08 <vQueueAddToRegistry+0x50>)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <vQueueAddToRegistry+0x50>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bea:	e006      	b.n	8002bfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b07      	cmp	r3, #7
 8002bf6:	d9e7      	bls.n	8002bc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000828 	.word	0x20000828

08002c0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c1c:	f001 fbec 	bl	80043f8 <vPortEnterCritical>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c2c:	d103      	bne.n	8002c36 <vQueueWaitForMessageRestricted+0x2a>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c42:	d103      	bne.n	8002c4c <vQueueWaitForMessageRestricted+0x40>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c4c:	f001 fc06 	bl	800445c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3324      	adds	r3, #36	@ 0x24
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fc6d 	bl	8003540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff26 	bl	8002ab8 <prvUnlockQueue>
	}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	@ 0x38
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	623b      	str	r3, [r7, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10b      	bne.n	8002cbe <xTaskCreateStatic+0x4a>
	__asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	61fb      	str	r3, [r7, #28]
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	e7fd      	b.n	8002cba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cbe:	23a8      	movs	r3, #168	@ 0xa8
 8002cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2ba8      	cmp	r3, #168	@ 0xa8
 8002cc6:	d00b      	beq.n	8002ce0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	61bb      	str	r3, [r7, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ce0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01e      	beq.n	8002d26 <xTaskCreateStatic+0xb2>
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01b      	beq.n	8002d26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d00:	2300      	movs	r3, #0
 8002d02:	9303      	str	r3, [sp, #12]
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	9302      	str	r3, [sp, #8]
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f851 	bl	8002dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d20:	f000 f8f6 	bl	8002f10 <prvAddNewTaskToReadyList>
 8002d24:	e001      	b.n	8002d2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d2a:	697b      	ldr	r3, [r7, #20]
	}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3728      	adds	r7, #40	@ 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	@ 0x30
 8002d38:	af04      	add	r7, sp, #16
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fc77 	bl	800463c <pvPortMalloc>
 8002d4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00e      	beq.n	8002d74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d56:	20a8      	movs	r0, #168	@ 0xa8
 8002d58:	f001 fc70 	bl	800463c <pvPortMalloc>
 8002d5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d6a:	e005      	b.n	8002d78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d6c:	6978      	ldr	r0, [r7, #20]
 8002d6e:	f001 fd33 	bl	80047d8 <vPortFree>
 8002d72:	e001      	b.n	8002d78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d017      	beq.n	8002dae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9303      	str	r3, [sp, #12]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	9302      	str	r3, [sp, #8]
 8002d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f80f 	bl	8002dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002da2:	69f8      	ldr	r0, [r7, #28]
 8002da4:	f000 f8b4 	bl	8002f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002da8:	2301      	movs	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e002      	b.n	8002db4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002db2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002db4:	69bb      	ldr	r3, [r7, #24]
	}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	21a5      	movs	r1, #165	@ 0xa5
 8002dda:	f001 fe1d 	bl	8004a18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002de8:	3b01      	subs	r3, #1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f023 0307 	bic.w	r3, r3, #7
 8002df6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	617b      	str	r3, [r7, #20]
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	e7fd      	b.n	8002e16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01f      	beq.n	8002e60 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	e012      	b.n	8002e4c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	7819      	ldrb	r1, [r3, #0]
 8002e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	3334      	adds	r3, #52	@ 0x34
 8002e36:	460a      	mov	r2, r1
 8002e38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d9e9      	bls.n	8002e26 <prvInitialiseNewTask+0x66>
 8002e52:	e000      	b.n	8002e56 <prvInitialiseNewTask+0x96>
			{
				break;
 8002e54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e5e:	e003      	b.n	8002e68 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	2b37      	cmp	r3, #55	@ 0x37
 8002e6c:	d901      	bls.n	8002e72 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e6e:	2337      	movs	r3, #55	@ 0x37
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	2200      	movs	r2, #0
 8002e82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	3304      	adds	r3, #4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f965 	bl	8002158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	3318      	adds	r3, #24
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f960 	bl	8002158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	3354      	adds	r3, #84	@ 0x54
 8002ec2:	224c      	movs	r2, #76	@ 0x4c
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 fda6 	bl	8004a18 <memset>
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ece:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <prvInitialiseNewTask+0x144>)
 8002ed0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f08 <prvInitialiseNewTask+0x148>)
 8002ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	4a0c      	ldr	r2, [pc, #48]	@ (8002f0c <prvInitialiseNewTask+0x14c>)
 8002edc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	69b8      	ldr	r0, [r7, #24]
 8002ee4:	f001 f95a 	bl	800419c <pxPortInitialiseStack>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20001abc 	.word	0x20001abc
 8002f08:	20001b24 	.word	0x20001b24
 8002f0c:	20001b8c 	.word	0x20001b8c

08002f10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f18:	f001 fa6e 	bl	80043f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <prvAddNewTaskToReadyList+0xc4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd4 <prvAddNewTaskToReadyList+0xc4>)
 8002f24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f26:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f34:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <prvAddNewTaskToReadyList+0xc4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d110      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f3c:	f000 fc2e 	bl	800379c <prvInitialiseTaskLists>
 8002f40:	e00d      	b.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f42:	4b26      	ldr	r3, [pc, #152]	@ (8002fdc <prvAddNewTaskToReadyList+0xcc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f4a:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d802      	bhi.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f58:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <prvAddNewTaskToReadyList+0xd0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <prvAddNewTaskToReadyList+0xd0>)
 8002f66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <prvAddNewTaskToReadyList+0xd0>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <prvAddNewTaskToReadyList+0xd4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d903      	bls.n	8002f84 <prvAddNewTaskToReadyList+0x74>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <prvAddNewTaskToReadyList+0xd4>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <prvAddNewTaskToReadyList+0xd8>)
 8002f92:	441a      	add	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7ff f8e9 	bl	8002172 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fa0:	f001 fa5c 	bl	800445c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <prvAddNewTaskToReadyList+0xcc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fac:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d207      	bcs.n	8002fca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <prvAddNewTaskToReadyList+0xdc>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000d3c 	.word	0x20000d3c
 8002fd8:	20000868 	.word	0x20000868
 8002fdc:	20000d48 	.word	0x20000d48
 8002fe0:	20000d58 	.word	0x20000d58
 8002fe4:	20000d44 	.word	0x20000d44
 8002fe8:	2000086c 	.word	0x2000086c
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003002:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <vTaskDelay+0x64>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <vTaskDelay+0x32>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	60bb      	str	r3, [r7, #8]
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	e7fd      	b.n	800301e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003022:	f000 f88b 	bl	800313c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003026:	2100      	movs	r1, #0
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fd09 	bl	8003a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800302e:	f000 f893 	bl	8003158 <xTaskResumeAll>
 8003032:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <vTaskDelay+0x68>)
 800303c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000d64 	.word	0x20000d64
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800306a:	463a      	mov	r2, r7
 800306c:	1d39      	adds	r1, r7, #4
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f81c 	bl	80020b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	9202      	str	r2, [sp, #8]
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	2300      	movs	r3, #0
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	460a      	mov	r2, r1
 800308a:	4924      	ldr	r1, [pc, #144]	@ (800311c <vTaskStartScheduler+0xc0>)
 800308c:	4824      	ldr	r0, [pc, #144]	@ (8003120 <vTaskStartScheduler+0xc4>)
 800308e:	f7ff fdf1 	bl	8002c74 <xTaskCreateStatic>
 8003092:	4603      	mov	r3, r0
 8003094:	4a23      	ldr	r2, [pc, #140]	@ (8003124 <vTaskStartScheduler+0xc8>)
 8003096:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003098:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <vTaskStartScheduler+0xc8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030a0:	2301      	movs	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e001      	b.n	80030aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030b0:	f000 fd1a 	bl	8003ae8 <xTimerCreateTimerTask>
 80030b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d11b      	bne.n	80030f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	613b      	str	r3, [r7, #16]
}
 80030ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030d0:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <vTaskStartScheduler+0xcc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3354      	adds	r3, #84	@ 0x54
 80030d6:	4a15      	ldr	r2, [pc, #84]	@ (800312c <vTaskStartScheduler+0xd0>)
 80030d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030da:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <vTaskStartScheduler+0xd4>)
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030e2:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <vTaskStartScheduler+0xd8>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030e8:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <vTaskStartScheduler+0xdc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030ee:	f001 f8df 	bl	80042b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030f2:	e00f      	b.n	8003114 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030fa:	d10b      	bne.n	8003114 <vTaskStartScheduler+0xb8>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	60fb      	str	r3, [r7, #12]
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <vTaskStartScheduler+0xb4>
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08004c10 	.word	0x08004c10
 8003120:	0800376d 	.word	0x0800376d
 8003124:	20000d60 	.word	0x20000d60
 8003128:	20000868 	.word	0x20000868
 800312c:	20000010 	.word	0x20000010
 8003130:	20000d5c 	.word	0x20000d5c
 8003134:	20000d48 	.word	0x20000d48
 8003138:	20000d40 	.word	0x20000d40

0800313c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003140:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <vTaskSuspendAll+0x18>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a03      	ldr	r2, [pc, #12]	@ (8003154 <vTaskSuspendAll+0x18>)
 8003148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	20000d64 	.word	0x20000d64

08003158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003166:	4b42      	ldr	r3, [pc, #264]	@ (8003270 <xTaskResumeAll+0x118>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <xTaskResumeAll+0x2e>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	603b      	str	r3, [r7, #0]
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003186:	f001 f937 	bl	80043f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800318a:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <xTaskResumeAll+0x118>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	4a37      	ldr	r2, [pc, #220]	@ (8003270 <xTaskResumeAll+0x118>)
 8003192:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <xTaskResumeAll+0x118>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d162      	bne.n	8003262 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800319c:	4b35      	ldr	r3, [pc, #212]	@ (8003274 <xTaskResumeAll+0x11c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05e      	beq.n	8003262 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a4:	e02f      	b.n	8003206 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a6:	4b34      	ldr	r3, [pc, #208]	@ (8003278 <xTaskResumeAll+0x120>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3318      	adds	r3, #24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f83a 	bl	800222c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f835 	bl	800222c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c6:	4b2d      	ldr	r3, [pc, #180]	@ (800327c <xTaskResumeAll+0x124>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d903      	bls.n	80031d6 <xTaskResumeAll+0x7e>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	4a2a      	ldr	r2, [pc, #168]	@ (800327c <xTaskResumeAll+0x124>)
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <xTaskResumeAll+0x128>)
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7fe ffc0 	bl	8002172 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f6:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <xTaskResumeAll+0x12c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003200:	4b21      	ldr	r3, [pc, #132]	@ (8003288 <xTaskResumeAll+0x130>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003206:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <xTaskResumeAll+0x120>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1cb      	bne.n	80031a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003214:	f000 fb66 	bl	80038e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003218:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <xTaskResumeAll+0x134>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003224:	f000 f846 	bl	80032b4 <xTaskIncrementTick>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800322e:	4b16      	ldr	r3, [pc, #88]	@ (8003288 <xTaskResumeAll+0x130>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f1      	bne.n	8003224 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003240:	4b12      	ldr	r3, [pc, #72]	@ (800328c <xTaskResumeAll+0x134>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003246:	4b10      	ldr	r3, [pc, #64]	@ (8003288 <xTaskResumeAll+0x130>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800324e:	2301      	movs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <xTaskResumeAll+0x138>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003262:	f001 f8fb 	bl	800445c <vPortExitCritical>

	return xAlreadyYielded;
 8003266:	68bb      	ldr	r3, [r7, #8]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000d64 	.word	0x20000d64
 8003274:	20000d3c 	.word	0x20000d3c
 8003278:	20000cfc 	.word	0x20000cfc
 800327c:	20000d44 	.word	0x20000d44
 8003280:	2000086c 	.word	0x2000086c
 8003284:	20000868 	.word	0x20000868
 8003288:	20000d50 	.word	0x20000d50
 800328c:	20000d4c 	.word	0x20000d4c
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800329a:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <xTaskGetTickCount+0x1c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000d40 	.word	0x20000d40

080032b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032be:	4b4f      	ldr	r3, [pc, #316]	@ (80033fc <xTaskIncrementTick+0x148>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8090 	bne.w	80033e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003400 <xTaskIncrementTick+0x14c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003400 <xTaskIncrementTick+0x14c>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d121      	bne.n	8003320 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80032dc:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <xTaskIncrementTick+0x150>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	603b      	str	r3, [r7, #0]
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	e7fd      	b.n	80032fa <xTaskIncrementTick+0x46>
 80032fe:	4b41      	ldr	r3, [pc, #260]	@ (8003404 <xTaskIncrementTick+0x150>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	4b40      	ldr	r3, [pc, #256]	@ (8003408 <xTaskIncrementTick+0x154>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3e      	ldr	r2, [pc, #248]	@ (8003404 <xTaskIncrementTick+0x150>)
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4a3e      	ldr	r2, [pc, #248]	@ (8003408 <xTaskIncrementTick+0x154>)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b3e      	ldr	r3, [pc, #248]	@ (800340c <xTaskIncrementTick+0x158>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	4a3c      	ldr	r2, [pc, #240]	@ (800340c <xTaskIncrementTick+0x158>)
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	f000 fae2 	bl	80038e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003320:	4b3b      	ldr	r3, [pc, #236]	@ (8003410 <xTaskIncrementTick+0x15c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	d349      	bcc.n	80033be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800332a:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <xTaskIncrementTick+0x150>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003334:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <xTaskIncrementTick+0x15c>)
 8003336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800333a:	601a      	str	r2, [r3, #0]
					break;
 800333c:	e03f      	b.n	80033be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333e:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <xTaskIncrementTick+0x150>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	429a      	cmp	r2, r3
 8003354:	d203      	bcs.n	800335e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003356:	4a2e      	ldr	r2, [pc, #184]	@ (8003410 <xTaskIncrementTick+0x15c>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800335c:	e02f      	b.n	80033be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe ff62 	bl	800222c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3318      	adds	r3, #24
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe ff59 	bl	800222c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337e:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <xTaskIncrementTick+0x160>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d903      	bls.n	800338e <xTaskIncrementTick+0xda>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	4a22      	ldr	r2, [pc, #136]	@ (8003414 <xTaskIncrementTick+0x160>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4a1f      	ldr	r2, [pc, #124]	@ (8003418 <xTaskIncrementTick+0x164>)
 800339c:	441a      	add	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7fe fee4 	bl	8002172 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ae:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <xTaskIncrementTick+0x168>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d3b8      	bcc.n	800332a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033bc:	e7b5      	b.n	800332a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <xTaskIncrementTick+0x168>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c4:	4914      	ldr	r1, [pc, #80]	@ (8003418 <xTaskIncrementTick+0x164>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d901      	bls.n	80033da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033da:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <xTaskIncrementTick+0x16c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e004      	b.n	80033f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <xTaskIncrementTick+0x170>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <xTaskIncrementTick+0x170>)
 80033f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033f2:	697b      	ldr	r3, [r7, #20]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000d64 	.word	0x20000d64
 8003400:	20000d40 	.word	0x20000d40
 8003404:	20000cf4 	.word	0x20000cf4
 8003408:	20000cf8 	.word	0x20000cf8
 800340c:	20000d54 	.word	0x20000d54
 8003410:	20000d5c 	.word	0x20000d5c
 8003414:	20000d44 	.word	0x20000d44
 8003418:	2000086c 	.word	0x2000086c
 800341c:	20000868 	.word	0x20000868
 8003420:	20000d50 	.word	0x20000d50
 8003424:	20000d4c 	.word	0x20000d4c

08003428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800342e:	4b2b      	ldr	r3, [pc, #172]	@ (80034dc <vTaskSwitchContext+0xb4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003436:	4b2a      	ldr	r3, [pc, #168]	@ (80034e0 <vTaskSwitchContext+0xb8>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800343c:	e047      	b.n	80034ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <vTaskSwitchContext+0xb8>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <vTaskSwitchContext+0xbc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e011      	b.n	8003470 <vTaskSwitchContext+0x48>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <vTaskSwitchContext+0x42>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	607b      	str	r3, [r7, #4]
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <vTaskSwitchContext+0x3e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3b01      	subs	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	491d      	ldr	r1, [pc, #116]	@ (80034e8 <vTaskSwitchContext+0xc0>)
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0e3      	beq.n	800344c <vTaskSwitchContext+0x24>
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <vTaskSwitchContext+0xc0>)
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3308      	adds	r3, #8
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d104      	bne.n	80034b4 <vTaskSwitchContext+0x8c>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <vTaskSwitchContext+0xc4>)
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <vTaskSwitchContext+0xbc>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <vTaskSwitchContext+0xc4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3354      	adds	r3, #84	@ 0x54
 80034ca:	4a09      	ldr	r2, [pc, #36]	@ (80034f0 <vTaskSwitchContext+0xc8>)
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000d64 	.word	0x20000d64
 80034e0:	20000d50 	.word	0x20000d50
 80034e4:	20000d44 	.word	0x20000d44
 80034e8:	2000086c 	.word	0x2000086c
 80034ec:	20000868 	.word	0x20000868
 80034f0:	20000010 	.word	0x20000010

080034f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	60fb      	str	r3, [r7, #12]
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800351c:	4b07      	ldr	r3, [pc, #28]	@ (800353c <vTaskPlaceOnEventList+0x48>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3318      	adds	r3, #24
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fe fe48 	bl	80021ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800352a:	2101      	movs	r1, #1
 800352c:	6838      	ldr	r0, [r7, #0]
 800352e:	f000 fa87 	bl	8003a40 <prvAddCurrentTaskToDelayedList>
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000868 	.word	0x20000868

08003540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	617b      	str	r3, [r7, #20]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800356a:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <vTaskPlaceOnEventListRestricted+0x54>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3318      	adds	r3, #24
 8003570:	4619      	mov	r1, r3
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7fe fdfd 	bl	8002172 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003582:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	68b8      	ldr	r0, [r7, #8]
 8003588:	f000 fa5a 	bl	8003a40 <prvAddCurrentTaskToDelayedList>
	}
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000868 	.word	0x20000868

08003598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	60fb      	str	r3, [r7, #12]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3318      	adds	r3, #24
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fe2e 	bl	800222c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <xTaskRemoveFromEventList+0xb0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11d      	bne.n	8003614 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	3304      	adds	r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fe25 	bl	800222c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e6:	4b19      	ldr	r3, [pc, #100]	@ (800364c <xTaskRemoveFromEventList+0xb4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d903      	bls.n	80035f6 <xTaskRemoveFromEventList+0x5e>
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	4a16      	ldr	r2, [pc, #88]	@ (800364c <xTaskRemoveFromEventList+0xb4>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a13      	ldr	r2, [pc, #76]	@ (8003650 <xTaskRemoveFromEventList+0xb8>)
 8003604:	441a      	add	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fe fdb0 	bl	8002172 <vListInsertEnd>
 8003612:	e005      	b.n	8003620 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3318      	adds	r3, #24
 8003618:	4619      	mov	r1, r3
 800361a:	480e      	ldr	r0, [pc, #56]	@ (8003654 <xTaskRemoveFromEventList+0xbc>)
 800361c:	f7fe fda9 	bl	8002172 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <xTaskRemoveFromEventList+0xc0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d905      	bls.n	800363a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003632:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <xTaskRemoveFromEventList+0xc4>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e001      	b.n	800363e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000d64 	.word	0x20000d64
 800364c:	20000d44 	.word	0x20000d44
 8003650:	2000086c 	.word	0x2000086c
 8003654:	20000cfc 	.word	0x20000cfc
 8003658:	20000868 	.word	0x20000868
 800365c:	20000d50 	.word	0x20000d50

08003660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003668:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <vTaskInternalSetTimeOutState+0x24>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003670:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <vTaskInternalSetTimeOutState+0x28>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	605a      	str	r2, [r3, #4]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20000d54 	.word	0x20000d54
 8003688:	20000d40 	.word	0x20000d40

0800368c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	613b      	str	r3, [r7, #16]
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	60fb      	str	r3, [r7, #12]
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80036d2:	f000 fe91 	bl	80043f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036d6:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <xTaskCheckForTimeOut+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ee:	d102      	bne.n	80036f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e023      	b.n	800373e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b15      	ldr	r3, [pc, #84]	@ (8003750 <xTaskCheckForTimeOut+0xc4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d007      	beq.n	8003712 <xTaskCheckForTimeOut+0x86>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	e015      	b.n	800373e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	d20b      	bcs.n	8003734 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad2      	subs	r2, r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff99 	bl	8003660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e004      	b.n	800373e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800373e:	f000 fe8d 	bl	800445c <vPortExitCritical>

	return xReturn;
 8003742:	69fb      	ldr	r3, [r7, #28]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000d40 	.word	0x20000d40
 8003750:	20000d54 	.word	0x20000d54

08003754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003758:	4b03      	ldr	r3, [pc, #12]	@ (8003768 <vTaskMissedYield+0x14>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20000d50 	.word	0x20000d50

0800376c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003774:	f000 f852 	bl	800381c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <prvIdleTask+0x28>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d9f9      	bls.n	8003774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <prvIdleTask+0x2c>)
 8003782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003790:	e7f0      	b.n	8003774 <prvIdleTask+0x8>
 8003792:	bf00      	nop
 8003794:	2000086c 	.word	0x2000086c
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	e00c      	b.n	80037c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4a12      	ldr	r2, [pc, #72]	@ (80037fc <prvInitialiseTaskLists+0x60>)
 80037b4:	4413      	add	r3, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fcae 	bl	8002118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3301      	adds	r3, #1
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b37      	cmp	r3, #55	@ 0x37
 80037c6:	d9ef      	bls.n	80037a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037c8:	480d      	ldr	r0, [pc, #52]	@ (8003800 <prvInitialiseTaskLists+0x64>)
 80037ca:	f7fe fca5 	bl	8002118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037ce:	480d      	ldr	r0, [pc, #52]	@ (8003804 <prvInitialiseTaskLists+0x68>)
 80037d0:	f7fe fca2 	bl	8002118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037d4:	480c      	ldr	r0, [pc, #48]	@ (8003808 <prvInitialiseTaskLists+0x6c>)
 80037d6:	f7fe fc9f 	bl	8002118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037da:	480c      	ldr	r0, [pc, #48]	@ (800380c <prvInitialiseTaskLists+0x70>)
 80037dc:	f7fe fc9c 	bl	8002118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037e0:	480b      	ldr	r0, [pc, #44]	@ (8003810 <prvInitialiseTaskLists+0x74>)
 80037e2:	f7fe fc99 	bl	8002118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <prvInitialiseTaskLists+0x78>)
 80037e8:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <prvInitialiseTaskLists+0x64>)
 80037ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <prvInitialiseTaskLists+0x7c>)
 80037ee:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <prvInitialiseTaskLists+0x68>)
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2000086c 	.word	0x2000086c
 8003800:	20000ccc 	.word	0x20000ccc
 8003804:	20000ce0 	.word	0x20000ce0
 8003808:	20000cfc 	.word	0x20000cfc
 800380c:	20000d10 	.word	0x20000d10
 8003810:	20000d28 	.word	0x20000d28
 8003814:	20000cf4 	.word	0x20000cf4
 8003818:	20000cf8 	.word	0x20000cf8

0800381c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003822:	e019      	b.n	8003858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003824:	f000 fde8 	bl	80043f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	4b10      	ldr	r3, [pc, #64]	@ (800386c <prvCheckTasksWaitingTermination+0x50>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fcf9 	bl	800222c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <prvCheckTasksWaitingTermination+0x54>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3b01      	subs	r3, #1
 8003840:	4a0b      	ldr	r2, [pc, #44]	@ (8003870 <prvCheckTasksWaitingTermination+0x54>)
 8003842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <prvCheckTasksWaitingTermination+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3b01      	subs	r3, #1
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <prvCheckTasksWaitingTermination+0x58>)
 800384c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800384e:	f000 fe05 	bl	800445c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f810 	bl	8003878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003858:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <prvCheckTasksWaitingTermination+0x58>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e1      	bne.n	8003824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000d10 	.word	0x20000d10
 8003870:	20000d3c 	.word	0x20000d3c
 8003874:	20000d24 	.word	0x20000d24

08003878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3354      	adds	r3, #84	@ 0x54
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f8cf 	bl	8004a28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003890:	2b00      	cmp	r3, #0
 8003892:	d108      	bne.n	80038a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ff9d 	bl	80047d8 <vPortFree>
				vPortFree( pxTCB );
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 ff9a 	bl	80047d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038a4:	e019      	b.n	80038da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d103      	bne.n	80038b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 ff91 	bl	80047d8 <vPortFree>
	}
 80038b6:	e010      	b.n	80038da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d00b      	beq.n	80038da <prvDeleteTCB+0x62>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	60fb      	str	r3, [r7, #12]
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	e7fd      	b.n	80038d6 <prvDeleteTCB+0x5e>
	}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ea:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <prvResetNextTaskUnblockTime+0x38>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <prvResetNextTaskUnblockTime+0x3c>)
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038fc:	e008      	b.n	8003910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fe:	4b07      	ldr	r3, [pc, #28]	@ (800391c <prvResetNextTaskUnblockTime+0x38>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a04      	ldr	r2, [pc, #16]	@ (8003920 <prvResetNextTaskUnblockTime+0x3c>)
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	20000cf4 	.word	0x20000cf4
 8003920:	20000d5c 	.word	0x20000d5c

08003924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800392a:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <xTaskGetSchedulerState+0x34>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003932:	2301      	movs	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	e008      	b.n	800394a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <xTaskGetSchedulerState+0x38>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003940:	2302      	movs	r3, #2
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	e001      	b.n	800394a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800394a:	687b      	ldr	r3, [r7, #4]
	}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	20000d48 	.word	0x20000d48
 800395c:	20000d64 	.word	0x20000d64

08003960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d058      	beq.n	8003a28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003976:	4b2f      	ldr	r3, [pc, #188]	@ (8003a34 <xTaskPriorityDisinherit+0xd4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	d00b      	beq.n	8003998 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	60fb      	str	r3, [r7, #12]
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60bb      	str	r3, [r7, #8]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	1e5a      	subs	r2, r3, #1
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d02c      	beq.n	8003a28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d128      	bne.n	8003a28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3304      	adds	r3, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fc26 	bl	800222c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <xTaskPriorityDisinherit+0xd8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d903      	bls.n	8003a08 <xTaskPriorityDisinherit+0xa8>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	4a0c      	ldr	r2, [pc, #48]	@ (8003a38 <xTaskPriorityDisinherit+0xd8>)
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a09      	ldr	r2, [pc, #36]	@ (8003a3c <xTaskPriorityDisinherit+0xdc>)
 8003a16:	441a      	add	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fe fba7 	bl	8002172 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a28:	697b      	ldr	r3, [r7, #20]
	}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000868 	.word	0x20000868
 8003a38:	20000d44 	.word	0x20000d44
 8003a3c:	2000086c 	.word	0x2000086c

08003a40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a4a:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a50:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fbe8 	bl	800222c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a62:	d10a      	bne.n	8003a7a <prvAddCurrentTaskToDelayedList+0x3a>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4819      	ldr	r0, [pc, #100]	@ (8003ad8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a74:	f7fe fb7d 	bl	8002172 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a78:	e026      	b.n	8003ac8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a82:	4b14      	ldr	r3, [pc, #80]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d209      	bcs.n	8003aa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f7fe fb8b 	bl	80021ba <vListInsert>
}
 8003aa4:	e010      	b.n	8003ac8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7fe fb81 	bl	80021ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d202      	bcs.n	8003ac8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ac2:	4a08      	ldr	r2, [pc, #32]	@ (8003ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000d40 	.word	0x20000d40
 8003ad4:	20000868 	.word	0x20000868
 8003ad8:	20000d28 	.word	0x20000d28
 8003adc:	20000cf8 	.word	0x20000cf8
 8003ae0:	20000cf4 	.word	0x20000cf4
 8003ae4:	20000d5c 	.word	0x20000d5c

08003ae8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	@ 0x28
 8003aec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003af2:	f000 fb13 	bl	800411c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003af6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <xTimerCreateTimerTask+0x84>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d021      	beq.n	8003b42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b06:	1d3a      	adds	r2, r7, #4
 8003b08:	f107 0108 	add.w	r1, r7, #8
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fae7 	bl	80020e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	9202      	str	r2, [sp, #8]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	2302      	movs	r3, #2
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	460a      	mov	r2, r1
 8003b28:	4911      	ldr	r1, [pc, #68]	@ (8003b70 <xTimerCreateTimerTask+0x88>)
 8003b2a:	4812      	ldr	r0, [pc, #72]	@ (8003b74 <xTimerCreateTimerTask+0x8c>)
 8003b2c:	f7ff f8a2 	bl	8002c74 <xTaskCreateStatic>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <xTimerCreateTimerTask+0x90>)
 8003b34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b36:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <xTimerCreateTimerTask+0x90>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b60:	697b      	ldr	r3, [r7, #20]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000d98 	.word	0x20000d98
 8003b70:	08004c18 	.word	0x08004c18
 8003b74:	08003cb5 	.word	0x08003cb5
 8003b78:	20000d9c 	.word	0x20000d9c

08003b7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	@ 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <xTimerGenericCommand+0x30>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	623b      	str	r3, [r7, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bac:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <xTimerGenericCommand+0x98>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02a      	beq.n	8003c0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	dc18      	bgt.n	8003bf8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bc6:	f7ff fead 	bl	8003924 <xTaskGetSchedulerState>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d109      	bne.n	8003be4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <xTimerGenericCommand+0x98>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	f107 0110 	add.w	r1, r7, #16
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bdc:	f7fe fc5a 	bl	8002494 <xQueueGenericSend>
 8003be0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003be2:	e012      	b.n	8003c0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <xTimerGenericCommand+0x98>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f107 0110 	add.w	r1, r7, #16
 8003bec:	2300      	movs	r3, #0
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f7fe fc50 	bl	8002494 <xQueueGenericSend>
 8003bf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bf6:	e008      	b.n	8003c0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <xTimerGenericCommand+0x98>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0110 	add.w	r1, r7, #16
 8003c00:	2300      	movs	r3, #0
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	f7fe fd48 	bl	8002698 <xQueueGenericSendFromISR>
 8003c08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3728      	adds	r7, #40	@ 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000d98 	.word	0x20000d98

08003c18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c22:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <prvProcessExpiredTimer+0x98>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fafb 	bl	800222c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d023      	beq.n	8003c8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	18d1      	adds	r1, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	6978      	ldr	r0, [r7, #20]
 8003c52:	f000 f8d5 	bl	8003e00 <prvInsertTimerInActiveList>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	2100      	movs	r1, #0
 8003c66:	6978      	ldr	r0, [r7, #20]
 8003c68:	f7ff ff88 	bl	8003b7c <xTimerGenericCommand>
 8003c6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d114      	bne.n	8003c9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	4798      	blx	r3
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000d90 	.word	0x20000d90

08003cb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f859 	bl	8003d78 <prvGetNextExpireTime>
 8003cc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f805 	bl	8003cdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cd2:	f000 f8d7 	bl	8003e84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cd6:	bf00      	nop
 8003cd8:	e7f0      	b.n	8003cbc <prvTimerTask+0x8>
	...

08003cdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ce6:	f7ff fa29 	bl	800313c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f866 	bl	8003dc0 <prvSampleTimeNow>
 8003cf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d130      	bne.n	8003d5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <prvProcessTimerOrBlockTask+0x3c>
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d806      	bhi.n	8003d18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d0a:	f7ff fa25 	bl	8003158 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff81 	bl	8003c18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d16:	e024      	b.n	8003d62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d1e:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <prvProcessTimerOrBlockTask+0x90>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <prvProcessTimerOrBlockTask+0x50>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <prvProcessTimerOrBlockTask+0x52>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d30:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <prvProcessTimerOrBlockTask+0x94>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f7fe ff65 	bl	8002c0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d42:	f7ff fa09 	bl	8003158 <xTaskResumeAll>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <prvProcessTimerOrBlockTask+0x98>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
}
 8003d5c:	e001      	b.n	8003d62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d5e:	f7ff f9fb 	bl	8003158 <xTaskResumeAll>
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000d94 	.word	0x20000d94
 8003d70:	20000d98 	.word	0x20000d98
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d80:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <prvGetNextExpireTime+0x44>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <prvGetNextExpireTime+0x16>
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	e000      	b.n	8003d90 <prvGetNextExpireTime+0x18>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d9c:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <prvGetNextExpireTime+0x44>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e001      	b.n	8003dac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dac:	68fb      	ldr	r3, [r7, #12]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000d90 	.word	0x20000d90

08003dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dc8:	f7ff fa64 	bl	8003294 <xTaskGetTickCount>
 8003dcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <prvSampleTimeNow+0x3c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d205      	bcs.n	8003de4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003dd8:	f000 f93a 	bl	8004050 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e002      	b.n	8003dea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003dea:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <prvSampleTimeNow+0x3c>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003df0:	68fb      	ldr	r3, [r7, #12]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000da0 	.word	0x20000da0

08003e00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d812      	bhi.n	8003e4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad2      	subs	r2, r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e01b      	b.n	8003e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e3a:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <prvInsertTimerInActiveList+0x7c>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe f9b8 	bl	80021ba <vListInsert>
 8003e4a:	e012      	b.n	8003e72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d206      	bcs.n	8003e62 <prvInsertTimerInActiveList+0x62>
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d302      	bcc.n	8003e62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e007      	b.n	8003e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <prvInsertTimerInActiveList+0x80>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe f9a4 	bl	80021ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e72:	697b      	ldr	r3, [r7, #20]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000d94 	.word	0x20000d94
 8003e80:	20000d90 	.word	0x20000d90

08003e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08e      	sub	sp, #56	@ 0x38
 8003e88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e8a:	e0ce      	b.n	800402a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da19      	bge.n	8003ec6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	3304      	adds	r3, #4
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	61fb      	str	r3, [r7, #28]
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	e7fd      	b.n	8003eb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebc:	6850      	ldr	r0, [r2, #4]
 8003ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec0:	6892      	ldr	r2, [r2, #8]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f2c0 80ae 	blt.w	800402a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe f9a4 	bl	800222c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff6a 	bl	8003dc0 <prvSampleTimeNow>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	f200 8097 	bhi.w	8004024 <prvProcessReceivedCommands+0x1a0>
 8003ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <prvProcessReceivedCommands+0x78>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f25 	.word	0x08003f25
 8003f08:	08003f9b 	.word	0x08003f9b
 8003f0c:	08003faf 	.word	0x08003faf
 8003f10:	08003ffb 	.word	0x08003ffb
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f25 	.word	0x08003f25
 8003f1c:	08003f9b 	.word	0x08003f9b
 8003f20:	08003faf 	.word	0x08003faf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	18d1      	adds	r1, r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f44:	f7ff ff5c 	bl	8003e00 <prvInsertTimerInActiveList>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d06c      	beq.n	8004028 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d061      	beq.n	8004028 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f76:	f7ff fe01 	bl	8003b7c <xTimerGenericCommand>
 8003f7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d152      	bne.n	8004028 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	61bb      	str	r3, [r7, #24]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003fac:	e03d      	b.n	800402a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	617b      	str	r3, [r7, #20]
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	18d1      	adds	r1, r2, r3
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff4:	f7ff ff04 	bl	8003e00 <prvInsertTimerInActiveList>
					break;
 8003ff8:	e017      	b.n	800402a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800400a:	f000 fbe5 	bl	80047d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800400e:	e00c      	b.n	800402a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004022:	e002      	b.n	800402a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <prvProcessReceivedCommands+0x1a6>
					break;
 8004028:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <prvProcessReceivedCommands+0x1c8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	1d39      	adds	r1, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fbce 	bl	80027d4 <xQueueReceive>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f47f af26 	bne.w	8003e8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3730      	adds	r7, #48	@ 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000d98 	.word	0x20000d98

08004050 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004056:	e049      	b.n	80040ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004058:	4b2e      	ldr	r3, [pc, #184]	@ (8004114 <prvSwitchTimerLists+0xc4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004062:	4b2c      	ldr	r3, [pc, #176]	@ (8004114 <prvSwitchTimerLists+0xc4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe f8db 	bl	800222c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02f      	beq.n	80040ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d90e      	bls.n	80040bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <prvSwitchTimerLists+0xc4>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fe f880 	bl	80021ba <vListInsert>
 80040ba:	e017      	b.n	80040ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2300      	movs	r3, #0
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	2100      	movs	r1, #0
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fd58 	bl	8003b7c <xTimerGenericCommand>
 80040cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	603b      	str	r3, [r7, #0]
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <prvSwitchTimerLists+0xc4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1b0      	bne.n	8004058 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80040f6:	4b07      	ldr	r3, [pc, #28]	@ (8004114 <prvSwitchTimerLists+0xc4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <prvSwitchTimerLists+0xc8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <prvSwitchTimerLists+0xc4>)
 8004102:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004104:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <prvSwitchTimerLists+0xc8>)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000d90 	.word	0x20000d90
 8004118:	20000d94 	.word	0x20000d94

0800411c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004122:	f000 f969 	bl	80043f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004126:	4b15      	ldr	r3, [pc, #84]	@ (800417c <prvCheckForValidListAndQueue+0x60>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d120      	bne.n	8004170 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800412e:	4814      	ldr	r0, [pc, #80]	@ (8004180 <prvCheckForValidListAndQueue+0x64>)
 8004130:	f7fd fff2 	bl	8002118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004134:	4813      	ldr	r0, [pc, #76]	@ (8004184 <prvCheckForValidListAndQueue+0x68>)
 8004136:	f7fd ffef 	bl	8002118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800413a:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <prvCheckForValidListAndQueue+0x6c>)
 800413c:	4a10      	ldr	r2, [pc, #64]	@ (8004180 <prvCheckForValidListAndQueue+0x64>)
 800413e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004140:	4b12      	ldr	r3, [pc, #72]	@ (800418c <prvCheckForValidListAndQueue+0x70>)
 8004142:	4a10      	ldr	r2, [pc, #64]	@ (8004184 <prvCheckForValidListAndQueue+0x68>)
 8004144:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <prvCheckForValidListAndQueue+0x74>)
 800414c:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <prvCheckForValidListAndQueue+0x78>)
 800414e:	2110      	movs	r1, #16
 8004150:	200a      	movs	r0, #10
 8004152:	f7fe f8ff 	bl	8002354 <xQueueGenericCreateStatic>
 8004156:	4603      	mov	r3, r0
 8004158:	4a08      	ldr	r2, [pc, #32]	@ (800417c <prvCheckForValidListAndQueue+0x60>)
 800415a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800415c:	4b07      	ldr	r3, [pc, #28]	@ (800417c <prvCheckForValidListAndQueue+0x60>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004164:	4b05      	ldr	r3, [pc, #20]	@ (800417c <prvCheckForValidListAndQueue+0x60>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	490b      	ldr	r1, [pc, #44]	@ (8004198 <prvCheckForValidListAndQueue+0x7c>)
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd24 	bl	8002bb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004170:	f000 f974 	bl	800445c <vPortExitCritical>
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000d98 	.word	0x20000d98
 8004180:	20000d68 	.word	0x20000d68
 8004184:	20000d7c 	.word	0x20000d7c
 8004188:	20000d90 	.word	0x20000d90
 800418c:	20000d94 	.word	0x20000d94
 8004190:	20000e44 	.word	0x20000e44
 8004194:	20000da4 	.word	0x20000da4
 8004198:	08004c20 	.word	0x08004c20

0800419c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b04      	subs	r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b04      	subs	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004200 <pxPortInitialiseStack+0x64>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b14      	subs	r3, #20
 80041d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f06f 0202 	mvn.w	r2, #2
 80041ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3b20      	subs	r3, #32
 80041f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	08004205 	.word	0x08004205

08004204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800420e:	4b13      	ldr	r3, [pc, #76]	@ (800425c <prvTaskExitError+0x58>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004216:	d00b      	beq.n	8004230 <prvTaskExitError+0x2c>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60fb      	str	r3, [r7, #12]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <prvTaskExitError+0x28>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60bb      	str	r3, [r7, #8]
}
 8004242:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004244:	bf00      	nop
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0fc      	beq.n	8004246 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	2000000c 	.word	0x2000000c

08004260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004260:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <pxCurrentTCBConst2>)
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426a:	f380 8809 	msr	PSP, r0
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	4770      	bx	lr
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst2>:
 8004280:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004288:	4808      	ldr	r0, [pc, #32]	@ (80042ac <prvPortStartFirstTask+0x24>)
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f380 8808 	msr	MSP, r0
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8814 	msr	CONTROL, r0
 800429a:	b662      	cpsie	i
 800429c:	b661      	cpsie	f
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	df00      	svc	0
 80042a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042aa:	bf00      	nop
 80042ac:	e000ed08 	.word	0xe000ed08

080042b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042b6:	4b47      	ldr	r3, [pc, #284]	@ (80043d4 <xPortStartScheduler+0x124>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a47      	ldr	r2, [pc, #284]	@ (80043d8 <xPortStartScheduler+0x128>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10b      	bne.n	80042d8 <xPortStartScheduler+0x28>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	613b      	str	r3, [r7, #16]
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042d8:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <xPortStartScheduler+0x124>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3f      	ldr	r2, [pc, #252]	@ (80043dc <xPortStartScheduler+0x12c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10b      	bne.n	80042fa <xPortStartScheduler+0x4a>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60fb      	str	r3, [r7, #12]
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	e7fd      	b.n	80042f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <xPortStartScheduler+0x130>)
 80042fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	22ff      	movs	r2, #255	@ 0xff
 800430a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b31      	ldr	r3, [pc, #196]	@ (80043e4 <xPortStartScheduler+0x134>)
 8004320:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004322:	4b31      	ldr	r3, [pc, #196]	@ (80043e8 <xPortStartScheduler+0x138>)
 8004324:	2207      	movs	r2, #7
 8004326:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004328:	e009      	b.n	800433e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800432a:	4b2f      	ldr	r3, [pc, #188]	@ (80043e8 <xPortStartScheduler+0x138>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	4a2d      	ldr	r2, [pc, #180]	@ (80043e8 <xPortStartScheduler+0x138>)
 8004332:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004346:	2b80      	cmp	r3, #128	@ 0x80
 8004348:	d0ef      	beq.n	800432a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800434a:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <xPortStartScheduler+0x138>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1c3 0307 	rsb	r3, r3, #7
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00b      	beq.n	800436e <xPortStartScheduler+0xbe>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60bb      	str	r3, [r7, #8]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800436e:	4b1e      	ldr	r3, [pc, #120]	@ (80043e8 <xPortStartScheduler+0x138>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	4a1c      	ldr	r2, [pc, #112]	@ (80043e8 <xPortStartScheduler+0x138>)
 8004376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <xPortStartScheduler+0x138>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004380:	4a19      	ldr	r2, [pc, #100]	@ (80043e8 <xPortStartScheduler+0x138>)
 8004382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800438c:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <xPortStartScheduler+0x13c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a16      	ldr	r2, [pc, #88]	@ (80043ec <xPortStartScheduler+0x13c>)
 8004392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004398:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <xPortStartScheduler+0x13c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <xPortStartScheduler+0x13c>)
 800439e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043a4:	f000 f8da 	bl	800455c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043a8:	4b11      	ldr	r3, [pc, #68]	@ (80043f0 <xPortStartScheduler+0x140>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043ae:	f000 f8f9 	bl	80045a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <xPortStartScheduler+0x144>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0f      	ldr	r2, [pc, #60]	@ (80043f4 <xPortStartScheduler+0x144>)
 80043b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043be:	f7ff ff63 	bl	8004288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043c2:	f7ff f831 	bl	8003428 <vTaskSwitchContext>
	prvTaskExitError();
 80043c6:	f7ff ff1d 	bl	8004204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	e000ed00 	.word	0xe000ed00
 80043d8:	410fc271 	.word	0x410fc271
 80043dc:	410fc270 	.word	0x410fc270
 80043e0:	e000e400 	.word	0xe000e400
 80043e4:	20000e94 	.word	0x20000e94
 80043e8:	20000e98 	.word	0x20000e98
 80043ec:	e000ed20 	.word	0xe000ed20
 80043f0:	2000000c 	.word	0x2000000c
 80043f4:	e000ef34 	.word	0xe000ef34

080043f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
}
 8004410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <vPortEnterCritical+0x5c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	4a0e      	ldr	r2, [pc, #56]	@ (8004454 <vPortEnterCritical+0x5c>)
 800441a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800441c:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <vPortEnterCritical+0x5c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d110      	bne.n	8004446 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004424:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <vPortEnterCritical+0x60>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <vPortEnterCritical+0x4e>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	603b      	str	r3, [r7, #0]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <vPortEnterCritical+0x4a>
	}
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <vPortExitCritical+0x50>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10b      	bne.n	8004482 <vPortExitCritical+0x26>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	607b      	str	r3, [r7, #4]
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	e7fd      	b.n	800447e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004482:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <vPortExitCritical+0x50>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	4a08      	ldr	r2, [pc, #32]	@ (80044ac <vPortExitCritical+0x50>)
 800448a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800448c:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <vPortExitCritical+0x50>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <vPortExitCritical+0x44>
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f383 8811 	msr	BASEPRI, r3
}
 800449e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe ffa2 	bl	8003428 <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004532:	f7fe febf 	bl	80032b4 <xTaskIncrementTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <xPortSysTickHandler+0x40>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f383 8811 	msr	BASEPRI, r3
}
 800454e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004560:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <vPortSetupTimerInterrupt+0x38>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <vPortSetupTimerInterrupt+0x3c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0a      	ldr	r2, [pc, #40]	@ (800459c <vPortSetupTimerInterrupt+0x40>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	4a09      	ldr	r2, [pc, #36]	@ (80045a0 <vPortSetupTimerInterrupt+0x44>)
 800457a:	3b01      	subs	r3, #1
 800457c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800457e:	4b04      	ldr	r3, [pc, #16]	@ (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e010 	.word	0xe000e010
 8004594:	e000e018 	.word	0xe000e018
 8004598:	20000000 	.word	0x20000000
 800459c:	10624dd3 	.word	0x10624dd3
 80045a0:	e000e014 	.word	0xe000e014

080045a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045b4 <vPortEnableVFP+0x10>
 80045a8:	6801      	ldr	r1, [r0, #0]
 80045aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045ae:	6001      	str	r1, [r0, #0]
 80045b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045b2:	bf00      	nop
 80045b4:	e000ed88 	.word	0xe000ed88

080045b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d915      	bls.n	80045f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ca:	4a18      	ldr	r2, [pc, #96]	@ (800462c <vPortValidateInterruptPriority+0x74>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045d4:	4b16      	ldr	r3, [pc, #88]	@ (8004630 <vPortValidateInterruptPriority+0x78>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	7afa      	ldrb	r2, [r7, #11]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d20b      	bcs.n	80045f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004634 <vPortValidateInterruptPriority+0x7c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004638 <vPortValidateInterruptPriority+0x80>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d90b      	bls.n	800461e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	603b      	str	r3, [r7, #0]
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	e7fd      	b.n	800461a <vPortValidateInterruptPriority+0x62>
	}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000e3f0 	.word	0xe000e3f0
 8004630:	20000e94 	.word	0x20000e94
 8004634:	e000ed0c 	.word	0xe000ed0c
 8004638:	20000e98 	.word	0x20000e98

0800463c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004648:	f7fe fd78 	bl	800313c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800464c:	4b5c      	ldr	r3, [pc, #368]	@ (80047c0 <pvPortMalloc+0x184>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004654:	f000 f924 	bl	80048a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004658:	4b5a      	ldr	r3, [pc, #360]	@ (80047c4 <pvPortMalloc+0x188>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 8095 	bne.w	8004790 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01e      	beq.n	80046aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800466c:	2208      	movs	r2, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d015      	beq.n	80046aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f023 0307 	bic.w	r3, r3, #7
 8004684:	3308      	adds	r3, #8
 8004686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <pvPortMalloc+0x6e>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	617b      	str	r3, [r7, #20]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d06f      	beq.n	8004790 <pvPortMalloc+0x154>
 80046b0:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <pvPortMalloc+0x18c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d86a      	bhi.n	8004790 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046ba:	4b44      	ldr	r3, [pc, #272]	@ (80047cc <pvPortMalloc+0x190>)
 80046bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046be:	4b43      	ldr	r3, [pc, #268]	@ (80047cc <pvPortMalloc+0x190>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c4:	e004      	b.n	80046d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d903      	bls.n	80046e2 <pvPortMalloc+0xa6>
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f1      	bne.n	80046c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046e2:	4b37      	ldr	r3, [pc, #220]	@ (80047c0 <pvPortMalloc+0x184>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d051      	beq.n	8004790 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2208      	movs	r2, #8
 80046f2:	4413      	add	r3, r2
 80046f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	1ad2      	subs	r2, r2, r3
 8004706:	2308      	movs	r3, #8
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	429a      	cmp	r2, r3
 800470c:	d920      	bls.n	8004750 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800470e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <pvPortMalloc+0xfc>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	613b      	str	r3, [r7, #16]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800474a:	69b8      	ldr	r0, [r7, #24]
 800474c:	f000 f90a 	bl	8004964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <pvPortMalloc+0x18c>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <pvPortMalloc+0x18c>)
 800475c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800475e:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <pvPortMalloc+0x18c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <pvPortMalloc+0x194>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d203      	bcs.n	8004772 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800476a:	4b17      	ldr	r3, [pc, #92]	@ (80047c8 <pvPortMalloc+0x18c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <pvPortMalloc+0x194>)
 8004770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4b13      	ldr	r3, [pc, #76]	@ (80047c4 <pvPortMalloc+0x188>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	431a      	orrs	r2, r3
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004786:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <pvPortMalloc+0x198>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a11      	ldr	r2, [pc, #68]	@ (80047d4 <pvPortMalloc+0x198>)
 800478e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004790:	f7fe fce2 	bl	8003158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <pvPortMalloc+0x17a>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <pvPortMalloc+0x176>
	return pvReturn;
 80047b6:	69fb      	ldr	r3, [r7, #28]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	@ 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20001aa4 	.word	0x20001aa4
 80047c4:	20001ab8 	.word	0x20001ab8
 80047c8:	20001aa8 	.word	0x20001aa8
 80047cc:	20001a9c 	.word	0x20001a9c
 80047d0:	20001aac 	.word	0x20001aac
 80047d4:	20001ab0 	.word	0x20001ab0

080047d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04f      	beq.n	800488a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047ea:	2308      	movs	r3, #8
 80047ec:	425b      	negs	r3, r3
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4413      	add	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4b25      	ldr	r3, [pc, #148]	@ (8004894 <vPortFree+0xbc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <vPortFree+0x46>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60fb      	str	r3, [r7, #12]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <vPortFree+0x66>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60bb      	str	r3, [r7, #8]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	4b14      	ldr	r3, [pc, #80]	@ (8004894 <vPortFree+0xbc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01e      	beq.n	800488a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11a      	bne.n	800488a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <vPortFree+0xbc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	43db      	mvns	r3, r3
 800485e:	401a      	ands	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004864:	f7fe fc6a 	bl	800313c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <vPortFree+0xc0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4413      	add	r3, r2
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <vPortFree+0xc0>)
 8004874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004876:	6938      	ldr	r0, [r7, #16]
 8004878:	f000 f874 	bl	8004964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800487c:	4b07      	ldr	r3, [pc, #28]	@ (800489c <vPortFree+0xc4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a06      	ldr	r2, [pc, #24]	@ (800489c <vPortFree+0xc4>)
 8004884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004886:	f7fe fc67 	bl	8003158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20001ab8 	.word	0x20001ab8
 8004898:	20001aa8 	.word	0x20001aa8
 800489c:	20001ab4 	.word	0x20001ab4

080048a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80048aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048ac:	4b27      	ldr	r3, [pc, #156]	@ (800494c <prvHeapInit+0xac>)
 80048ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3307      	adds	r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0307 	bic.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <prvHeapInit+0xac>)
 80048d0:	4413      	add	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004950 <prvHeapInit+0xb0>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048de:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <prvHeapInit+0xb0>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048ec:	2208      	movs	r2, #8
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0307 	bic.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <prvHeapInit+0xb4>)
 8004900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004902:	4b14      	ldr	r3, [pc, #80]	@ (8004954 <prvHeapInit+0xb4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <prvHeapInit+0xb4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <prvHeapInit+0xb4>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <prvHeapInit+0xb8>)
 800492e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a09      	ldr	r2, [pc, #36]	@ (800495c <prvHeapInit+0xbc>)
 8004936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <prvHeapInit+0xc0>)
 800493a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000e9c 	.word	0x20000e9c
 8004950:	20001a9c 	.word	0x20001a9c
 8004954:	20001aa4 	.word	0x20001aa4
 8004958:	20001aac 	.word	0x20001aac
 800495c:	20001aa8 	.word	0x20001aa8
 8004960:	20001ab8 	.word	0x20001ab8

08004964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800496c:	4b28      	ldr	r3, [pc, #160]	@ (8004a10 <prvInsertBlockIntoFreeList+0xac>)
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e002      	b.n	8004978 <prvInsertBlockIntoFreeList+0x14>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d8f7      	bhi.n	8004972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d108      	bne.n	80049a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	441a      	add	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d118      	bne.n	80049ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <prvInsertBlockIntoFreeList+0xb0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d00d      	beq.n	80049e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e008      	b.n	80049f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <prvInsertBlockIntoFreeList+0xb0>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e003      	b.n	80049f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d002      	beq.n	8004a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20001a9c 	.word	0x20001a9c
 8004a14:	20001aa4 	.word	0x20001aa4

08004a18 <memset>:
 8004a18:	4402      	add	r2, r0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	f803 1b01 	strb.w	r1, [r3], #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <_reclaim_reent>:
 8004a28:	4b29      	ldr	r3, [pc, #164]	@ (8004ad0 <_reclaim_reent+0xa8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	b570      	push	{r4, r5, r6, lr}
 8004a30:	4604      	mov	r4, r0
 8004a32:	d04b      	beq.n	8004acc <_reclaim_reent+0xa4>
 8004a34:	69c3      	ldr	r3, [r0, #28]
 8004a36:	b1ab      	cbz	r3, 8004a64 <_reclaim_reent+0x3c>
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	b16b      	cbz	r3, 8004a58 <_reclaim_reent+0x30>
 8004a3c:	2500      	movs	r5, #0
 8004a3e:	69e3      	ldr	r3, [r4, #28]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	5959      	ldr	r1, [r3, r5]
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d13b      	bne.n	8004ac0 <_reclaim_reent+0x98>
 8004a48:	3504      	adds	r5, #4
 8004a4a:	2d80      	cmp	r5, #128	@ 0x80
 8004a4c:	d1f7      	bne.n	8004a3e <_reclaim_reent+0x16>
 8004a4e:	69e3      	ldr	r3, [r4, #28]
 8004a50:	4620      	mov	r0, r4
 8004a52:	68d9      	ldr	r1, [r3, #12]
 8004a54:	f000 f872 	bl	8004b3c <_free_r>
 8004a58:	69e3      	ldr	r3, [r4, #28]
 8004a5a:	6819      	ldr	r1, [r3, #0]
 8004a5c:	b111      	cbz	r1, 8004a64 <_reclaim_reent+0x3c>
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 f86c 	bl	8004b3c <_free_r>
 8004a64:	6961      	ldr	r1, [r4, #20]
 8004a66:	b111      	cbz	r1, 8004a6e <_reclaim_reent+0x46>
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f867 	bl	8004b3c <_free_r>
 8004a6e:	69e1      	ldr	r1, [r4, #28]
 8004a70:	b111      	cbz	r1, 8004a78 <_reclaim_reent+0x50>
 8004a72:	4620      	mov	r0, r4
 8004a74:	f000 f862 	bl	8004b3c <_free_r>
 8004a78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a7a:	b111      	cbz	r1, 8004a82 <_reclaim_reent+0x5a>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 f85d 	bl	8004b3c <_free_r>
 8004a82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a84:	b111      	cbz	r1, 8004a8c <_reclaim_reent+0x64>
 8004a86:	4620      	mov	r0, r4
 8004a88:	f000 f858 	bl	8004b3c <_free_r>
 8004a8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004a8e:	b111      	cbz	r1, 8004a96 <_reclaim_reent+0x6e>
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 f853 	bl	8004b3c <_free_r>
 8004a96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004a98:	b111      	cbz	r1, 8004aa0 <_reclaim_reent+0x78>
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f000 f84e 	bl	8004b3c <_free_r>
 8004aa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004aa2:	b111      	cbz	r1, 8004aaa <_reclaim_reent+0x82>
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 f849 	bl	8004b3c <_free_r>
 8004aaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004aac:	b111      	cbz	r1, 8004ab4 <_reclaim_reent+0x8c>
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 f844 	bl	8004b3c <_free_r>
 8004ab4:	6a23      	ldr	r3, [r4, #32]
 8004ab6:	b14b      	cbz	r3, 8004acc <_reclaim_reent+0xa4>
 8004ab8:	4620      	mov	r0, r4
 8004aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004abe:	4718      	bx	r3
 8004ac0:	680e      	ldr	r6, [r1, #0]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 f83a 	bl	8004b3c <_free_r>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	e7bb      	b.n	8004a44 <_reclaim_reent+0x1c>
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000010 	.word	0x20000010

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2600      	movs	r6, #0
 8004ae0:	42a6      	cmp	r6, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 f87e 	bl	8004be8 <_init>
 8004aec:	1b64      	subs	r4, r4, r5
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2600      	movs	r6, #0
 8004af2:	42a6      	cmp	r6, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afc:	4798      	blx	r3
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b06:	4798      	blx	r3
 8004b08:	3601      	adds	r6, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08004c88 	.word	0x08004c88
 8004b10:	08004c88 	.word	0x08004c88
 8004b14:	08004c88 	.word	0x08004c88
 8004b18:	08004c8c 	.word	0x08004c8c

08004b1c <__retarget_lock_acquire_recursive>:
 8004b1c:	4770      	bx	lr

08004b1e <__retarget_lock_release_recursive>:
 8004b1e:	4770      	bx	lr

08004b20 <memcpy>:
 8004b20:	440a      	add	r2, r1
 8004b22:	4291      	cmp	r1, r2
 8004b24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b28:	d100      	bne.n	8004b2c <memcpy+0xc>
 8004b2a:	4770      	bx	lr
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b36:	4291      	cmp	r1, r2
 8004b38:	d1f9      	bne.n	8004b2e <memcpy+0xe>
 8004b3a:	bd10      	pop	{r4, pc}

08004b3c <_free_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4605      	mov	r5, r0
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d041      	beq.n	8004bc8 <_free_r+0x8c>
 8004b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b48:	1f0c      	subs	r4, r1, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfb8      	it	lt
 8004b4e:	18e4      	addlt	r4, r4, r3
 8004b50:	f000 f83e 	bl	8004bd0 <__malloc_lock>
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <_free_r+0x90>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	b933      	cbnz	r3, 8004b68 <_free_r+0x2c>
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6014      	str	r4, [r2, #0]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b64:	f000 b83a 	b.w	8004bdc <__malloc_unlock>
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d908      	bls.n	8004b7e <_free_r+0x42>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf01      	itttt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	1809      	addeq	r1, r1, r0
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	e7ed      	b.n	8004b5a <_free_r+0x1e>
 8004b7e:	461a      	mov	r2, r3
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b10b      	cbz	r3, 8004b88 <_free_r+0x4c>
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d9fa      	bls.n	8004b7e <_free_r+0x42>
 8004b88:	6811      	ldr	r1, [r2, #0]
 8004b8a:	1850      	adds	r0, r2, r1
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d10b      	bne.n	8004ba8 <_free_r+0x6c>
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	4401      	add	r1, r0
 8004b94:	1850      	adds	r0, r2, r1
 8004b96:	4283      	cmp	r3, r0
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	d1e0      	bne.n	8004b5e <_free_r+0x22>
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	4408      	add	r0, r1
 8004ba4:	6010      	str	r0, [r2, #0]
 8004ba6:	e7da      	b.n	8004b5e <_free_r+0x22>
 8004ba8:	d902      	bls.n	8004bb0 <_free_r+0x74>
 8004baa:	230c      	movs	r3, #12
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	e7d6      	b.n	8004b5e <_free_r+0x22>
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	1821      	adds	r1, r4, r0
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	bf04      	itt	eq
 8004bb8:	6819      	ldreq	r1, [r3, #0]
 8004bba:	685b      	ldreq	r3, [r3, #4]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	bf04      	itt	eq
 8004bc0:	1809      	addeq	r1, r1, r0
 8004bc2:	6021      	streq	r1, [r4, #0]
 8004bc4:	6054      	str	r4, [r2, #4]
 8004bc6:	e7ca      	b.n	8004b5e <_free_r+0x22>
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	20001bf8 	.word	0x20001bf8

08004bd0 <__malloc_lock>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	@ (8004bd8 <__malloc_lock+0x8>)
 8004bd2:	f7ff bfa3 	b.w	8004b1c <__retarget_lock_acquire_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	20001bf4 	.word	0x20001bf4

08004bdc <__malloc_unlock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	@ (8004be4 <__malloc_unlock+0x8>)
 8004bde:	f7ff bf9e 	b.w	8004b1e <__retarget_lock_release_recursive>
 8004be2:	bf00      	nop
 8004be4:	20001bf4 	.word	0x20001bf4

08004be8 <_init>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr

08004bf4 <_fini>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr
