
PRCU_with_FreeRTOS_2024_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007e50  08007e50  00008e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007f1c  08007f1c  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f1c  08007f1c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f20  08007f20  00008f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007f24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  20000060  08007f84  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  08007f84  00009d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db57  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce1  00000000  00000000  00026be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c7  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f15  00000000  00000000  0002d877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afbe  00000000  00000000  0003178c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ed4  00000000  00000000  0004c74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e61e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000778c  00000000  00000000  0012e664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00135df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e38 	.word	0x08007e38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007e38 	.word	0x08007e38

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fd97 	bl	8001542 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f84c 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f9b2 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a1c:	f000 f894 	bl	8000b48 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a20:	f000 f90a 	bl	8000c38 <MX_ADC2_Init>
  MX_SPI2_Init();
 8000a24:	f000 f96e 	bl	8000d04 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADCs
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); // Calibrates ADC for low pressure sensor
 8000a28:	217f      	movs	r1, #127	@ 0x7f
 8000a2a:	4815      	ldr	r0, [pc, #84]	@ (8000a80 <main+0x74>)
 8000a2c:	f002 f860 	bl	8002af0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED); // Calibrates ADC for high pressure sensor
 8000a30:	217f      	movs	r1, #127	@ 0x7f
 8000a32:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <main+0x78>)
 8000a34:	f002 f85c 	bl	8002af0 <HAL_ADCEx_Calibration_Start>

  // Pull SPI chip select line high
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3e:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <main+0x7c>)
 8000a40:	f002 fbbe 	bl	80031c0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a44:	f004 fb5e 	bl	8005104 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_read_senso */
  task_read_sensoHandle = osThreadNew(Start_task_read_sensors, NULL, &task_read_senso_attributes);
 8000a48:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <main+0x80>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4810      	ldr	r0, [pc, #64]	@ (8000a90 <main+0x84>)
 8000a4e:	f004 fba3 	bl	8005198 <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <main+0x88>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of task_LED_Blink */
  task_LED_BlinkHandle = osThreadNew(Start_task_LED_Blink, NULL, &task_LED_Blink_attributes);
 8000a58:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <main+0x8c>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	480f      	ldr	r0, [pc, #60]	@ (8000a9c <main+0x90>)
 8000a5e:	f004 fb9b 	bl	8005198 <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <main+0x94>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* creation of task_safety */
  task_safetyHandle = osThreadNew(Start_task_safety, NULL, &task_safety_attributes);
 8000a68:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <main+0x98>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	480e      	ldr	r0, [pc, #56]	@ (8000aa8 <main+0x9c>)
 8000a6e:	f004 fb93 	bl	8005198 <osThreadNew>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <main+0xa0>)
 8000a76:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a78:	f004 fb68 	bl	800514c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <main+0x70>
 8000a80:	2000007c 	.word	0x2000007c
 8000a84:	200000e8 	.word	0x200000e8
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	08007e94 	.word	0x08007e94
 8000a90:	08000e49 	.word	0x08000e49
 8000a94:	200001b8 	.word	0x200001b8
 8000a98:	08007eb8 	.word	0x08007eb8
 8000a9c:	08001035 	.word	0x08001035
 8000aa0:	200001bc 	.word	0x200001bc
 8000aa4:	08007edc 	.word	0x08007edc
 8000aa8:	080010f9 	.word	0x080010f9
 8000aac:	200001c0 	.word	0x200001c0

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	@ 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2238      	movs	r2, #56	@ 0x38
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f007 f8d2 	bl	8007c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ad6:	f002 fb8b 	bl	80031f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2340      	movs	r3, #64	@ 0x40
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000af4:	234b      	movs	r3, #75	@ 0x4b
 8000af6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fc25 	bl	8003358 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b14:	f000 fb2e 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 ff23 	bl	800397c <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b3c:	f000 fb1a 	bl	8001174 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	@ 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f007 f881 	bl	8007c68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b66:	4b32      	ldr	r3, [pc, #200]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b76:	4b2e      	ldr	r3, [pc, #184]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b82:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b88:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b94:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd0:	4817      	ldr	r0, [pc, #92]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bd2:	f000 ff3f 	bl	8001a54 <HAL_ADC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bdc:	f000 faca 	bl	8001174 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bec:	f001 ffe2 	bl	8002bb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bf6:	f000 fabd 	bl	8001174 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_ADC1_Init+0xec>)
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000c02:	2304      	movs	r3, #4
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c06:	237f      	movs	r3, #127	@ 0x7f
 8000c08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000c18:	f001 fa42 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c22:	f000 faa7 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	@ 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000007c 	.word	0x2000007c
 8000c34:	32601000 	.word	0x32601000

08000c38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f007 f80f 	bl	8007c68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cfc <MX_ADC2_Init+0xc4>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c56:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000c64:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cb2:	4811      	ldr	r0, [pc, #68]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000cb4:	f000 fece 	bl	8001a54 <HAL_ADC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000cbe:	f000 fa59 	bl	8001174 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_ADC2_Init+0xc8>)
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cce:	237f      	movs	r3, #127	@ 0x7f
 8000cd0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <MX_ADC2_Init+0xc0>)
 8000ce0:	f001 f9de 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000cea:	f000 fa43 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000e8 	.word	0x200000e8
 8000cfc:	50000100 	.word	0x50000100
 8000d00:	36902000 	.word	0x36902000

08000d04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <MX_SPI2_Init+0x78>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d1e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000d22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d52:	2207      	movs	r2, #7
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_SPI2_Init+0x74>)
 8000d64:	f003 fa32 	bl	80041cc <HAL_SPI_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 fa01 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000154 	.word	0x20000154
 8000d7c:	40003800 	.word	0x40003800

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <MX_GPIO_Init+0xc0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a29      	ldr	r2, [pc, #164]	@ (8000e40 <MX_GPIO_Init+0xc0>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <MX_GPIO_Init+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <MX_GPIO_Init+0xc0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4a23      	ldr	r2, [pc, #140]	@ (8000e40 <MX_GPIO_Init+0xc0>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_GPIO_Init+0xc0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dce:	f002 f9f7 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|PRS_Ready_Pin|System_Ready_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8000dd8:	481a      	ldr	r0, [pc, #104]	@ (8000e44 <MX_GPIO_Init+0xc4>)
 8000dda:	f002 f9f1 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Valve_Enable_Pin */
  GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8000dde:	2340      	movs	r3, #64	@ 0x40
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000de6:	2302      	movs	r3, #2
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f002 f860 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <MX_GPIO_Init+0xc4>)
 8000e16:	f002 f851 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
  GPIO_InitStruct.Pin = PRS_Ready_Pin|System_Ready_Pin;
 8000e1a:	23c0      	movs	r3, #192	@ 0xc0
 8000e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e22:	2302      	movs	r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_GPIO_Init+0xc4>)
 8000e32:	f002 f843 	bl	8002ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400

08000e48 <Start_task_read_sensors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_task_read_sensors */
void Start_task_read_sensors(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	6078      	str	r0, [r7, #4]

	  // Define pod pressure sensor (KP264 on PCB) variables
	  uint16_t SPI_buffer; // Buffer to hold SPI data from pod pressure sensor

	  // BEGIN Read high pressure ADC ----------------------------------------------------------------------------------------------
	  HAL_ADC_Start(&hadc2); // Start the ADC
 8000e50:	4869      	ldr	r0, [pc, #420]	@ (8000ff8 <Start_task_read_sensors+0x1b0>)
 8000e52:	f000 ff83 	bl	8001d5c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1); // Wait for ADC to complete conversion
 8000e56:	2101      	movs	r1, #1
 8000e58:	4867      	ldr	r0, [pc, #412]	@ (8000ff8 <Start_task_read_sensors+0x1b0>)
 8000e5a:	f001 f83b 	bl	8001ed4 <HAL_ADC_PollForConversion>
	  high_pressure_raw = HAL_ADC_GetValue(&hadc2); // Get value from ADC
 8000e5e:	4866      	ldr	r0, [pc, #408]	@ (8000ff8 <Start_task_read_sensors+0x1b0>)
 8000e60:	f001 f910 	bl	8002084 <HAL_ADC_GetValue>
 8000e64:	4603      	mov	r3, r0
 8000e66:	83fb      	strh	r3, [r7, #30]
	  // Use mV instead of V to avoid using floats (because printf wouldn't let me use floats)
	  high_pressure_voltage = (int) high_pressure_raw * 3300 / 4095; // Convert ADC reading to mV
 8000e68:	8bfb      	ldrh	r3, [r7, #30]
 8000e6a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	4a62      	ldr	r2, [pc, #392]	@ (8000ffc <Start_task_read_sensors+0x1b4>)
 8000e74:	fb82 1203 	smull	r1, r2, r2, r3
 8000e78:	441a      	add	r2, r3
 8000e7a:	12d2      	asrs	r2, r2, #11
 8000e7c:	17db      	asrs	r3, r3, #31
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	61bb      	str	r3, [r7, #24]
	  if (high_pressure_voltage <= 120 * 0.004 * 1000) { // Check that the ADC is not outputting 4 mA or less (sensor minimum output)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e88:	dc03      	bgt.n	8000e92 <Start_task_read_sensors+0x4a>
		  high_pressure = 0; // Bar
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <Start_task_read_sensors+0x1b8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e022      	b.n	8000ed8 <Start_task_read_sensors+0x90>
	  }
	  else {
		  high_pressure = (high_pressure_voltage - 120 * 0.004 * 1000)* 250 / (120 * (0.02 - 0.004) * 1000); // Bar
 8000e92:	69b8      	ldr	r0, [r7, #24]
 8000e94:	f7ff fb16 	bl	80004c4 <__aeabi_i2d>
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b59      	ldr	r3, [pc, #356]	@ (8001004 <Start_task_read_sensors+0x1bc>)
 8000e9e:	f7ff f9c3 	bl	8000228 <__aeabi_dsub>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b56      	ldr	r3, [pc, #344]	@ (8001008 <Start_task_read_sensors+0x1c0>)
 8000eb0:	f7ff fb72 	bl	8000598 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	4b52      	ldr	r3, [pc, #328]	@ (800100c <Start_task_read_sensors+0x1c4>)
 8000ec2:	f7ff fc93 	bl	80007ec <__aeabi_ddiv>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fd75 	bl	80009bc <__aeabi_d2iz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8001000 <Start_task_read_sensors+0x1b8>)
 8000ed6:	6013      	str	r3, [r2, #0]
	  }
	  // END Read high pressure ADC ------------------------------------------------------------------------------------------------

	  // BEGIN Read low pressure ADC -----------------------------------------------------------------------------------------------
	  HAL_ADC_Start(&hadc1); // Start the ADC
 8000ed8:	484d      	ldr	r0, [pc, #308]	@ (8001010 <Start_task_read_sensors+0x1c8>)
 8000eda:	f000 ff3f 	bl	8001d5c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1); // Wait for ADC to complete conversion
 8000ede:	2101      	movs	r1, #1
 8000ee0:	484b      	ldr	r0, [pc, #300]	@ (8001010 <Start_task_read_sensors+0x1c8>)
 8000ee2:	f000 fff7 	bl	8001ed4 <HAL_ADC_PollForConversion>
	  low_pressure_raw = HAL_ADC_GetValue(&hadc1); // Get value from ADC
 8000ee6:	484a      	ldr	r0, [pc, #296]	@ (8001010 <Start_task_read_sensors+0x1c8>)
 8000ee8:	f001 f8cc 	bl	8002084 <HAL_ADC_GetValue>
 8000eec:	4603      	mov	r3, r0
 8000eee:	82fb      	strh	r3, [r7, #22]
	  // Use mV instead of V to avoid using floats (because printf wouldn't let me use floats)
	  low_pressure_voltage = (int) low_pressure_raw * 3300 / (4095); // Convert ADC reading to mV
 8000ef0:	8afb      	ldrh	r3, [r7, #22]
 8000ef2:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4a40      	ldr	r2, [pc, #256]	@ (8000ffc <Start_task_read_sensors+0x1b4>)
 8000efc:	fb82 1203 	smull	r1, r2, r2, r3
 8000f00:	441a      	add	r2, r3
 8000f02:	12d2      	asrs	r2, r2, #11
 8000f04:	17db      	asrs	r3, r3, #31
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	613b      	str	r3, [r7, #16]
	  if (low_pressure_voltage <= 120 * 0.004 * 1000) { // Check that the ADC is not outputting 4 mA or less (sensor minimum output)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f10:	dc03      	bgt.n	8000f1a <Start_task_read_sensors+0xd2>
		  low_pressure = 0; // mBar
 8000f12:	4b40      	ldr	r3, [pc, #256]	@ (8001014 <Start_task_read_sensors+0x1cc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e028      	b.n	8000f6c <Start_task_read_sensors+0x124>
	  }
	  else {
		  low_pressure = ((float) low_pressure_voltage - 120 * 0.004 * 1000) * 10000 / (120 * (0.02 - 0.004) * 1000); // mBar
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f24:	ee17 0a90 	vmov	r0, s15
 8000f28:	f7ff fade 	bl	80004e8 <__aeabi_f2d>
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b34      	ldr	r3, [pc, #208]	@ (8001004 <Start_task_read_sensors+0x1bc>)
 8000f32:	f7ff f979 	bl	8000228 <__aeabi_dsub>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	a32c      	add	r3, pc, #176	@ (adr r3, 8000ff0 <Start_task_read_sensors+0x1a8>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff fb28 	bl	8000598 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <Start_task_read_sensors+0x1c4>)
 8000f56:	f7ff fc49 	bl	80007ec <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fd2b 	bl	80009bc <__aeabi_d2iz>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a2a      	ldr	r2, [pc, #168]	@ (8001014 <Start_task_read_sensors+0x1cc>)
 8000f6a:	6013      	str	r3, [r2, #0]
	  }
	  // END Read low pressure ADC -------------------------------------------------------------------------------------------------

	  // BEGIN Read pod pressure sensor (KP264 on PCB) -----------------------------------------------------------------------------
	  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET); // Pull SPI chip select line low to begin communication
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f72:	4829      	ldr	r0, [pc, #164]	@ (8001018 <Start_task_read_sensors+0x1d0>)
 8000f74:	f002 f924 	bl	80031c0 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure, (uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
 8000f78:	f107 020e 	add.w	r2, r7, #14
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4926      	ldr	r1, [pc, #152]	@ (800101c <Start_task_read_sensors+0x1d4>)
 8000f84:	4826      	ldr	r0, [pc, #152]	@ (8001020 <Start_task_read_sensors+0x1d8>)
 8000f86:	f003 f9cc 	bl	8004322 <HAL_SPI_TransmitReceive>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <Start_task_read_sensors+0x14e>
		  pod_pressure = 22;
 8000f90:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <Start_task_read_sensors+0x1dc>)
 8000f92:	4a25      	ldr	r2, [pc, #148]	@ (8001028 <Start_task_read_sensors+0x1e0>)
 8000f94:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET); // Pull SPI chip select line high to end communication
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9c:	481e      	ldr	r0, [pc, #120]	@ (8001018 <Start_task_read_sensors+0x1d0>)
 8000f9e:	f002 f90f 	bl	80031c0 <HAL_GPIO_WritePin>
	  // Check if no errors were detected
	  if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000fa8:	4013      	ands	r3, r2
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d117      	bne.n	8000fe4 <Start_task_read_sensors+0x19c>
		  // Get the pressure data using a bit mask and right shift operator to get rid of parity bit
		  SPI_buffer = (SPI_buffer & data_mask) >> 1;
 8000fb4:	89fb      	ldrh	r3, [r7, #14]
 8000fb6:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000fba:	4013      	ands	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	81fb      	strh	r3, [r7, #14]
		  // Convert pressure from LSB to Bar using transfer function from data sheet
		  pod_pressure = ((float)SPI_buffer - offs_p)/S_p; // Bar
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800102c <Start_task_read_sensors+0x1e4>
 8000fd2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fd6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001030 <Start_task_read_sensors+0x1e8>
 8000fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <Start_task_read_sensors+0x1dc>)
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // END Read pod pressure sensor (KP264 on PCB) -------------------------------------------------------------------------------

	  osDelay(100); // Put task to sleep so that other tasks can run
 8000fe4:	2064      	movs	r0, #100	@ 0x64
 8000fe6:	f004 f969 	bl	80052bc <osDelay>
  {
 8000fea:	e731      	b.n	8000e50 <Start_task_read_sensors+0x8>
 8000fec:	f3af 8000 	nop.w
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40c38800 	.word	0x40c38800
 8000ff8:	200000e8 	.word	0x200000e8
 8000ffc:	80080081 	.word	0x80080081
 8001000:	200001c4 	.word	0x200001c4
 8001004:	407e0000 	.word	0x407e0000
 8001008:	406f4000 	.word	0x406f4000
 800100c:	409e0000 	.word	0x409e0000
 8001010:	2000007c 	.word	0x2000007c
 8001014:	200001c8 	.word	0x200001c8
 8001018:	48000400 	.word	0x48000400
 800101c:	08007f00 	.word	0x08007f00
 8001020:	20000154 	.word	0x20000154
 8001024:	200001cc 	.word	0x200001cc
 8001028:	41b00000 	.word	0x41b00000
 800102c:	c4086666 	.word	0xc4086666
 8001030:	415a3d71 	.word	0x415a3d71

08001034 <Start_task_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_task_LED_Blink */
void Start_task_LED_Blink(void *argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_task_LED_Blink */
  /* Infinite loop */
  for(;;)
  {
		switch (current_state) {
 800103c:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <Start_task_LED_Blink+0xbc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d841      	bhi.n	80010c8 <Start_task_LED_Blink+0x94>
 8001044:	a201      	add	r2, pc, #4	@ (adr r2, 800104c <Start_task_LED_Blink+0x18>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	0800105d 	.word	0x0800105d
 8001050:	0800106f 	.word	0x0800106f
 8001054:	08001095 	.word	0x08001095
 8001058:	080010a7 	.word	0x080010a7
		case Reset:
			// PRS LED always off when in Reset state
			HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	@ 0x40
 8001060:	4824      	ldr	r0, [pc, #144]	@ (80010f4 <Start_task_LED_Blink+0xc0>)
 8001062:	f002 f8ad 	bl	80031c0 <HAL_GPIO_WritePin>
			osDelay(100);
 8001066:	2064      	movs	r0, #100	@ 0x64
 8001068:	f004 f928 	bl	80052bc <osDelay>
			break;
 800106c:	e02c      	b.n	80010c8 <Start_task_LED_Blink+0x94>
		case Idle:
			// PRS LED slow blink when in Idle state
			HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin, SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2140      	movs	r1, #64	@ 0x40
 8001072:	4820      	ldr	r0, [pc, #128]	@ (80010f4 <Start_task_LED_Blink+0xc0>)
 8001074:	f002 f8a4 	bl	80031c0 <HAL_GPIO_WritePin>
			osDelay(500);
 8001078:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800107c:	f004 f91e 	bl	80052bc <osDelay>
			HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	@ 0x40
 8001084:	481b      	ldr	r0, [pc, #108]	@ (80010f4 <Start_task_LED_Blink+0xc0>)
 8001086:	f002 f89b 	bl	80031c0 <HAL_GPIO_WritePin>
			osDelay(500);
 800108a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800108e:	f004 f915 	bl	80052bc <osDelay>
			break;
 8001092:	e019      	b.n	80010c8 <Start_task_LED_Blink+0x94>
		case Active:
			// PRS LED always on when in Active state
			HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2140      	movs	r1, #64	@ 0x40
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <Start_task_LED_Blink+0xc0>)
 800109a:	f002 f891 	bl	80031c0 <HAL_GPIO_WritePin>
			osDelay(100);
 800109e:	2064      	movs	r0, #100	@ 0x64
 80010a0:	f004 f90c 	bl	80052bc <osDelay>
			break;
 80010a4:	e010      	b.n	80010c8 <Start_task_LED_Blink+0x94>
		case Emergency:
			// PRS LED fast blink when in Emergency state
			HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2140      	movs	r1, #64	@ 0x40
 80010aa:	4812      	ldr	r0, [pc, #72]	@ (80010f4 <Start_task_LED_Blink+0xc0>)
 80010ac:	f002 f888 	bl	80031c0 <HAL_GPIO_WritePin>
			osDelay(100);
 80010b0:	2064      	movs	r0, #100	@ 0x64
 80010b2:	f004 f903 	bl	80052bc <osDelay>
			HAL_GPIO_WritePin(GPIOB, PRS_Ready_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	@ 0x40
 80010ba:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <Start_task_LED_Blink+0xc0>)
 80010bc:	f002 f880 	bl	80031c0 <HAL_GPIO_WritePin>
			osDelay(100);
 80010c0:	2064      	movs	r0, #100	@ 0x64
 80010c2:	f004 f8fb 	bl	80052bc <osDelay>
			break;
 80010c6:	bf00      	nop
		}

		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2140      	movs	r1, #64	@ 0x40
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f002 f876 	bl	80031c0 <HAL_GPIO_WritePin>
		osDelay(100);
 80010d4:	2064      	movs	r0, #100	@ 0x64
 80010d6:	f004 f8f1 	bl	80052bc <osDelay>
		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f002 f86d 	bl	80031c0 <HAL_GPIO_WritePin>
		osDelay(100);
 80010e6:	2064      	movs	r0, #100	@ 0x64
 80010e8:	f004 f8e8 	bl	80052bc <osDelay>
		switch (current_state) {
 80010ec:	e7a6      	b.n	800103c <Start_task_LED_Blink+0x8>
 80010ee:	bf00      	nop
 80010f0:	200001d1 	.word	0x200001d1
 80010f4:	48000400 	.word	0x48000400

080010f8 <Start_task_safety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_task_safety */
void Start_task_safety(void *argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_task_safety */
  /* Infinite loop */
  for(;;)
  {
		switch (next_state) {
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <Start_task_safety+0x50>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d81b      	bhi.n	8001140 <Start_task_safety+0x48>
 8001108:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <Start_task_safety+0x18>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001121 	.word	0x08001121
 8001114:	08001129 	.word	0x08001129
 8001118:	08001131 	.word	0x08001131
 800111c:	08001139 	.word	0x08001139
		case Reset:
			current_state = Reset;
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <Start_task_safety+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
			break;
 8001126:	e00b      	b.n	8001140 <Start_task_safety+0x48>
		case Idle:
			current_state = Idle;
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <Start_task_safety+0x54>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
			break;
 800112e:	e007      	b.n	8001140 <Start_task_safety+0x48>
		case Active:
			current_state = Active;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <Start_task_safety+0x54>)
 8001132:	2202      	movs	r2, #2
 8001134:	701a      	strb	r2, [r3, #0]
			break;
 8001136:	e003      	b.n	8001140 <Start_task_safety+0x48>
		case Emergency:
			current_state = Emergency;
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <Start_task_safety+0x54>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
			break;
 800113e:	bf00      	nop
		}

		osDelay(100); // put task to sleep so that other tasks can run
 8001140:	2064      	movs	r0, #100	@ 0x64
 8001142:	f004 f8bb 	bl	80052bc <osDelay>
		switch (next_state) {
 8001146:	e7db      	b.n	8001100 <Start_task_safety+0x8>
 8001148:	200001d0 	.word	0x200001d0
 800114c:	200001d1 	.word	0x200001d1

08001150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001162:	f000 fa07 	bl	8001574 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40001000 	.word	0x40001000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <Error_Handler+0x8>

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_MspInit+0x50>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <HAL_MspInit+0x50>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6613      	str	r3, [r2, #96]	@ 0x60
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <HAL_MspInit+0x50>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_MspInit+0x50>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <HAL_MspInit+0x50>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_MspInit+0x50>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	210f      	movs	r1, #15
 80011ba:	f06f 0001 	mvn.w	r0, #1
 80011be:	f001 fe55 	bl	8002e6c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011c2:	f002 f8b9 	bl	8003338 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09c      	sub	sp, #112	@ 0x70
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	2244      	movs	r2, #68	@ 0x44
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f006 fd37 	bl	8007c68 <memset>
  if(hadc->Instance==ADC1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001202:	d13d      	bne.n	8001280 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001208:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800120a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800120e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fde9 	bl	8003dec <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001220:	f7ff ffa8 	bl	8001174 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001224:	4b3a      	ldr	r3, [pc, #232]	@ (8001310 <HAL_ADC_MspInit+0x13c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a39      	ldr	r2, [pc, #228]	@ (8001310 <HAL_ADC_MspInit+0x13c>)
 800122c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800122e:	4b38      	ldr	r3, [pc, #224]	@ (8001310 <HAL_ADC_MspInit+0x13c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10b      	bne.n	800124e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a36      	ldr	r2, [pc, #216]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 800123c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b34      	ldr	r3, [pc, #208]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b31      	ldr	r3, [pc, #196]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a30      	ldr	r2, [pc, #192]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 8001266:	2302      	movs	r3, #2
 8001268:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001276:	4619      	mov	r1, r3
 8001278:	4827      	ldr	r0, [pc, #156]	@ (8001318 <HAL_ADC_MspInit+0x144>)
 800127a:	f001 fe1f 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800127e:	e042      	b.n	8001306 <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a25      	ldr	r2, [pc, #148]	@ (800131c <HAL_ADC_MspInit+0x148>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13d      	bne.n	8001306 <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800128a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800128e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001290:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001294:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fda6 	bl	8003dec <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 80012a6:	f7ff ff65 	bl	8001174 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_ADC_MspInit+0x13c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <HAL_ADC_MspInit+0x13c>)
 80012b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012b4:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_ADC_MspInit+0x13c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10b      	bne.n	80012d4 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 80012c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <HAL_ADC_MspInit+0x140>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 80012ec:	2320      	movs	r3, #32
 80012ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001302:	f001 fddb 	bl	8002ebc <HAL_GPIO_Init>
}
 8001306:	bf00      	nop
 8001308:	3770      	adds	r7, #112	@ 0x70
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001d4 	.word	0x200001d4
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400
 800131c:	50000100 	.word	0x50000100

08001320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_SPI_MspInit+0x7c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d128      	bne.n	8001394 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_SPI_MspInit+0x80>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <HAL_SPI_MspInit+0x80>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6593      	str	r3, [r2, #88]	@ 0x58
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_SPI_MspInit+0x80>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_SPI_MspInit+0x80>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <HAL_SPI_MspInit+0x80>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_SPI_MspInit+0x80>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001372:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001384:	2305      	movs	r3, #5
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <HAL_SPI_MspInit+0x84>)
 8001390:	f001 fd94 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	@ 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40003800 	.word	0x40003800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	@ 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <HAL_InitTick+0xc4>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013bc:	4a2b      	ldr	r2, [pc, #172]	@ (800146c <HAL_InitTick+0xc4>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <HAL_InitTick+0xc4>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d0:	f107 020c 	add.w	r2, r7, #12
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fc8e 	bl	8003cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013e0:	f002 fc76 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 80013e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e8:	4a21      	ldr	r2, [pc, #132]	@ (8001470 <HAL_InitTick+0xc8>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0c9b      	lsrs	r3, r3, #18
 80013f0:	3b01      	subs	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <HAL_InitTick+0xcc>)
 80013f6:	4a20      	ldr	r2, [pc, #128]	@ (8001478 <HAL_InitTick+0xd0>)
 80013f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_InitTick+0xcc>)
 80013fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001400:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001402:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <HAL_InitTick+0xcc>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_InitTick+0xcc>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <HAL_InitTick+0xcc>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001414:	4817      	ldr	r0, [pc, #92]	@ (8001474 <HAL_InitTick+0xcc>)
 8001416:	f003 fb0b 	bl	8004a30 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11b      	bne.n	8001460 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001428:	4812      	ldr	r0, [pc, #72]	@ (8001474 <HAL_InitTick+0xcc>)
 800142a:	f003 fb63 	bl	8004af4 <HAL_TIM_Base_Start_IT>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001434:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001438:	2b00      	cmp	r3, #0
 800143a:	d111      	bne.n	8001460 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800143c:	2036      	movs	r0, #54	@ 0x36
 800143e:	f001 fd2f 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d808      	bhi.n	800145a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	2036      	movs	r0, #54	@ 0x36
 800144e:	f001 fd0d 	bl	8002e6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <HAL_InitTick+0xd4>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e002      	b.n	8001460 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001464:	4618      	mov	r0, r3
 8001466:	3730      	adds	r7, #48	@ 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	431bde83 	.word	0x431bde83
 8001474:	200001d8 	.word	0x200001d8
 8001478:	40001000 	.word	0x40001000
 800147c:	20000004 	.word	0x20000004

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MemManage_Handler+0x4>

08001498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM6_DAC_IRQHandler+0x10>)
 80014be:	f003 fb83 	bl	8004bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001d8 	.word	0x200001d8

080014cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f0:	480d      	ldr	r0, [pc, #52]	@ (8001528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f4:	f7ff ffea 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopForever+0x6>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopForever+0xe>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopForever+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f006 fc01 	bl	8007d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001522:	f7ff fa73 	bl	8000a0c <main>

08001526 <LoopForever>:

LoopForever:
    b LoopForever
 8001526:	e7fe      	b.n	8001526 <LoopForever>
  ldr   r0, =_estack
 8001528:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001534:	08007f24 	.word	0x08007f24
  ldr r2, =_sbss
 8001538:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800153c:	20001d50 	.word	0x20001d50

08001540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_2_IRQHandler>

08001542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f001 fc82 	bl	8002e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001552:	200f      	movs	r0, #15
 8001554:	f7ff ff28 	bl	80013a8 <HAL_InitTick>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e001      	b.n	8001568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001564:	f7ff fe0c 	bl	8001180 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001568:	79fb      	ldrb	r3, [r7, #7]

}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_IncTick+0x1c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_IncTick+0x20>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <HAL_IncTick+0x1c>)
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000224 	.word	0x20000224
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000224 	.word	0x20000224

080015b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3360      	adds	r3, #96	@ 0x60
 800162a:	461a      	mov	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <LL_ADC_SetOffset+0x44>)
 800163a:	4013      	ands	r3, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	4313      	orrs	r3, r2
 8001648:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	03fff000 	.word	0x03fff000

08001660 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3360      	adds	r3, #96	@ 0x60
 800166e:	461a      	mov	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3360      	adds	r3, #96	@ 0x60
 800169c:	461a      	mov	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b087      	sub	sp, #28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3360      	adds	r3, #96	@ 0x60
 80016d2:	461a      	mov	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3360      	adds	r3, #96	@ 0x60
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	615a      	str	r2, [r3, #20]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800177a:	b480      	push	{r7}
 800177c:	b087      	sub	sp, #28
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3330      	adds	r3, #48	@ 0x30
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	4413      	add	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	211f      	movs	r1, #31
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	f003 011f 	and.w	r1, r3, #31
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3314      	adds	r3, #20
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	0e5b      	lsrs	r3, r3, #25
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0d1b      	lsrs	r3, r3, #20
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2107      	movs	r1, #7
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0d1b      	lsrs	r3, r3, #20
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0318 	and.w	r3, r3, #24
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <LL_ADC_SetChannelSingleDiff+0x44>)
 800184c:	40d9      	lsrs	r1, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	400b      	ands	r3, r1
 8001852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	0007ffff 	.word	0x0007ffff

08001870 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6093      	str	r3, [r2, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001904:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001908:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001930:	d101      	bne.n	8001936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800197c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001980:	f043 0202 	orr.w	r2, r3, #2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <LL_ADC_IsEnabled+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_IsEnabled+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_IsDisableOngoing+0x18>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_IsDisableOngoing+0x1a>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019f4:	f043 0204 	orr.w	r2, r3, #4
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d101      	bne.n	8001a20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e167      	b.n	8001d3e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fba9 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff19 	bl	80018cc <LL_ADC_IsDeepPowerDownEnabled>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff feff 	bl	80018a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff34 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff18 	bl	80018f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ac4:	4ba0      	ldr	r3, [pc, #640]	@ (8001d48 <HAL_ADC_Init+0x2f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	4aa0      	ldr	r2, [pc, #640]	@ (8001d4c <HAL_ADC_Init+0x2f8>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff16 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	f043 0210 	orr.w	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff76 	bl	8001a08 <LL_ADC_REG_IsConversionOngoing>
 8001b1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 8100 	bne.w	8001d2c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80fc 	bne.w	8001d2c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff23 	bl	8001994 <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d111      	bne.n	8001b78 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b58:	f7ff ff1c 	bl	8001994 <LL_ADC_IsEnabled>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	487c      	ldr	r0, [pc, #496]	@ (8001d50 <HAL_ADC_Init+0x2fc>)
 8001b60:	f7ff ff18 	bl	8001994 <LL_ADC_IsEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4323      	orrs	r3, r4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4878      	ldr	r0, [pc, #480]	@ (8001d54 <HAL_ADC_Init+0x300>)
 8001b74:	f7ff fd1c 	bl	80015b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7f5b      	ldrb	r3, [r3, #29]
 8001b7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	045b      	lsls	r3, r3, #17
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b60      	ldr	r3, [pc, #384]	@ (8001d58 <HAL_ADC_Init+0x304>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff15 	bl	8001a2e <LL_ADC_INJ_IsConversionOngoing>
 8001c04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d16d      	bne.n	8001ce8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d16a      	bne.n	8001ce8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c2e:	f023 0302 	bic.w	r3, r3, #2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d017      	beq.n	8001c74 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6911      	ldr	r1, [r2, #16]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c72:	e013      	b.n	8001c9c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d118      	bne.n	8001cd8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	e007      	b.n	8001ce8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10c      	bne.n	8001d0a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f023 010f 	bic.w	r1, r3, #15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d08:	e007      	b.n	8001d1a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020f 	bic.w	r2, r2, #15
 8001d18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d2a:	e007      	b.n	8001d3c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	053e2d63 	.word	0x053e2d63
 8001d50:	50000100 	.word	0x50000100
 8001d54:	50000300 	.word	0x50000300
 8001d58:	fff04007 	.word	0xfff04007

08001d5c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d64:	4859      	ldr	r0, [pc, #356]	@ (8001ecc <HAL_ADC_Start+0x170>)
 8001d66:	f7ff fd83 	bl	8001870 <LL_ADC_GetMultimode>
 8001d6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe49 	bl	8001a08 <LL_ADC_REG_IsConversionOngoing>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 809f 	bne.w	8001ebc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_Start+0x30>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e09a      	b.n	8001ec2 <HAL_ADC_Start+0x166>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fd73 	bl	8002880 <ADC_Enable>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8086 	bne.w	8001eb2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a44      	ldr	r2, [pc, #272]	@ (8001ed0 <HAL_ADC_Start+0x174>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d002      	beq.n	8001dca <HAL_ADC_Start+0x6e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	e001      	b.n	8001dce <HAL_ADC_Start+0x72>
 8001dca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d002      	beq.n	8001ddc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df4:	d106      	bne.n	8001e04 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfa:	f023 0206 	bic.w	r2, r3, #6
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e02:	e002      	b.n	8001e0a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	221c      	movs	r2, #28
 8001e10:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed0 <HAL_ADC_Start+0x174>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_Start+0xce>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e001      	b.n	8001e2e <HAL_ADC_Start+0xd2>
 8001e2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d008      	beq.n	8001e48 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d002      	beq.n	8001e48 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d114      	bne.n	8001e72 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fdb8 	bl	80019e0 <LL_ADC_REG_StartConversion>
 8001e70:	e026      	b.n	8001ec0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <HAL_ADC_Start+0x174>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Start+0x132>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e001      	b.n	8001e92 <HAL_ADC_Start+0x136>
 8001e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e92:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ea8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eb0:	e006      	b.n	8001ec0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001eba:	e001      	b.n	8001ec0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	50000300 	.word	0x50000300
 8001ed0:	50000100 	.word	0x50000100

08001ed4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ede:	4867      	ldr	r0, [pc, #412]	@ (800207c <HAL_ADC_PollForConversion+0x1a8>)
 8001ee0:	f7ff fcc6 	bl	8001870 <LL_ADC_GetMultimode>
 8001ee4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d102      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e02a      	b.n	8001f4a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d002      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	d111      	bne.n	8001f2a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0a6      	b.n	8002072 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f24:	2304      	movs	r3, #4
 8001f26:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f28:	e00f      	b.n	8001f4a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f2a:	4854      	ldr	r0, [pc, #336]	@ (800207c <HAL_ADC_PollForConversion+0x1a8>)
 8001f2c:	f7ff fcae 	bl	800188c <LL_ADC_GetMultiDMATransfer>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e095      	b.n	8002072 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f46:	2304      	movs	r3, #4
 8001f48:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f4a:	f7ff fb25 	bl	8001598 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f50:	e021      	b.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f58:	d01d      	beq.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f5a:	f7ff fb1d 	bl	8001598 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <HAL_ADC_PollForConversion+0x9c>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d112      	bne.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10b      	bne.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e06d      	b.n	8002072 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0d6      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbcd 	bl	8001754 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7f5b      	ldrb	r3, [r3, #29]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d111      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <HAL_ADC_PollForConversion+0x1ac>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d002      	beq.n	800200a <HAL_ADC_PollForConversion+0x136>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e001      	b.n	800200e <HAL_ADC_PollForConversion+0x13a>
 800200a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4293      	cmp	r3, r2
 8002014:	d008      	beq.n	8002028 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d002      	beq.n	8002028 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b09      	cmp	r3, #9
 8002026:	d104      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e00d      	b.n	800204e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <HAL_ADC_PollForConversion+0x1ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d002      	beq.n	8002042 <HAL_ADC_PollForConversion+0x16e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e001      	b.n	8002046 <HAL_ADC_PollForConversion+0x172>
 8002042:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002046:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d104      	bne.n	800205e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2208      	movs	r2, #8
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e008      	b.n	8002070 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	220c      	movs	r2, #12
 800206e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	50000300 	.word	0x50000300
 8002080:	50000100 	.word	0x50000100

08002084 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0b6      	sub	sp, #216	@ 0xd8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x22>
 80020be:	2302      	movs	r3, #2
 80020c0:	e3c8      	b.n	8002854 <HAL_ADC_ConfigChannel+0x7b4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fc9a 	bl	8001a08 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 83ad 	bne.w	8002836 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f7ff fb46 	bl	800177a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fc88 	bl	8001a08 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc94 	bl	8001a2e <LL_ADC_INJ_IsConversionOngoing>
 8002106:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 81d9 	bne.w	80024c6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 81d4 	bne.w	80024c6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002126:	d10f      	bne.n	8002148 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	4619      	mov	r1, r3
 8002134:	f7ff fb4d 	bl	80017d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff faf4 	bl	800172e <LL_ADC_SetSamplingTimeCommonConfig>
 8002146:	e00e      	b.n	8002166 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	461a      	mov	r2, r3
 8002156:	f7ff fb3c 	bl	80017d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fae4 	bl	800172e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d022      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6919      	ldr	r1, [r3, #16]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002198:	f7ff fa3e 	bl	8001618 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff fa8a 	bl	80016c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x124>
 80021be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021c2:	e000      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x126>
 80021c4:	2300      	movs	r3, #0
 80021c6:	461a      	mov	r2, r3
 80021c8:	f7ff fa96 	bl	80016f8 <LL_ADC_SetOffsetSaturation>
 80021cc:	e17b      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fa43 	bl	8001660 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x15a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fa38 	bl	8001660 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	e01e      	b.n	8002238 <HAL_ADC_ConfigChannel+0x198>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fa2d 	bl	8001660 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800221c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e004      	b.n	8002236 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800222c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1b0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	e018      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1e2>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800226c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e004      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002278:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002282:	429a      	cmp	r2, r3
 8002284:	d106      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f9fc 	bl	800168c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f9e0 	bl	8001660 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x220>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f9d5 	bl	8001660 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	e01e      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f9ca 	bl	8001660 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80022de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80022e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80022f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x276>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	e018      	b.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800232a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800232e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002332:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e004      	b.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800233e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f999 	bl	800168c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f97d 	bl	8001660 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x2e6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f972 	bl	8001660 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	e01e      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x324>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2102      	movs	r1, #2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f967 	bl	8001660 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80023a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80023ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80023b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x33c>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	e016      	b.n	800240a <HAL_ADC_ConfigChannel+0x36a>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80023ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80023f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e004      	b.n	800240a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002400:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800240a:	429a      	cmp	r2, r3
 800240c:	d106      	bne.n	800241c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f938 	bl	800168c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2103      	movs	r1, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f91c 	bl	8001660 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x3a8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2103      	movs	r1, #3
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f911 	bl	8001660 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 021f 	and.w	r2, r3, #31
 8002446:	e017      	b.n	8002478 <HAL_ADC_ConfigChannel+0x3d8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2103      	movs	r1, #3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f906 	bl	8001660 <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002462:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800246e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x3f0>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	e011      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800249e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80024a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80024ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	2103      	movs	r1, #3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f8e3 	bl	800168c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fa62 	bl	8001994 <LL_ADC_IsEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 8140 	bne.w	8002758 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f7ff f99f 	bl	8001828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4a8f      	ldr	r2, [pc, #572]	@ (800272c <HAL_ADC_ConfigChannel+0x68c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	f040 8131 	bne.w	8002758 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x47e>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	3301      	adds	r3, #1
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b09      	cmp	r3, #9
 8002514:	bf94      	ite	ls
 8002516:	2301      	movls	r3, #1
 8002518:	2300      	movhi	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e019      	b.n	8002552 <HAL_ADC_ConfigChannel+0x4b2>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800252c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800252e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e003      	b.n	8002542 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800253a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2b09      	cmp	r3, #9
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002552:	2b00      	cmp	r3, #0
 8002554:	d079      	beq.n	800264a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4d2>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	3301      	adds	r3, #1
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002570:	e015      	b.n	800259e <HAL_ADC_ConfigChannel+0x4fe>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002582:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_ConfigChannel+0x51e>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	e017      	b.n	80025ee <HAL_ADC_ConfigChannel+0x54e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80025cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80025d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e003      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80025da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	ea42 0103 	orr.w	r1, r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x574>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	3301      	adds	r3, #1
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	051b      	lsls	r3, r3, #20
 8002612:	e018      	b.n	8002646 <HAL_ADC_ConfigChannel+0x5a6>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f003 021f 	and.w	r2, r3, #31
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002646:	430b      	orrs	r3, r1
 8002648:	e081      	b.n	800274e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x5c6>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002664:	e015      	b.n	8002692 <HAL_ADC_ConfigChannel+0x5f2>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x612>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	e017      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x642>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	61fb      	str	r3, [r7, #28]
  return result;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <HAL_ADC_ConfigChannel+0x66e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	051b      	lsls	r3, r3, #20
 8002708:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800270c:	e01e      	b.n	800274c <HAL_ADC_ConfigChannel+0x6ac>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	613b      	str	r3, [r7, #16]
  return result;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e006      	b.n	8002738 <HAL_ADC_ConfigChannel+0x698>
 800272a:	bf00      	nop
 800272c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	3b1e      	subs	r3, #30
 8002746:	051b      	lsls	r3, r3, #20
 8002748:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002752:	4619      	mov	r1, r3
 8002754:	f7ff f83d 	bl	80017d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b3f      	ldr	r3, [pc, #252]	@ (800285c <HAL_ADC_ConfigChannel+0x7bc>)
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d071      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002764:	483e      	ldr	r0, [pc, #248]	@ (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002766:	f7fe ff49 	bl	80015fc <LL_ADC_GetCommonPathInternalCh>
 800276a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3c      	ldr	r2, [pc, #240]	@ (8002864 <HAL_ADC_ConfigChannel+0x7c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x6e2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d127      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d121      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002796:	d157      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800279c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027a0:	4619      	mov	r1, r3
 80027a2:	482f      	ldr	r0, [pc, #188]	@ (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 80027a4:	f7fe ff17 	bl	80015d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b30      	ldr	r3, [pc, #192]	@ (800286c <HAL_ADC_ConfigChannel+0x7cc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a30      	ldr	r2, [pc, #192]	@ (8002870 <HAL_ADC_ConfigChannel+0x7d0>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c2:	e002      	b.n	80027ca <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d0:	e03a      	b.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a27      	ldr	r2, [pc, #156]	@ (8002874 <HAL_ADC_ConfigChannel+0x7d4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d113      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_ADC_ConfigChannel+0x7d8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d02a      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	4619      	mov	r1, r3
 80027fc:	4818      	ldr	r0, [pc, #96]	@ (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 80027fe:	f7fe feea 	bl	80015d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002802:	e021      	b.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <HAL_ADC_ConfigChannel+0x7dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d11c      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800280e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_ADC_ConfigChannel+0x7d8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d011      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002828:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800282c:	4619      	mov	r1, r3
 800282e:	480c      	ldr	r0, [pc, #48]	@ (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002830:	f7fe fed1 	bl	80015d6 <LL_ADC_SetCommonPathInternalCh>
 8002834:	e008      	b.n	8002848 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002850:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002854:	4618      	mov	r0, r3
 8002856:	37d8      	adds	r7, #216	@ 0xd8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	80080000 	.word	0x80080000
 8002860:	50000300 	.word	0x50000300
 8002864:	c3210000 	.word	0xc3210000
 8002868:	90c00010 	.word	0x90c00010
 800286c:	20000000 	.word	0x20000000
 8002870:	053e2d63 	.word	0x053e2d63
 8002874:	c7520000 	.word	0xc7520000
 8002878:	50000100 	.word	0x50000100
 800287c:	cb840000 	.word	0xcb840000

08002880 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f87f 	bl	8001994 <LL_ADC_IsEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d169      	bne.n	8002970 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	4b36      	ldr	r3, [pc, #216]	@ (800297c <ADC_Enable+0xfc>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e055      	b.n	8002972 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f83a 	bl	8001944 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028d0:	482b      	ldr	r0, [pc, #172]	@ (8002980 <ADC_Enable+0x100>)
 80028d2:	f7fe fe93 	bl	80015fc <LL_ADC_GetCommonPathInternalCh>
 80028d6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028e0:	4b28      	ldr	r3, [pc, #160]	@ (8002984 <ADC_Enable+0x104>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <ADC_Enable+0x108>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	4613      	mov	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028fa:	e002      	b.n	8002902 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3b01      	subs	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002908:	f7fe fe46 	bl	8001598 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800290e:	e028      	b.n	8002962 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f83d 	bl	8001994 <LL_ADC_IsEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff f80d 	bl	8001944 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800292a:	f7fe fe35 	bl	8001598 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d914      	bls.n	8002962 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d00d      	beq.n	8002962 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e007      	b.n	8002972 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d1cf      	bne.n	8002910 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	8000003f 	.word	0x8000003f
 8002980:	50000300 	.word	0x50000300
 8002984:	20000000 	.word	0x20000000
 8002988:	053e2d63 	.word	0x053e2d63

0800298c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f80e 	bl	80019ba <LL_ADC_IsDisableOngoing>
 800299e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fff5 	bl	8001994 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d047      	beq.n	8002a40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d144      	bne.n	8002a40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030d 	and.w	r3, r3, #13
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10c      	bne.n	80029de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe ffcf 	bl	800196c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2203      	movs	r2, #3
 80029d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029d6:	f7fe fddf 	bl	8001598 <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029dc:	e029      	b.n	8002a32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e023      	b.n	8002a42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029fa:	f7fe fdcd 	bl	8001598 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d914      	bls.n	8002a32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e007      	b.n	8002a42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1dc      	bne.n	80029fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <LL_ADC_IsEnabled>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_IsEnabled+0x18>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_IsEnabled+0x1a>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_StartCalibration>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002a82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_REG_IsConversionOngoing>:
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_ADCEx_Calibration_Start+0x1c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e04d      	b.n	8002ba8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff39 	bl	800298c <ADC_Disable>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d136      	bne.n	8002b92 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	f043 0202 	orr.w	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff96 	bl	8002a70 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b44:	e014      	b.n	8002b70 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	@ (8002bb0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d90d      	bls.n	8002b70 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	f023 0312 	bic.w	r3, r3, #18
 8002b5c:	f043 0210 	orr.w	r2, r3, #16
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e01b      	b.n	8002ba8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff94 	bl	8002aa2 <LL_ADC_IsCalibrationOnGoing>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e2      	bne.n	8002b46 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	f023 0303 	bic.w	r3, r3, #3
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b90:	e005      	b.n	8002b9e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0004de01 	.word	0x0004de01

08002bb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b0a1      	sub	sp, #132	@ 0x84
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e08b      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bde:	2300      	movs	r3, #0
 8002be0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bea:	d102      	bne.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bec:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	e001      	b.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e06a      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff57 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff51 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d14c      	bne.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d149      	bne.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c34:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002c36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d028      	beq.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c52:	035b      	lsls	r3, r3, #13
 8002c54:	430b      	orrs	r3, r1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c60:	f7ff fef3 	bl	8002a4a <LL_ADC_IsEnabled>
 8002c64:	4604      	mov	r4, r0
 8002c66:	4823      	ldr	r0, [pc, #140]	@ (8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c68:	f7ff feef 	bl	8002a4a <LL_ADC_IsEnabled>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d133      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c7c:	f023 030f 	bic.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c8e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c90:	e024      	b.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ca2:	f7ff fed2 	bl	8002a4a <LL_ADC_IsEnabled>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	4812      	ldr	r0, [pc, #72]	@ (8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002caa:	f7ff fece 	bl	8002a4a <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4323      	orrs	r3, r4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d112      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cbe:	f023 030f 	bic.w	r3, r3, #15
 8002cc2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002cc4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc6:	e009      	b.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002cda:	e000      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ce6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3784      	adds	r7, #132	@ 0x84
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	50000100 	.word	0x50000100
 8002cf8:	50000300 	.word	0x50000300

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <__NVIC_EnableIRQ+0x38>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	@ (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff4c 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7a:	f7ff ff63 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002e7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f7ff ffb3 	bl	8002df0 <NVIC_EncodePriority>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff82 	bl	8002d9c <__NVIC_SetPriority>
}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff56 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eca:	e15a      	b.n	8003182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 814c 	beq.w	800317c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d005      	beq.n	8002efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d130      	bne.n	8002f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f32:	2201      	movs	r2, #1
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0201 	and.w	r2, r3, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d017      	beq.n	8002f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d123      	bne.n	8002fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	6939      	ldr	r1, [r7, #16]
 8002fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80a6 	beq.w	800317c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003030:	4b5b      	ldr	r3, [pc, #364]	@ (80031a0 <HAL_GPIO_Init+0x2e4>)
 8003032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003034:	4a5a      	ldr	r2, [pc, #360]	@ (80031a0 <HAL_GPIO_Init+0x2e4>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6613      	str	r3, [r2, #96]	@ 0x60
 800303c:	4b58      	ldr	r3, [pc, #352]	@ (80031a0 <HAL_GPIO_Init+0x2e4>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003048:	4a56      	ldr	r2, [pc, #344]	@ (80031a4 <HAL_GPIO_Init+0x2e8>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003072:	d01f      	beq.n	80030b4 <HAL_GPIO_Init+0x1f8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a4c      	ldr	r2, [pc, #304]	@ (80031a8 <HAL_GPIO_Init+0x2ec>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d019      	beq.n	80030b0 <HAL_GPIO_Init+0x1f4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a4b      	ldr	r2, [pc, #300]	@ (80031ac <HAL_GPIO_Init+0x2f0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_GPIO_Init+0x1f0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a4a      	ldr	r2, [pc, #296]	@ (80031b0 <HAL_GPIO_Init+0x2f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00d      	beq.n	80030a8 <HAL_GPIO_Init+0x1ec>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a49      	ldr	r2, [pc, #292]	@ (80031b4 <HAL_GPIO_Init+0x2f8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <HAL_GPIO_Init+0x1e8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a48      	ldr	r2, [pc, #288]	@ (80031b8 <HAL_GPIO_Init+0x2fc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_GPIO_Init+0x1e4>
 800309c:	2305      	movs	r3, #5
 800309e:	e00a      	b.n	80030b6 <HAL_GPIO_Init+0x1fa>
 80030a0:	2306      	movs	r3, #6
 80030a2:	e008      	b.n	80030b6 <HAL_GPIO_Init+0x1fa>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_Init+0x1fa>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e004      	b.n	80030b6 <HAL_GPIO_Init+0x1fa>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e002      	b.n	80030b6 <HAL_GPIO_Init+0x1fa>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_GPIO_Init+0x1fa>
 80030b4:	2300      	movs	r3, #0
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	f002 0203 	and.w	r2, r2, #3
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	4093      	lsls	r3, r2
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030c6:	4937      	ldr	r1, [pc, #220]	@ (80031a4 <HAL_GPIO_Init+0x2e8>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030d4:	4b39      	ldr	r3, [pc, #228]	@ (80031bc <HAL_GPIO_Init+0x300>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030f8:	4a30      	ldr	r2, [pc, #192]	@ (80031bc <HAL_GPIO_Init+0x300>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030fe:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <HAL_GPIO_Init+0x300>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003122:	4a26      	ldr	r2, [pc, #152]	@ (80031bc <HAL_GPIO_Init+0x300>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003128:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <HAL_GPIO_Init+0x300>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800314c:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <HAL_GPIO_Init+0x300>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <HAL_GPIO_Init+0x300>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003176:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <HAL_GPIO_Init+0x300>)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	f47f ae9d 	bne.w	8002ecc <HAL_GPIO_Init+0x10>
  }
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40010000 	.word	0x40010000
 80031a8:	48000400 	.word	0x48000400
 80031ac:	48000800 	.word	0x48000800
 80031b0:	48000c00 	.word	0x48000c00
 80031b4:	48001000 	.word	0x48001000
 80031b8:	48001400 	.word	0x48001400
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
 80031cc:	4613      	mov	r3, r2
 80031ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d141      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fe:	4b4b      	ldr	r3, [pc, #300]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320a:	d131      	bne.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800320c:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003212:	4a46      	ldr	r2, [pc, #280]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800321c:	4b43      	ldr	r3, [pc, #268]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003224:	4a41      	ldr	r2, [pc, #260]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800322a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800322c:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2232      	movs	r2, #50	@ 0x32
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	4a3f      	ldr	r2, [pc, #252]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	3301      	adds	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003242:	e002      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b01      	subs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800324a:	4b38      	ldr	r3, [pc, #224]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003256:	d102      	bne.n	800325e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f2      	bne.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800325e:	4b33      	ldr	r3, [pc, #204]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326a:	d158      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e057      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003270:	4b2e      	ldr	r3, [pc, #184]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003276:	4a2d      	ldr	r2, [pc, #180]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003280:	e04d      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d141      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800328a:	4b28      	ldr	r3, [pc, #160]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003296:	d131      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003298:	4b24      	ldr	r3, [pc, #144]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329e:	4a23      	ldr	r2, [pc, #140]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a8:	4b20      	ldr	r3, [pc, #128]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032b0:	4a1e      	ldr	r2, [pc, #120]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2232      	movs	r2, #50	@ 0x32
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ce:	e002      	b.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d6:	4b15      	ldr	r3, [pc, #84]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e2:	d102      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f2      	bne.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f6:	d112      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e011      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800330c:	e007      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800330e:	4b07      	ldr	r3, [pc, #28]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800331c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40007000 	.word	0x40007000
 8003330:	20000000 	.word	0x20000000
 8003334:	431bde83 	.word	0x431bde83

08003338 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003346:	6093      	str	r3, [r2, #8]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e2fe      	b.n	8003968 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d075      	beq.n	8003462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b97      	ldr	r3, [pc, #604]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b94      	ldr	r3, [pc, #592]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x3e>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d002      	beq.n	800339c <HAL_RCC_OscConfig+0x44>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d10b      	bne.n	80033b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	4b8d      	ldr	r3, [pc, #564]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05b      	beq.n	8003460 <HAL_RCC_OscConfig+0x108>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d157      	bne.n	8003460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e2d9      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033bc:	d106      	bne.n	80033cc <HAL_RCC_OscConfig+0x74>
 80033be:	4b85      	ldr	r3, [pc, #532]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a84      	ldr	r2, [pc, #528]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0xb0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x98>
 80033d6:	4b7f      	ldr	r3, [pc, #508]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b7c      	ldr	r3, [pc, #496]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7b      	ldr	r2, [pc, #492]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xb0>
 80033f0:	4b78      	ldr	r3, [pc, #480]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a77      	ldr	r2, [pc, #476]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b75      	ldr	r3, [pc, #468]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe f8c2 	bl	8001598 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe f8be 	bl	8001598 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	@ 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e29e      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0xc0>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe f8ae 	bl	8001598 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe f8aa 	bl	8001598 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e28a      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0xe8>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d075      	beq.n	800355a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003478:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d102      	bne.n	800348e <HAL_RCC_OscConfig+0x136>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d002      	beq.n	8003494 <HAL_RCC_OscConfig+0x13c>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11f      	bne.n	80034d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	4b4f      	ldr	r3, [pc, #316]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x154>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e25d      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b49      	ldr	r3, [pc, #292]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	4946      	ldr	r1, [pc, #280]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034c0:	4b45      	ldr	r3, [pc, #276]	@ (80035d8 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd ff6f 	bl	80013a8 <HAL_InitTick>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d043      	beq.n	8003558 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e249      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b3d      	ldr	r3, [pc, #244]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3c      	ldr	r2, [pc, #240]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe f856 	bl	8001598 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fe f852 	bl	8001598 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e232      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003502:	4b34      	ldr	r3, [pc, #208]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	492d      	ldr	r1, [pc, #180]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e01a      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003524:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2a      	ldr	r2, [pc, #168]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800352a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe f832 	bl	8001598 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe f82e 	bl	8001598 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e20e      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e0>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d041      	beq.n	80035ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003574:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe f80b 	bl	8001598 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003586:	f7fe f807 	bl	8001598 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1e7      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ef      	beq.n	8003586 <HAL_RCC_OscConfig+0x22e>
 80035a6:	e020      	b.n	80035ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ae:	4a09      	ldr	r2, [pc, #36]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd ffee 	bl	8001598 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035be:	e00d      	b.n	80035dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c0:	f7fd ffea 	bl	8001598 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d906      	bls.n	80035dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1ca      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ea      	bne.n	80035c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035fc:	4b84      	ldr	r3, [pc, #528]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_OscConfig+0x2b4>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x2b6>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b7f      	ldr	r3, [pc, #508]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	4a7e      	ldr	r2, [pc, #504]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
 800361e:	4b7c      	ldr	r3, [pc, #496]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362e:	4b79      	ldr	r3, [pc, #484]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800363a:	4b76      	ldr	r3, [pc, #472]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a75      	ldr	r2, [pc, #468]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fd ffa7 	bl	8001598 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fd ffa3 	bl	8001598 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e183      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003660:	4b6c      	ldr	r3, [pc, #432]	@ (8003814 <HAL_RCC_OscConfig+0x4bc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_RCC_OscConfig+0x32e>
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003684:	e024      	b.n	80036d0 <HAL_RCC_OscConfig+0x378>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b05      	cmp	r3, #5
 800368c:	d110      	bne.n	80036b0 <HAL_RCC_OscConfig+0x358>
 800368e:	4b60      	ldr	r3, [pc, #384]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	4a5e      	ldr	r2, [pc, #376]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800369e:	4b5c      	ldr	r3, [pc, #368]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x378>
 80036b0:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036c0:	4b53      	ldr	r3, [pc, #332]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c6:	4a52      	ldr	r2, [pc, #328]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fd ff5e 	bl	8001598 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fd ff5a 	bl	8001598 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e138      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b46      	ldr	r3, [pc, #280]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ed      	beq.n	80036e0 <HAL_RCC_OscConfig+0x388>
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd ff47 	bl	8001598 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fd ff43 	bl	8001598 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e121      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	4b3a      	ldr	r3, [pc, #232]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ed      	bne.n	800370e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b35      	ldr	r3, [pc, #212]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	4a34      	ldr	r2, [pc, #208]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003758:	4b2d      	ldr	r3, [pc, #180]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd ff16 	bl	8001598 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003770:	f7fd ff12 	bl	8001598 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0f2      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003782:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x418>
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003792:	4b1f      	ldr	r3, [pc, #124]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 8003794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fef9 	bl	8001598 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037aa:	f7fd fef5 	bl	8001598 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0d5      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ef      	bne.n	80037aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80c9 	beq.w	8003966 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	f000 8083 	beq.w	80038e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d15e      	bne.n	80038a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a08      	ldr	r2, [pc, #32]	@ (8003810 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fd fecf 	bl	8001598 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	e00c      	b.n	8003818 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fd fecb 	bl	8001598 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d905      	bls.n	8003818 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0ab      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
 8003810:	40021000 	.word	0x40021000
 8003814:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	4b55      	ldr	r3, [pc, #340]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ec      	bne.n	80037fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003824:	4b52      	ldr	r3, [pc, #328]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4b52      	ldr	r3, [pc, #328]	@ (8003974 <HAL_RCC_OscConfig+0x61c>)
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6a11      	ldr	r1, [r2, #32]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003834:	3a01      	subs	r2, #1
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800383e:	0212      	lsls	r2, r2, #8
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	3a01      	subs	r2, #1
 800384a:	0552      	lsls	r2, r2, #21
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003852:	0852      	lsrs	r2, r2, #1
 8003854:	3a01      	subs	r2, #1
 8003856:	0652      	lsls	r2, r2, #25
 8003858:	4311      	orrs	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800385e:	06d2      	lsls	r2, r2, #27
 8003860:	430a      	orrs	r2, r1
 8003862:	4943      	ldr	r1, [pc, #268]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 8003864:	4313      	orrs	r3, r2
 8003866:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b41      	ldr	r3, [pc, #260]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a40      	ldr	r2, [pc, #256]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003874:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a3d      	ldr	r2, [pc, #244]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800387e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd fe8a 	bl	8001598 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd fe86 	bl	8001598 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e066      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x530>
 80038a6:	e05e      	b.n	8003966 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a30      	ldr	r2, [pc, #192]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fe70 	bl	8001598 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd fe6c 	bl	8001598 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04c      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ce:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	4924      	ldr	r1, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <HAL_RCC_OscConfig+0x620>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	60cb      	str	r3, [r1, #12]
 80038e6:	e03e      	b.n	8003966 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e039      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <HAL_RCC_OscConfig+0x618>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	429a      	cmp	r2, r3
 8003906:	d12c      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	3b01      	subs	r3, #1
 8003914:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d123      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d11b      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d113      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d109      	bne.n	8003962 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	019f800c 	.word	0x019f800c
 8003978:	feeefffc 	.word	0xfeeefffc

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e11e      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b91      	ldr	r3, [pc, #580]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b8e      	ldr	r3, [pc, #568]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	498c      	ldr	r1, [pc, #560]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b8a      	ldr	r3, [pc, #552]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e106      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d073      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d129      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d8:	4b81      	ldr	r3, [pc, #516]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0f4      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039e8:	f000 f9ba 	bl	8003d60 <RCC_GetSysClockFreqFromPLLSource>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4a7c      	ldr	r2, [pc, #496]	@ (8003be4 <HAL_RCC_ClockConfig+0x268>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d93f      	bls.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039f6:	4b7a      	ldr	r3, [pc, #488]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d033      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d12f      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a16:	4b72      	ldr	r3, [pc, #456]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a1e:	4a70      	ldr	r2, [pc, #448]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e024      	b.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a34:	4b6a      	ldr	r3, [pc, #424]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0c6      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0be      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a54:	f000 f8ce 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4a61      	ldr	r2, [pc, #388]	@ (8003be4 <HAL_RCC_ClockConfig+0x268>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d909      	bls.n	8003a76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a62:	4b5f      	ldr	r3, [pc, #380]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a6a:	4a5d      	ldr	r2, [pc, #372]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b5a      	ldr	r3, [pc, #360]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4957      	ldr	r1, [pc, #348]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd fd86 	bl	8001598 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fd fd82 	bl	8001598 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e095      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a42      	ldr	r2, [pc, #264]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ada:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af0:	4a3b      	ldr	r2, [pc, #236]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b39      	ldr	r3, [pc, #228]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4936      	ldr	r1, [pc, #216]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d105      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b12:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d21d      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 020f 	bic.w	r2, r3, #15
 8003b34:	4929      	ldr	r1, [pc, #164]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fd2c 	bl	8001598 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fd fd28 	bl	8001598 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e03b      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d1ed      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4917      	ldr	r1, [pc, #92]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490f      	ldr	r1, [pc, #60]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba6:	f000 f825 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490c      	ldr	r1, [pc, #48]	@ (8003be8 <HAL_RCC_ClockConfig+0x26c>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x270>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fbec 	bl	80013a8 <HAL_InitTick>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	04c4b400 	.word	0x04c4b400
 8003be8:	08007f04 	.word	0x08007f04
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	20000004 	.word	0x20000004

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c06:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e047      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d102      	bne.n	8003c1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c18:	4b26      	ldr	r3, [pc, #152]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e03e      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c1e:	4b23      	ldr	r3, [pc, #140]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d136      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c48:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c52:	68d2      	ldr	r2, [r2, #12]
 8003c54:	0a12      	lsrs	r2, r2, #8
 8003c56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
      break;
 8003c60:	e00c      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c62:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	4a10      	ldr	r2, [pc, #64]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	0a12      	lsrs	r2, r2, #8
 8003c70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
      break;
 8003c7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0e5b      	lsrs	r3, r3, #25
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e001      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c9c:	693b      	ldr	r3, [r7, #16]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	007a1200 	.word	0x007a1200

08003cb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4904      	ldr	r1, [pc, #16]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08007f14 	.word	0x08007f14

08003cfc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	220f      	movs	r2, #15
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d0c:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <HAL_RCC_GetClockConfig+0x5c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <HAL_RCC_GetClockConfig+0x5c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_RCC_GetClockConfig+0x5c>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d3e:	4b07      	ldr	r3, [pc, #28]	@ (8003d5c <HAL_RCC_GetClockConfig+0x60>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 020f 	and.w	r2, r3, #15
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40022000 	.word	0x40022000

08003d60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d10c      	bne.n	8003d9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d84:	4a17      	ldr	r2, [pc, #92]	@ (8003de4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d8e:	68d2      	ldr	r2, [r2, #12]
 8003d90:	0a12      	lsrs	r2, r2, #8
 8003d92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	617b      	str	r3, [r7, #20]
    break;
 8003d9c:	e00c      	b.n	8003db8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	4a0e      	ldr	r2, [pc, #56]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	0a12      	lsrs	r2, r2, #8
 8003dac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
    break;
 8003db6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db8:	4b09      	ldr	r3, [pc, #36]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0e5b      	lsrs	r3, r3, #25
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dd2:	687b      	ldr	r3, [r7, #4]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40021000 	.word	0x40021000
 8003de4:	007a1200 	.word	0x007a1200
 8003de8:	00f42400 	.word	0x00f42400

08003dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df4:	2300      	movs	r3, #0
 8003df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df8:	2300      	movs	r3, #0
 8003dfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8098 	beq.w	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b43      	ldr	r3, [pc, #268]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b40      	ldr	r3, [pc, #256]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e26:	4b3d      	ldr	r3, [pc, #244]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e36:	4b3a      	ldr	r3, [pc, #232]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a39      	ldr	r2, [pc, #228]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e42:	f7fd fba9 	bl	8001598 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e48:	e009      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd fba5 	bl	8001598 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d902      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	74fb      	strb	r3, [r7, #19]
        break;
 8003e5c:	e005      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5e:	4b30      	ldr	r3, [pc, #192]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0ef      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d159      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e70:	4b2a      	ldr	r3, [pc, #168]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01e      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d019      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e8c:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e98:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eb8:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fd fb65 	bl	8001598 <HAL_GetTick>
 8003ece:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	e00b      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fd fb61 	bl	8001598 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d902      	bls.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ee8:	e006      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ec      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efe:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	74bb      	strb	r3, [r7, #18]
 8003f1a:	e005      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f28:	7c7b      	ldrb	r3, [r7, #17]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4ba6      	ldr	r3, [pc, #664]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f32:	4aa5      	ldr	r2, [pc, #660]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f46:	4ba0      	ldr	r3, [pc, #640]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f023 0203 	bic.w	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	499c      	ldr	r1, [pc, #624]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f68:	4b97      	ldr	r3, [pc, #604]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f023 020c 	bic.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4994      	ldr	r1, [pc, #592]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f8a:	4b8f      	ldr	r3, [pc, #572]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	498b      	ldr	r1, [pc, #556]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fac:	4b86      	ldr	r3, [pc, #536]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	4983      	ldr	r1, [pc, #524]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fce:	4b7e      	ldr	r3, [pc, #504]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	497a      	ldr	r1, [pc, #488]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff0:	4b75      	ldr	r3, [pc, #468]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	4972      	ldr	r1, [pc, #456]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004012:	4b6d      	ldr	r3, [pc, #436]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4969      	ldr	r1, [pc, #420]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004034:	4b64      	ldr	r3, [pc, #400]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4961      	ldr	r1, [pc, #388]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004056:	4b5c      	ldr	r3, [pc, #368]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	4958      	ldr	r1, [pc, #352]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004078:	4b53      	ldr	r3, [pc, #332]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	4950      	ldr	r1, [pc, #320]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b4b      	ldr	r3, [pc, #300]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a4a      	ldr	r2, [pc, #296]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040b0:	4b45      	ldr	r3, [pc, #276]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	4942      	ldr	r1, [pc, #264]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b3d      	ldr	r3, [pc, #244]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a3c      	ldr	r2, [pc, #240]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040e8:	4b37      	ldr	r3, [pc, #220]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	4934      	ldr	r1, [pc, #208]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a2e      	ldr	r2, [pc, #184]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004120:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	4926      	ldr	r1, [pc, #152]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b21      	ldr	r3, [pc, #132]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a20      	ldr	r2, [pc, #128]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004158:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	4918      	ldr	r1, [pc, #96]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a12      	ldr	r2, [pc, #72]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004190:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	490a      	ldr	r1, [pc, #40]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ae:	d105      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000

080041cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e09d      	b.n	800431a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ee:	d009      	beq.n	8004204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
 80041f6:	e005      	b.n	8004204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd f87e 	bl	8001320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800423a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004244:	d902      	bls.n	800424c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e002      	b.n	8004252 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800424c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004250:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800425a:	d007      	beq.n	800426c <HAL_SPI_Init+0xa0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004264:	d002      	beq.n	800426c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ae:	ea42 0103 	orr.w	r1, r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	f003 0204 	and.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042e8:	ea42 0103 	orr.w	r1, r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b08a      	sub	sp, #40	@ 0x28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x26>
 8004344:	2302      	movs	r3, #2
 8004346:	e20a      	b.n	800475e <HAL_SPI_TransmitReceive+0x43c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004350:	f7fd f922 	bl	8001598 <HAL_GetTick>
 8004354:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800435c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004364:	887b      	ldrh	r3, [r7, #2]
 8004366:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800436c:	7efb      	ldrb	r3, [r7, #27]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d00e      	beq.n	8004390 <HAL_SPI_TransmitReceive+0x6e>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004378:	d106      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x66>
 8004382:	7efb      	ldrb	r3, [r7, #27]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d003      	beq.n	8004390 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004388:	2302      	movs	r3, #2
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800438e:	e1e0      	b.n	8004752 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0x80>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0x80>
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80043a8:	e1d3      	b.n	8004752 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d003      	beq.n	80043be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2205      	movs	r2, #5
 80043ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	887a      	ldrh	r2, [r7, #2]
 80043ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004400:	d802      	bhi.n	8004408 <HAL_SPI_TransmitReceive+0xe6>
 8004402:	8a3b      	ldrh	r3, [r7, #16]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d908      	bls.n	800441a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	e007      	b.n	800442a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004428:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d007      	beq.n	8004448 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004450:	f240 8081 	bls.w	8004556 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_SPI_TransmitReceive+0x140>
 800445c:	8a7b      	ldrh	r3, [r7, #18]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d16d      	bne.n	800453e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004486:	e05a      	b.n	800453e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d11b      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x1ac>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d016      	beq.n	80044ce <HAL_SPI_TransmitReceive+0x1ac>
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d113      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	1c9a      	adds	r2, r3, #2
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d11c      	bne.n	8004516 <HAL_SPI_TransmitReceive+0x1f4>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d016      	beq.n	8004516 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	b292      	uxth	r2, r2
 80044f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004512:	2301      	movs	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004516:	f7fd f83f 	bl	8001598 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004522:	429a      	cmp	r2, r3
 8004524:	d80b      	bhi.n	800453e <HAL_SPI_TransmitReceive+0x21c>
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800452c:	d007      	beq.n	800453e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800453c:	e109      	b.n	8004752 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d19f      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x166>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d199      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x166>
 8004554:	e0e3      	b.n	800471e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x244>
 800455e:	8a7b      	ldrh	r3, [r7, #18]
 8004560:	2b01      	cmp	r3, #1
 8004562:	f040 80cf 	bne.w	8004704 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d912      	bls.n	8004596 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b02      	subs	r3, #2
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004594:	e0b6      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045bc:	e0a2      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d134      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x314>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02f      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x314>
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d12c      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d912      	bls.n	800460c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b02      	subs	r3, #2
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800460a:	e012      	b.n	8004632 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d148      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x3b4>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d042      	beq.n	80046d6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d923      	bls.n	80046a4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	b292      	uxth	r2, r2
 8004668:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	1c9a      	adds	r2, r3, #2
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b02      	subs	r3, #2
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d81f      	bhi.n	80046d2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e016      	b.n	80046d2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f103 020c 	add.w	r2, r3, #12
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d2:	2301      	movs	r3, #1
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046d6:	f7fc ff5f 	bl	8001598 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_TransmitReceive+0x3cc>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x3d2>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004702:	e026      	b.n	8004752 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	f47f af57 	bne.w	80045be <HAL_SPI_TransmitReceive+0x29c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	f47f af50 	bne.w	80045be <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f93e 	bl	80049a4 <SPI_EndRxTxTransaction>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004748:	e003      	b.n	8004752 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800475a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800475e:	4618      	mov	r0, r3
 8004760:	3728      	adds	r7, #40	@ 0x28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004778:	f7fc ff0e 	bl	8001598 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4413      	add	r3, r2
 8004786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004788:	f7fc ff06 	bl	8001598 <HAL_GetTick>
 800478c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800478e:	4b39      	ldr	r3, [pc, #228]	@ (8004874 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	015b      	lsls	r3, r3, #5
 8004794:	0d1b      	lsrs	r3, r3, #20
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479e:	e054      	b.n	800484a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a6:	d050      	beq.n	800484a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a8:	f7fc fef6 	bl	8001598 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d902      	bls.n	80047be <SPI_WaitFlagStateUntilTimeout+0x56>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d13d      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047d6:	d111      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e0:	d004      	beq.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ea:	d107      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004804:	d10f      	bne.n	8004826 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e017      	b.n	800486a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3b01      	subs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	429a      	cmp	r2, r3
 8004866:	d19b      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000000 	.word	0x20000000

08004878 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	@ 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800488a:	f7fc fe85 	bl	8001598 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800489a:	f7fc fe7d 	bl	8001598 <HAL_GetTick>
 800489e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048a8:	4b3d      	ldr	r3, [pc, #244]	@ (80049a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	00da      	lsls	r2, r3, #3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	0d1b      	lsrs	r3, r3, #20
 80048b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048c0:	e060      	b.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048c8:	d107      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0x62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e0:	d050      	beq.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048e2:	f7fc fe59 	bl	8001598 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d902      	bls.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d13d      	bne.n	8004974 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004906:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004910:	d111      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491a:	d004      	beq.n	8004926 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004924:	d107      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004934:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493e:	d10f      	bne.n	8004960 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800495e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e010      	b.n	8004996 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3b01      	subs	r3, #1
 8004982:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d196      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	@ 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000000 	.word	0x20000000

080049a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ff5b 	bl	8004878 <SPI_WaitFifoStateUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e027      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2200      	movs	r2, #0
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fec0 	bl	8004768 <SPI_WaitFlagStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e014      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff34 	bl	8004878 <SPI_WaitFifoStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e000      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e049      	b.n	8004ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f841 	bl	8004ade <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fa22 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e04a      	b.n	8004ba2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b36:	d013      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d115      	bne.n	8004b8c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b06      	cmp	r3, #6
 8004b70:	d015      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0xaa>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b78:	d011      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	e008      	b.n	8004b9e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e000      	b.n	8004ba0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	00010007 	.word	0x00010007

08004bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0202 	mvn.w	r2, #2
 8004bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f931 	bl	8004e7a <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f923 	bl	8004e66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f934 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d020      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0204 	mvn.w	r2, #4
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f90b 	bl	8004e7a <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8fd 	bl	8004e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f90e 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d020      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0208 	mvn.w	r2, #8
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8e5 	bl	8004e7a <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8d7 	bl	8004e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8e8 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d020      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0210 	mvn.w	r2, #16
 8004ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8bf 	bl	8004e7a <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8b1 	bl	8004e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f8c2 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0201 	mvn.w	r2, #1
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fa0e 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f951 	bl	8005004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00c      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f949 	bl	8005018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f87c 	bl	8004ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00c      	beq.n	8004dce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f06f 0220 	mvn.w	r2, #32
 8004dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f911 	bl	8004ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f91d 	bl	800502c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f915 	bl	8005040 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f90d 	bl	8005054 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f905 	bl	8005068 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a42      	ldr	r2, [pc, #264]	@ (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00f      	beq.n	8004ef0 <TIM_Base_SetConfig+0x38>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x38>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x38>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8004fdc <TIM_Base_SetConfig+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x38>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3d      	ldr	r2, [pc, #244]	@ (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d108      	bne.n	8004f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a33      	ldr	r2, [pc, #204]	@ (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01b      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f10:	d017      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a30      	ldr	r2, [pc, #192]	@ (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004fdc <TIM_Base_SetConfig+0x124>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00f      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_Base_SetConfig+0x8a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <TIM_Base_SetConfig+0x134>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	@ (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0xe8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0xe8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0xe8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0xe8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a14      	ldr	r2, [pc, #80]	@ (8004fec <TIM_Base_SetConfig+0x134>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d103      	bne.n	8004fa8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	611a      	str	r2, [r3, #16]
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <__NVIC_SetPriority>:
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508c:	2b00      	cmp	r3, #0
 800508e:	db0a      	blt.n	80050a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	490c      	ldr	r1, [pc, #48]	@ (80050c8 <__NVIC_SetPriority+0x4c>)
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	0112      	lsls	r2, r2, #4
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	440b      	add	r3, r1
 80050a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80050a4:	e00a      	b.n	80050bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4908      	ldr	r1, [pc, #32]	@ (80050cc <__NVIC_SetPriority+0x50>)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	3b04      	subs	r3, #4
 80050b4:	0112      	lsls	r2, r2, #4
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	440b      	add	r3, r1
 80050ba:	761a      	strb	r2, [r3, #24]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	e000e100 	.word	0xe000e100
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <SysTick_Handler+0x1c>)
 80050d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050d8:	f001 fd46 	bl	8006b68 <xTaskGetSchedulerState>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050e2:	f002 fb41 	bl	8007768 <xPortSysTickHandler>
  }
}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000e010 	.word	0xe000e010

080050f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050f4:	2100      	movs	r1, #0
 80050f6:	f06f 0004 	mvn.w	r0, #4
 80050fa:	f7ff ffbf 	bl	800507c <__NVIC_SetPriority>
#endif
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800510a:	f3ef 8305 	mrs	r3, IPSR
 800510e:	603b      	str	r3, [r7, #0]
  return(result);
 8005110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005116:	f06f 0305 	mvn.w	r3, #5
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	e00c      	b.n	8005138 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <osKernelInitialize+0x44>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <osKernelInitialize+0x44>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	e002      	b.n	8005138 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005138:	687b      	ldr	r3, [r7, #4]
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000228 	.word	0x20000228

0800514c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005152:	f3ef 8305 	mrs	r3, IPSR
 8005156:	603b      	str	r3, [r7, #0]
  return(result);
 8005158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <osKernelStart+0x1a>
    stat = osErrorISR;
 800515e:	f06f 0305 	mvn.w	r3, #5
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	e010      	b.n	8005188 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005166:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <osKernelStart+0x48>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d109      	bne.n	8005182 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800516e:	f7ff ffbf 	bl	80050f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005172:	4b08      	ldr	r3, [pc, #32]	@ (8005194 <osKernelStart+0x48>)
 8005174:	2202      	movs	r2, #2
 8005176:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005178:	f001 f892 	bl	80062a0 <vTaskStartScheduler>
      stat = osOK;
 800517c:	2300      	movs	r3, #0
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	e002      	b.n	8005188 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005188:	687b      	ldr	r3, [r7, #4]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000228 	.word	0x20000228

08005198 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	@ 0x38
 800519c:	af04      	add	r7, sp, #16
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a8:	f3ef 8305 	mrs	r3, IPSR
 80051ac:	617b      	str	r3, [r7, #20]
  return(result);
 80051ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d17e      	bne.n	80052b2 <osThreadNew+0x11a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d07b      	beq.n	80052b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051ba:	2380      	movs	r3, #128	@ 0x80
 80051bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051be:	2318      	movs	r3, #24
 80051c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d045      	beq.n	800525e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <osThreadNew+0x48>
        name = attr->name;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <osThreadNew+0x6e>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b38      	cmp	r3, #56	@ 0x38
 80051f8:	d805      	bhi.n	8005206 <osThreadNew+0x6e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <osThreadNew+0x72>
        return (NULL);
 8005206:	2300      	movs	r3, #0
 8005208:	e054      	b.n	80052b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <osThreadNew+0xa8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2ba7      	cmp	r3, #167	@ 0xa7
 8005228:	d90a      	bls.n	8005240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <osThreadNew+0xa8>
        mem = 1;
 800523a:	2301      	movs	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e010      	b.n	8005262 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10c      	bne.n	8005262 <osThreadNew+0xca>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <osThreadNew+0xca>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <osThreadNew+0xca>
          mem = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e001      	b.n	8005262 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d110      	bne.n	800528a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005270:	9202      	str	r2, [sp, #8]
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6a3a      	ldr	r2, [r7, #32]
 800527c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fe1a 	bl	8005eb8 <xTaskCreateStatic>
 8005284:	4603      	mov	r3, r0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	e013      	b.n	80052b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d110      	bne.n	80052b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	b29a      	uxth	r2, r3
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fe68 	bl	8005f78 <xTaskCreate>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d001      	beq.n	80052b2 <osThreadNew+0x11a>
            hTask = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052b2:	693b      	ldr	r3, [r7, #16]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3728      	adds	r7, #40	@ 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c4:	f3ef 8305 	mrs	r3, IPSR
 80052c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <osDelay+0x1c>
    stat = osErrorISR;
 80052d0:	f06f 0305 	mvn.w	r3, #5
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e007      	b.n	80052e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 ffa6 	bl	8006234 <vTaskDelay>
    }
  }

  return (stat);
 80052e8:	68fb      	ldr	r3, [r7, #12]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a07      	ldr	r2, [pc, #28]	@ (8005320 <vApplicationGetIdleTaskMemory+0x2c>)
 8005304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a06      	ldr	r2, [pc, #24]	@ (8005324 <vApplicationGetIdleTaskMemory+0x30>)
 800530a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2280      	movs	r2, #128	@ 0x80
 8005310:	601a      	str	r2, [r3, #0]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	2000022c 	.word	0x2000022c
 8005324:	200002d4 	.word	0x200002d4

08005328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a07      	ldr	r2, [pc, #28]	@ (8005354 <vApplicationGetTimerTaskMemory+0x2c>)
 8005338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4a06      	ldr	r2, [pc, #24]	@ (8005358 <vApplicationGetTimerTaskMemory+0x30>)
 800533e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005346:	601a      	str	r2, [r3, #0]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	200004d4 	.word	0x200004d4
 8005358:	2000057c 	.word	0x2000057c

0800535c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f103 0208 	add.w	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f103 0208 	add.w	r2, r3, #8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f103 0208 	add.w	r2, r3, #8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005414:	d103      	bne.n	800541e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e00c      	b.n	8005438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3308      	adds	r3, #8
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e002      	b.n	800542c <vListInsert+0x2e>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	d2f6      	bcs.n	8005426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6852      	ldr	r2, [r2, #4]
 8005490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	d103      	bne.n	80054a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	1e5a      	subs	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054f0:	f002 f8aa 	bl	8007648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	3b01      	subs	r3, #1
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	441a      	add	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	@ 0xff
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d114      	bne.n	8005570 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01a      	beq.n	8005584 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3310      	adds	r3, #16
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f942 	bl	80067dc <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d012      	beq.n	8005584 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <xQueueGenericReset+0xd0>)
 8005560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	e009      	b.n	8005584 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3310      	adds	r3, #16
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fef1 	bl	800535c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3324      	adds	r3, #36	@ 0x24
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff feec 	bl	800535c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005584:	f002 f892 	bl	80076ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005588:	2301      	movs	r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	@ 0x38
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <xQueueGenericCreateStatic+0x56>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <xQueueGenericCreateStatic+0x5a>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericCreateStatic+0x5c>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	623b      	str	r3, [r7, #32]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <xQueueGenericCreateStatic+0x84>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <xQueueGenericCreateStatic+0x88>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <xQueueGenericCreateStatic+0x8a>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	61fb      	str	r3, [r7, #28]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800563e:	2350      	movs	r3, #80	@ 0x50
 8005640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b50      	cmp	r3, #80	@ 0x50
 8005646:	d00b      	beq.n	8005660 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61bb      	str	r3, [r7, #24]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005660:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00d      	beq.n	8005688 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005674:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f805 	bl	8005692 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800568a:	4618      	mov	r0, r3
 800568c:	3730      	adds	r7, #48	@ 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e002      	b.n	80056b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056c0:	2101      	movs	r1, #1
 80056c2:	69b8      	ldr	r0, [r7, #24]
 80056c4:	f7ff fefe 	bl	80054c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	@ 0x38
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <xQueueGenericSend+0x34>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <xQueueGenericSend+0x42>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <xQueueGenericSend+0x46>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <xQueueGenericSend+0x48>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <xQueueGenericSend+0x64>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x72>
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <xQueueGenericSend+0x76>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <xQueueGenericSend+0x78>
 800574e:	2300      	movs	r3, #0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10b      	bne.n	800576c <xQueueGenericSend+0x94>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	623b      	str	r3, [r7, #32]
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	e7fd      	b.n	8005768 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800576c:	f001 f9fc 	bl	8006b68 <xTaskGetSchedulerState>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <xQueueGenericSend+0xa4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <xQueueGenericSend+0xa8>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <xQueueGenericSend+0xaa>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <xQueueGenericSend+0xc6>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	61fb      	str	r3, [r7, #28]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800579e:	f001 ff53 	bl	8007648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <xQueueGenericSend+0xdc>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d129      	bne.n	8005808 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ba:	f000 fa0f 	bl	8005bdc <prvCopyDataToQueue>
 80057be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	3324      	adds	r3, #36	@ 0x24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 f805 	bl	80067dc <xTaskRemoveFromEventList>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d013      	beq.n	8005800 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057d8:	4b3f      	ldr	r3, [pc, #252]	@ (80058d8 <xQueueGenericSend+0x200>)
 80057da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	e00a      	b.n	8005800 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057f0:	4b39      	ldr	r3, [pc, #228]	@ (80058d8 <xQueueGenericSend+0x200>)
 80057f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005800:	f001 ff54 	bl	80076ac <vPortExitCritical>
				return pdPASS;
 8005804:	2301      	movs	r3, #1
 8005806:	e063      	b.n	80058d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800580e:	f001 ff4d 	bl	80076ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005812:	2300      	movs	r3, #0
 8005814:	e05c      	b.n	80058d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800581c:	f107 0314 	add.w	r3, r7, #20
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f83f 	bl	80068a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582a:	f001 ff3f 	bl	80076ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800582e:	f000 fda7 	bl	8006380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005832:	f001 ff09 	bl	8007648 <vPortEnterCritical>
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800583c:	b25b      	sxtb	r3, r3
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005842:	d103      	bne.n	800584c <xQueueGenericSend+0x174>
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005852:	b25b      	sxtb	r3, r3
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005858:	d103      	bne.n	8005862 <xQueueGenericSend+0x18a>
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005862:	f001 ff23 	bl	80076ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005866:	1d3a      	adds	r2, r7, #4
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f001 f82e 	bl	80068d0 <xTaskCheckForTimeOut>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d124      	bne.n	80058c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800587a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800587c:	f000 faa6 	bl	8005dcc <prvIsQueueFull>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d018      	beq.n	80058b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	3310      	adds	r3, #16
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f000 ff52 	bl	8006738 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005896:	f000 fa31 	bl	8005cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800589a:	f000 fd7f 	bl	800639c <xTaskResumeAll>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f af7c 	bne.w	800579e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058a6:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <xQueueGenericSend+0x200>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	e772      	b.n	800579e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ba:	f000 fa1f 	bl	8005cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058be:	f000 fd6d 	bl	800639c <xTaskResumeAll>
 80058c2:	e76c      	b.n	800579e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058c6:	f000 fa19 	bl	8005cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ca:	f000 fd67 	bl	800639c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3738      	adds	r7, #56	@ 0x38
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b090      	sub	sp, #64	@ 0x40
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80058ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <xQueueGenericSendFromISR+0x3e>
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueGenericSendFromISR+0x42>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueGenericSendFromISR+0x44>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d103      	bne.n	800594a <xQueueGenericSendFromISR+0x6e>
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <xQueueGenericSendFromISR+0x72>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueGenericSendFromISR+0x74>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	623b      	str	r3, [r7, #32]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800596c:	f001 ff4c 	bl	8007808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005970:	f3ef 8211 	mrs	r2, BASEPRI
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61fa      	str	r2, [r7, #28]
 8005986:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005988:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <xQueueGenericSendFromISR+0xc2>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d12f      	bne.n	80059fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059b4:	f000 f912 	bl	8005bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059c0:	d112      	bne.n	80059e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	3324      	adds	r3, #36	@ 0x24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 ff04 	bl	80067dc <xTaskRemoveFromEventList>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e007      	b.n	80059f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059ec:	3301      	adds	r3, #1
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	b25a      	sxtb	r2, r3
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059f8:	2301      	movs	r3, #1
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80059fc:	e001      	b.n	8005a02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3740      	adds	r7, #64	@ 0x40
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <xQueueReceive+0x32>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	623b      	str	r3, [r7, #32]
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <xQueueReceive+0x40>
 8005a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <xQueueReceive+0x44>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <xQueueReceive+0x46>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <xQueueReceive+0x62>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	61fb      	str	r3, [r7, #28]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a7a:	f001 f875 	bl	8006b68 <xTaskGetSchedulerState>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <xQueueReceive+0x72>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <xQueueReceive+0x76>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueReceive+0x78>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <xQueueReceive+0x94>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61bb      	str	r3, [r7, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aac:	f001 fdcc 	bl	8007648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01f      	beq.n	8005afc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac0:	f000 f8f6 	bl	8005cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	1e5a      	subs	r2, r3, #1
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	3310      	adds	r3, #16
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fe7f 	bl	80067dc <xTaskRemoveFromEventList>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8005bd8 <xQueueReceive+0x1c0>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005af4:	f001 fdda 	bl	80076ac <vPortExitCritical>
				return pdPASS;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e069      	b.n	8005bd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b02:	f001 fdd3 	bl	80076ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e062      	b.n	8005bd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b10:	f107 0310 	add.w	r3, r7, #16
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fec5 	bl	80068a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b1e:	f001 fdc5 	bl	80076ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b22:	f000 fc2d 	bl	8006380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b26:	f001 fd8f 	bl	8007648 <vPortEnterCritical>
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b30:	b25b      	sxtb	r3, r3
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b36:	d103      	bne.n	8005b40 <xQueueReceive+0x128>
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b46:	b25b      	sxtb	r3, r3
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4c:	d103      	bne.n	8005b56 <xQueueReceive+0x13e>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b56:	f001 fda9 	bl	80076ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5a:	1d3a      	adds	r2, r7, #4
 8005b5c:	f107 0310 	add.w	r3, r7, #16
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 feb4 	bl	80068d0 <xTaskCheckForTimeOut>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d123      	bne.n	8005bb6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b70:	f000 f916 	bl	8005da0 <prvIsQueueEmpty>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d017      	beq.n	8005baa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7c:	3324      	adds	r3, #36	@ 0x24
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fdd8 	bl	8006738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b8a:	f000 f8b7 	bl	8005cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b8e:	f000 fc05 	bl	800639c <xTaskResumeAll>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d189      	bne.n	8005aac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <xQueueReceive+0x1c0>)
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	e780      	b.n	8005aac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bac:	f000 f8a6 	bl	8005cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bb0:	f000 fbf4 	bl	800639c <xTaskResumeAll>
 8005bb4:	e77a      	b.n	8005aac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb8:	f000 f8a0 	bl	8005cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bbc:	f000 fbee 	bl	800639c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bc2:	f000 f8ed 	bl	8005da0 <prvIsQueueEmpty>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f43f af6f 	beq.w	8005aac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3730      	adds	r7, #48	@ 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10d      	bne.n	8005c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d14d      	bne.n	8005c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 ffcc 	bl	8006ba4 <xTaskPriorityDisinherit>
 8005c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	e043      	b.n	8005c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d119      	bne.n	8005c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6858      	ldr	r0, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	461a      	mov	r2, r3
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	f002 f8a2 	bl	8007d70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c34:	441a      	add	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d32b      	bcc.n	8005c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	e026      	b.n	8005c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68d8      	ldr	r0, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	f002 f888 	bl	8007d70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	425b      	negs	r3, r3
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d207      	bcs.n	8005c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	425b      	negs	r3, r3
 8005c86:	441a      	add	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d105      	bne.n	8005c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ca6:	697b      	ldr	r3, [r7, #20]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	441a      	add	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d303      	bcc.n	8005ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68d9      	ldr	r1, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	461a      	mov	r2, r3
 8005cee:	6838      	ldr	r0, [r7, #0]
 8005cf0:	f002 f83e 	bl	8007d70 <memcpy>
	}
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d04:	f001 fca0 	bl	8007648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d10:	e011      	b.n	8005d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d012      	beq.n	8005d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3324      	adds	r3, #36	@ 0x24
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fd5c 	bl	80067dc <xTaskRemoveFromEventList>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d2a:	f000 fe35 	bl	8006998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	dce9      	bgt.n	8005d12 <prvUnlockQueue+0x16>
 8005d3e:	e000      	b.n	8005d42 <prvUnlockQueue+0x46>
					break;
 8005d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	22ff      	movs	r2, #255	@ 0xff
 8005d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d4a:	f001 fcaf 	bl	80076ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d4e:	f001 fc7b 	bl	8007648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d5a:	e011      	b.n	8005d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d012      	beq.n	8005d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3310      	adds	r3, #16
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fd37 	bl	80067dc <xTaskRemoveFromEventList>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d74:	f000 fe10 	bl	8006998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dce9      	bgt.n	8005d5c <prvUnlockQueue+0x60>
 8005d88:	e000      	b.n	8005d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	22ff      	movs	r2, #255	@ 0xff
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d94:	f001 fc8a 	bl	80076ac <vPortExitCritical>
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da8:	f001 fc4e 	bl	8007648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e001      	b.n	8005dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dbe:	f001 fc75 	bl	80076ac <vPortExitCritical>

	return xReturn;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dd4:	f001 fc38 	bl	8007648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d102      	bne.n	8005dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e001      	b.n	8005dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dee:	f001 fc5d 	bl	80076ac <vPortExitCritical>

	return xReturn;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e014      	b.n	8005e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005e4c <vQueueAddToRegistry+0x50>)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e18:	490c      	ldr	r1, [pc, #48]	@ (8005e4c <vQueueAddToRegistry+0x50>)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e22:	4a0a      	ldr	r2, [pc, #40]	@ (8005e4c <vQueueAddToRegistry+0x50>)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4413      	add	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e2e:	e006      	b.n	8005e3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b07      	cmp	r3, #7
 8005e3a:	d9e7      	bls.n	8005e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	2000097c 	.word	0x2000097c

08005e50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e60:	f001 fbf2 	bl	8007648 <vPortEnterCritical>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e70:	d103      	bne.n	8005e7a <vQueueWaitForMessageRestricted+0x2a>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e80:	b25b      	sxtb	r3, r3
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e86:	d103      	bne.n	8005e90 <vQueueWaitForMessageRestricted+0x40>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e90:	f001 fc0c 	bl	80076ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	3324      	adds	r3, #36	@ 0x24
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fc6d 	bl	8006784 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eaa:	6978      	ldr	r0, [r7, #20]
 8005eac:	f7ff ff26 	bl	8005cfc <prvUnlockQueue>
	}
 8005eb0:	bf00      	nop
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	@ 0x38
 8005ebc:	af04      	add	r7, sp, #16
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	623b      	str	r3, [r7, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	61fb      	str	r3, [r7, #28]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f02:	23a8      	movs	r3, #168	@ 0xa8
 8005f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2ba8      	cmp	r3, #168	@ 0xa8
 8005f0a:	d00b      	beq.n	8005f24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61bb      	str	r3, [r7, #24]
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01e      	beq.n	8005f6a <xTaskCreateStatic+0xb2>
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01b      	beq.n	8005f6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f44:	2300      	movs	r3, #0
 8005f46:	9303      	str	r3, [sp, #12]
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	9302      	str	r3, [sp, #8]
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f851 	bl	8006004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f64:	f000 f8f6 	bl	8006154 <prvAddNewTaskToReadyList>
 8005f68:	e001      	b.n	8005f6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f6e:	697b      	ldr	r3, [r7, #20]
	}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	@ 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	@ 0x30
 8005f7c:	af04      	add	r7, sp, #16
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fc7d 	bl	800788c <pvPortMalloc>
 8005f92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f9a:	20a8      	movs	r0, #168	@ 0xa8
 8005f9c:	f001 fc76 	bl	800788c <pvPortMalloc>
 8005fa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fae:	e005      	b.n	8005fbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	f001 fd39 	bl	8007a28 <vPortFree>
 8005fb6:	e001      	b.n	8005fbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d017      	beq.n	8005ff2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	9302      	str	r3, [sp, #8]
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f80f 	bl	8006004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe6:	69f8      	ldr	r0, [r7, #28]
 8005fe8:	f000 f8b4 	bl	8006154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fec:	2301      	movs	r3, #1
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e002      	b.n	8005ff8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ff6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
	}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	461a      	mov	r2, r3
 800601c:	21a5      	movs	r1, #165	@ 0xa5
 800601e:	f001 fe23 	bl	8007c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800602c:	3b01      	subs	r3, #1
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f023 0307 	bic.w	r3, r3, #7
 800603a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	617b      	str	r3, [r7, #20]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01f      	beq.n	80060a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e012      	b.n	8006090 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	7819      	ldrb	r1, [r3, #0]
 8006072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	3334      	adds	r3, #52	@ 0x34
 800607a:	460a      	mov	r2, r1
 800607c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3301      	adds	r3, #1
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b0f      	cmp	r3, #15
 8006094:	d9e9      	bls.n	800606a <prvInitialiseNewTask+0x66>
 8006096:	e000      	b.n	800609a <prvInitialiseNewTask+0x96>
			{
				break;
 8006098:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a2:	e003      	b.n	80060ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	2b37      	cmp	r3, #55	@ 0x37
 80060b0:	d901      	bls.n	80060b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060b2:	2337      	movs	r3, #55	@ 0x37
 80060b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	2200      	movs	r2, #0
 80060c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	3304      	adds	r3, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff f965 	bl	800539c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	3318      	adds	r3, #24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff f960 	bl	800539c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	3354      	adds	r3, #84	@ 0x54
 8006106:	224c      	movs	r2, #76	@ 0x4c
 8006108:	2100      	movs	r1, #0
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fdac 	bl	8007c68 <memset>
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	4a0d      	ldr	r2, [pc, #52]	@ (8006148 <prvInitialiseNewTask+0x144>)
 8006114:	659a      	str	r2, [r3, #88]	@ 0x58
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	4a0c      	ldr	r2, [pc, #48]	@ (800614c <prvInitialiseNewTask+0x148>)
 800611a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	4a0c      	ldr	r2, [pc, #48]	@ (8006150 <prvInitialiseNewTask+0x14c>)
 8006120:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	69b8      	ldr	r0, [r7, #24]
 8006128:	f001 f95a 	bl	80073e0 <pxPortInitialiseStack>
 800612c:	4602      	mov	r2, r0
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800613e:	bf00      	nop
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20001c10 	.word	0x20001c10
 800614c:	20001c78 	.word	0x20001c78
 8006150:	20001ce0 	.word	0x20001ce0

08006154 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800615c:	f001 fa74 	bl	8007648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006160:	4b2d      	ldr	r3, [pc, #180]	@ (8006218 <prvAddNewTaskToReadyList+0xc4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <prvAddNewTaskToReadyList+0xc4>)
 8006168:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800616a:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <prvAddNewTaskToReadyList+0xc8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006172:	4a2a      	ldr	r2, [pc, #168]	@ (800621c <prvAddNewTaskToReadyList+0xc8>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006178:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <prvAddNewTaskToReadyList+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d110      	bne.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006180:	f000 fc2e 	bl	80069e0 <prvInitialiseTaskLists>
 8006184:	e00d      	b.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006186:	4b26      	ldr	r3, [pc, #152]	@ (8006220 <prvAddNewTaskToReadyList+0xcc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800618e:	4b23      	ldr	r3, [pc, #140]	@ (800621c <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	429a      	cmp	r2, r3
 800619a:	d802      	bhi.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800619c:	4a1f      	ldr	r2, [pc, #124]	@ (800621c <prvAddNewTaskToReadyList+0xc8>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061a2:	4b20      	ldr	r3, [pc, #128]	@ (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <prvAddNewTaskToReadyList+0xd4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d903      	bls.n	80061c8 <prvAddNewTaskToReadyList+0x74>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a18      	ldr	r2, [pc, #96]	@ (8006228 <prvAddNewTaskToReadyList+0xd4>)
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <prvAddNewTaskToReadyList+0xd8>)
 80061d6:	441a      	add	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f7ff f8e9 	bl	80053b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061e4:	f001 fa62 	bl	80076ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <prvAddNewTaskToReadyList+0xcc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061f0:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <prvAddNewTaskToReadyList+0xc8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d207      	bcs.n	800620e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <prvAddNewTaskToReadyList+0xdc>)
 8006200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000e90 	.word	0x20000e90
 800621c:	200009bc 	.word	0x200009bc
 8006220:	20000e9c 	.word	0x20000e9c
 8006224:	20000eac 	.word	0x20000eac
 8006228:	20000e98 	.word	0x20000e98
 800622c:	200009c0 	.word	0x200009c0
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006246:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <vTaskDelay+0x64>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <vTaskDelay+0x32>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60bb      	str	r3, [r7, #8]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006266:	f000 f88b 	bl	8006380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800626a:	2100      	movs	r1, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fd09 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006272:	f000 f893 	bl	800639c <xTaskResumeAll>
 8006276:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d107      	bne.n	800628e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800627e:	4b07      	ldr	r3, [pc, #28]	@ (800629c <vTaskDelay+0x68>)
 8006280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000eb8 	.word	0x20000eb8
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	@ 0x28
 80062a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ae:	463a      	mov	r2, r7
 80062b0:	1d39      	adds	r1, r7, #4
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff f81c 	bl	80052f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	9202      	str	r2, [sp, #8]
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	460a      	mov	r2, r1
 80062ce:	4924      	ldr	r1, [pc, #144]	@ (8006360 <vTaskStartScheduler+0xc0>)
 80062d0:	4824      	ldr	r0, [pc, #144]	@ (8006364 <vTaskStartScheduler+0xc4>)
 80062d2:	f7ff fdf1 	bl	8005eb8 <xTaskCreateStatic>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4a23      	ldr	r2, [pc, #140]	@ (8006368 <vTaskStartScheduler+0xc8>)
 80062da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062dc:	4b22      	ldr	r3, [pc, #136]	@ (8006368 <vTaskStartScheduler+0xc8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e001      	b.n	80062ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d102      	bne.n	80062fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062f4:	f000 fd1a 	bl	8006d2c <xTimerCreateTimerTask>
 80062f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d11b      	bne.n	8006338 <vTaskStartScheduler+0x98>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
}
 8006312:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006314:	4b15      	ldr	r3, [pc, #84]	@ (800636c <vTaskStartScheduler+0xcc>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3354      	adds	r3, #84	@ 0x54
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <vTaskStartScheduler+0xd0>)
 800631c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800631e:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <vTaskStartScheduler+0xd4>)
 8006320:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006324:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006326:	4b14      	ldr	r3, [pc, #80]	@ (8006378 <vTaskStartScheduler+0xd8>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <vTaskStartScheduler+0xdc>)
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006332:	f001 f8e5 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006336:	e00f      	b.n	8006358 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800633e:	d10b      	bne.n	8006358 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <vTaskStartScheduler+0xb4>
}
 8006358:	bf00      	nop
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	08007e7c 	.word	0x08007e7c
 8006364:	080069b1 	.word	0x080069b1
 8006368:	20000eb4 	.word	0x20000eb4
 800636c:	200009bc 	.word	0x200009bc
 8006370:	20000010 	.word	0x20000010
 8006374:	20000eb0 	.word	0x20000eb0
 8006378:	20000e9c 	.word	0x20000e9c
 800637c:	20000e94 	.word	0x20000e94

08006380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006384:	4b04      	ldr	r3, [pc, #16]	@ (8006398 <vTaskSuspendAll+0x18>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a03      	ldr	r2, [pc, #12]	@ (8006398 <vTaskSuspendAll+0x18>)
 800638c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000eb8 	.word	0x20000eb8

0800639c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063aa:	4b42      	ldr	r3, [pc, #264]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <xTaskResumeAll+0x2e>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	603b      	str	r3, [r7, #0]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063ca:	f001 f93d 	bl	8007648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063ce:	4b39      	ldr	r3, [pc, #228]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	4a37      	ldr	r2, [pc, #220]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b36      	ldr	r3, [pc, #216]	@ (80064b4 <xTaskResumeAll+0x118>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d162      	bne.n	80064a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063e0:	4b35      	ldr	r3, [pc, #212]	@ (80064b8 <xTaskResumeAll+0x11c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d05e      	beq.n	80064a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e8:	e02f      	b.n	800644a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ea:	4b34      	ldr	r3, [pc, #208]	@ (80064bc <xTaskResumeAll+0x120>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3318      	adds	r3, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff f83a 	bl	8005470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff f835 	bl	8005470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640a:	4b2d      	ldr	r3, [pc, #180]	@ (80064c0 <xTaskResumeAll+0x124>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d903      	bls.n	800641a <xTaskResumeAll+0x7e>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <xTaskResumeAll+0x124>)
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4a27      	ldr	r2, [pc, #156]	@ (80064c4 <xTaskResumeAll+0x128>)
 8006428:	441a      	add	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe ffc0 	bl	80053b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643a:	4b23      	ldr	r3, [pc, #140]	@ (80064c8 <xTaskResumeAll+0x12c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	429a      	cmp	r2, r3
 8006442:	d302      	bcc.n	800644a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006444:	4b21      	ldr	r3, [pc, #132]	@ (80064cc <xTaskResumeAll+0x130>)
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800644a:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <xTaskResumeAll+0x120>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1cb      	bne.n	80063ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006458:	f000 fb66 	bl	8006b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800645c:	4b1c      	ldr	r3, [pc, #112]	@ (80064d0 <xTaskResumeAll+0x134>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006468:	f000 f846 	bl	80064f8 <xTaskIncrementTick>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006472:	4b16      	ldr	r3, [pc, #88]	@ (80064cc <xTaskResumeAll+0x130>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3b01      	subs	r3, #1
 800647c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f1      	bne.n	8006468 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006484:	4b12      	ldr	r3, [pc, #72]	@ (80064d0 <xTaskResumeAll+0x134>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800648a:	4b10      	ldr	r3, [pc, #64]	@ (80064cc <xTaskResumeAll+0x130>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006492:	2301      	movs	r3, #1
 8006494:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006496:	4b0f      	ldr	r3, [pc, #60]	@ (80064d4 <xTaskResumeAll+0x138>)
 8006498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a6:	f001 f901 	bl	80076ac <vPortExitCritical>

	return xAlreadyYielded;
 80064aa:	68bb      	ldr	r3, [r7, #8]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000eb8 	.word	0x20000eb8
 80064b8:	20000e90 	.word	0x20000e90
 80064bc:	20000e50 	.word	0x20000e50
 80064c0:	20000e98 	.word	0x20000e98
 80064c4:	200009c0 	.word	0x200009c0
 80064c8:	200009bc 	.word	0x200009bc
 80064cc:	20000ea4 	.word	0x20000ea4
 80064d0:	20000ea0 	.word	0x20000ea0
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064de:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <xTaskGetTickCount+0x1c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064e4:	687b      	ldr	r3, [r7, #4]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000e94 	.word	0x20000e94

080064f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006502:	4b4f      	ldr	r3, [pc, #316]	@ (8006640 <xTaskIncrementTick+0x148>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 8090 	bne.w	800662c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800650c:	4b4d      	ldr	r3, [pc, #308]	@ (8006644 <xTaskIncrementTick+0x14c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006514:	4a4b      	ldr	r2, [pc, #300]	@ (8006644 <xTaskIncrementTick+0x14c>)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d121      	bne.n	8006564 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006520:	4b49      	ldr	r3, [pc, #292]	@ (8006648 <xTaskIncrementTick+0x150>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <xTaskIncrementTick+0x4a>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	603b      	str	r3, [r7, #0]
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	e7fd      	b.n	800653e <xTaskIncrementTick+0x46>
 8006542:	4b41      	ldr	r3, [pc, #260]	@ (8006648 <xTaskIncrementTick+0x150>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	4b40      	ldr	r3, [pc, #256]	@ (800664c <xTaskIncrementTick+0x154>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a3e      	ldr	r2, [pc, #248]	@ (8006648 <xTaskIncrementTick+0x150>)
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	4a3e      	ldr	r2, [pc, #248]	@ (800664c <xTaskIncrementTick+0x154>)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b3e      	ldr	r3, [pc, #248]	@ (8006650 <xTaskIncrementTick+0x158>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a3c      	ldr	r2, [pc, #240]	@ (8006650 <xTaskIncrementTick+0x158>)
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	f000 fae2 	bl	8006b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006564:	4b3b      	ldr	r3, [pc, #236]	@ (8006654 <xTaskIncrementTick+0x15c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	d349      	bcc.n	8006602 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656e:	4b36      	ldr	r3, [pc, #216]	@ (8006648 <xTaskIncrementTick+0x150>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006578:	4b36      	ldr	r3, [pc, #216]	@ (8006654 <xTaskIncrementTick+0x15c>)
 800657a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800657e:	601a      	str	r2, [r3, #0]
					break;
 8006580:	e03f      	b.n	8006602 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006582:	4b31      	ldr	r3, [pc, #196]	@ (8006648 <xTaskIncrementTick+0x150>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d203      	bcs.n	80065a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800659a:	4a2e      	ldr	r2, [pc, #184]	@ (8006654 <xTaskIncrementTick+0x15c>)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065a0:	e02f      	b.n	8006602 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe ff62 	bl	8005470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3318      	adds	r3, #24
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe ff59 	bl	8005470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c2:	4b25      	ldr	r3, [pc, #148]	@ (8006658 <xTaskIncrementTick+0x160>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d903      	bls.n	80065d2 <xTaskIncrementTick+0xda>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	4a22      	ldr	r2, [pc, #136]	@ (8006658 <xTaskIncrementTick+0x160>)
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4a1f      	ldr	r2, [pc, #124]	@ (800665c <xTaskIncrementTick+0x164>)
 80065e0:	441a      	add	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f7fe fee4 	bl	80053b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006660 <xTaskIncrementTick+0x168>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d3b8      	bcc.n	800656e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006600:	e7b5      	b.n	800656e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006602:	4b17      	ldr	r3, [pc, #92]	@ (8006660 <xTaskIncrementTick+0x168>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006608:	4914      	ldr	r1, [pc, #80]	@ (800665c <xTaskIncrementTick+0x164>)
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d901      	bls.n	800661e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800661e:	4b11      	ldr	r3, [pc, #68]	@ (8006664 <xTaskIncrementTick+0x16c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006626:	2301      	movs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	e004      	b.n	8006636 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800662c:	4b0e      	ldr	r3, [pc, #56]	@ (8006668 <xTaskIncrementTick+0x170>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	4a0d      	ldr	r2, [pc, #52]	@ (8006668 <xTaskIncrementTick+0x170>)
 8006634:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006636:	697b      	ldr	r3, [r7, #20]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000eb8 	.word	0x20000eb8
 8006644:	20000e94 	.word	0x20000e94
 8006648:	20000e48 	.word	0x20000e48
 800664c:	20000e4c 	.word	0x20000e4c
 8006650:	20000ea8 	.word	0x20000ea8
 8006654:	20000eb0 	.word	0x20000eb0
 8006658:	20000e98 	.word	0x20000e98
 800665c:	200009c0 	.word	0x200009c0
 8006660:	200009bc 	.word	0x200009bc
 8006664:	20000ea4 	.word	0x20000ea4
 8006668:	20000ea0 	.word	0x20000ea0

0800666c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006672:	4b2b      	ldr	r3, [pc, #172]	@ (8006720 <vTaskSwitchContext+0xb4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800667a:	4b2a      	ldr	r3, [pc, #168]	@ (8006724 <vTaskSwitchContext+0xb8>)
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006680:	e047      	b.n	8006712 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006682:	4b28      	ldr	r3, [pc, #160]	@ (8006724 <vTaskSwitchContext+0xb8>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006688:	4b27      	ldr	r3, [pc, #156]	@ (8006728 <vTaskSwitchContext+0xbc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e011      	b.n	80066b4 <vTaskSwitchContext+0x48>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10b      	bne.n	80066ae <vTaskSwitchContext+0x42>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	607b      	str	r3, [r7, #4]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <vTaskSwitchContext+0x3e>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	491d      	ldr	r1, [pc, #116]	@ (800672c <vTaskSwitchContext+0xc0>)
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0e3      	beq.n	8006690 <vTaskSwitchContext+0x24>
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a16      	ldr	r2, [pc, #88]	@ (800672c <vTaskSwitchContext+0xc0>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3308      	adds	r3, #8
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d104      	bne.n	80066f8 <vTaskSwitchContext+0x8c>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	605a      	str	r2, [r3, #4]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006730 <vTaskSwitchContext+0xc4>)
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	4a09      	ldr	r2, [pc, #36]	@ (8006728 <vTaskSwitchContext+0xbc>)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <vTaskSwitchContext+0xc4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3354      	adds	r3, #84	@ 0x54
 800670e:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <vTaskSwitchContext+0xc8>)
 8006710:	6013      	str	r3, [r2, #0]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000eb8 	.word	0x20000eb8
 8006724:	20000ea4 	.word	0x20000ea4
 8006728:	20000e98 	.word	0x20000e98
 800672c:	200009c0 	.word	0x200009c0
 8006730:	200009bc 	.word	0x200009bc
 8006734:	20000010 	.word	0x20000010

08006738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006760:	4b07      	ldr	r3, [pc, #28]	@ (8006780 <vTaskPlaceOnEventList+0x48>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3318      	adds	r3, #24
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fe fe48 	bl	80053fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800676e:	2101      	movs	r1, #1
 8006770:	6838      	ldr	r0, [r7, #0]
 8006772:	f000 fa87 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200009bc 	.word	0x200009bc

08006784 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	617b      	str	r3, [r7, #20]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067ae:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3318      	adds	r3, #24
 80067b4:	4619      	mov	r1, r3
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7fe fdfd 	bl	80053b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	68b8      	ldr	r0, [r7, #8]
 80067cc:	f000 fa5a 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
	}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200009bc 	.word	0x200009bc

080067dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60fb      	str	r3, [r7, #12]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3318      	adds	r3, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fe2e 	bl	8005470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006814:	4b1d      	ldr	r3, [pc, #116]	@ (800688c <xTaskRemoveFromEventList+0xb0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11d      	bne.n	8006858 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3304      	adds	r3, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fe25 	bl	8005470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682a:	4b19      	ldr	r3, [pc, #100]	@ (8006890 <xTaskRemoveFromEventList+0xb4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d903      	bls.n	800683a <xTaskRemoveFromEventList+0x5e>
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	4a16      	ldr	r2, [pc, #88]	@ (8006890 <xTaskRemoveFromEventList+0xb4>)
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4a13      	ldr	r2, [pc, #76]	@ (8006894 <xTaskRemoveFromEventList+0xb8>)
 8006848:	441a      	add	r2, r3
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3304      	adds	r3, #4
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f7fe fdb0 	bl	80053b6 <vListInsertEnd>
 8006856:	e005      	b.n	8006864 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3318      	adds	r3, #24
 800685c:	4619      	mov	r1, r3
 800685e:	480e      	ldr	r0, [pc, #56]	@ (8006898 <xTaskRemoveFromEventList+0xbc>)
 8006860:	f7fe fda9 	bl	80053b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006868:	4b0c      	ldr	r3, [pc, #48]	@ (800689c <xTaskRemoveFromEventList+0xc0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	429a      	cmp	r2, r3
 8006870:	d905      	bls.n	800687e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006876:	4b0a      	ldr	r3, [pc, #40]	@ (80068a0 <xTaskRemoveFromEventList+0xc4>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e001      	b.n	8006882 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006882:	697b      	ldr	r3, [r7, #20]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000eb8 	.word	0x20000eb8
 8006890:	20000e98 	.word	0x20000e98
 8006894:	200009c0 	.word	0x200009c0
 8006898:	20000e50 	.word	0x20000e50
 800689c:	200009bc 	.word	0x200009bc
 80068a0:	20000ea4 	.word	0x20000ea4

080068a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068ac:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <vTaskInternalSetTimeOutState+0x24>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068b4:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <vTaskInternalSetTimeOutState+0x28>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	605a      	str	r2, [r3, #4]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	20000ea8 	.word	0x20000ea8
 80068cc:	20000e94 	.word	0x20000e94

080068d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	613b      	str	r3, [r7, #16]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006916:	f000 fe97 	bl	8007648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800691a:	4b1d      	ldr	r3, [pc, #116]	@ (8006990 <xTaskCheckForTimeOut+0xc0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006932:	d102      	bne.n	800693a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e023      	b.n	8006982 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <xTaskCheckForTimeOut+0xc4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d007      	beq.n	8006956 <xTaskCheckForTimeOut+0x86>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e015      	b.n	8006982 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d20b      	bcs.n	8006978 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff99 	bl	80068a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e004      	b.n	8006982 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800697e:	2301      	movs	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006982:	f000 fe93 	bl	80076ac <vPortExitCritical>

	return xReturn;
 8006986:	69fb      	ldr	r3, [r7, #28]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20000e94 	.word	0x20000e94
 8006994:	20000ea8 	.word	0x20000ea8

08006998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800699c:	4b03      	ldr	r3, [pc, #12]	@ (80069ac <vTaskMissedYield+0x14>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000ea4 	.word	0x20000ea4

080069b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069b8:	f000 f852 	bl	8006a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <prvIdleTask+0x28>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d9f9      	bls.n	80069b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069c4:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <prvIdleTask+0x2c>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069d4:	e7f0      	b.n	80069b8 <prvIdleTask+0x8>
 80069d6:	bf00      	nop
 80069d8:	200009c0 	.word	0x200009c0
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e6:	2300      	movs	r3, #0
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	e00c      	b.n	8006a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a12      	ldr	r2, [pc, #72]	@ (8006a40 <prvInitialiseTaskLists+0x60>)
 80069f8:	4413      	add	r3, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fcae 	bl	800535c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3301      	adds	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b37      	cmp	r3, #55	@ 0x37
 8006a0a:	d9ef      	bls.n	80069ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a0c:	480d      	ldr	r0, [pc, #52]	@ (8006a44 <prvInitialiseTaskLists+0x64>)
 8006a0e:	f7fe fca5 	bl	800535c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a12:	480d      	ldr	r0, [pc, #52]	@ (8006a48 <prvInitialiseTaskLists+0x68>)
 8006a14:	f7fe fca2 	bl	800535c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a18:	480c      	ldr	r0, [pc, #48]	@ (8006a4c <prvInitialiseTaskLists+0x6c>)
 8006a1a:	f7fe fc9f 	bl	800535c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a1e:	480c      	ldr	r0, [pc, #48]	@ (8006a50 <prvInitialiseTaskLists+0x70>)
 8006a20:	f7fe fc9c 	bl	800535c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a24:	480b      	ldr	r0, [pc, #44]	@ (8006a54 <prvInitialiseTaskLists+0x74>)
 8006a26:	f7fe fc99 	bl	800535c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <prvInitialiseTaskLists+0x78>)
 8006a2c:	4a05      	ldr	r2, [pc, #20]	@ (8006a44 <prvInitialiseTaskLists+0x64>)
 8006a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a30:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <prvInitialiseTaskLists+0x7c>)
 8006a32:	4a05      	ldr	r2, [pc, #20]	@ (8006a48 <prvInitialiseTaskLists+0x68>)
 8006a34:	601a      	str	r2, [r3, #0]
}
 8006a36:	bf00      	nop
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200009c0 	.word	0x200009c0
 8006a44:	20000e20 	.word	0x20000e20
 8006a48:	20000e34 	.word	0x20000e34
 8006a4c:	20000e50 	.word	0x20000e50
 8006a50:	20000e64 	.word	0x20000e64
 8006a54:	20000e7c 	.word	0x20000e7c
 8006a58:	20000e48 	.word	0x20000e48
 8006a5c:	20000e4c 	.word	0x20000e4c

08006a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a66:	e019      	b.n	8006a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a68:	f000 fdee 	bl	8007648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6c:	4b10      	ldr	r3, [pc, #64]	@ (8006ab0 <prvCheckTasksWaitingTermination+0x50>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe fcf9 	bl	8005470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x54>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	4a0b      	ldr	r2, [pc, #44]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x54>)
 8006a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a88:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x58>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x58>)
 8006a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a92:	f000 fe0b 	bl	80076ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f810 	bl	8006abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x58>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e1      	bne.n	8006a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000e64 	.word	0x20000e64
 8006ab4:	20000e90 	.word	0x20000e90
 8006ab8:	20000e78 	.word	0x20000e78

08006abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3354      	adds	r3, #84	@ 0x54
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f8d5 	bl	8007c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d108      	bne.n	8006aea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ffa3 	bl	8007a28 <vPortFree>
				vPortFree( pxTCB );
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 ffa0 	bl	8007a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ae8:	e019      	b.n	8006b1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d103      	bne.n	8006afc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 ff97 	bl	8007a28 <vPortFree>
	}
 8006afa:	e010      	b.n	8006b1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d00b      	beq.n	8006b1e <prvDeleteTCB+0x62>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <prvDeleteTCB+0x5e>
	}
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <prvResetNextTaskUnblockTime+0x38>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b38:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <prvResetNextTaskUnblockTime+0x3c>)
 8006b3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b40:	e008      	b.n	8006b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b42:	4b07      	ldr	r3, [pc, #28]	@ (8006b60 <prvResetNextTaskUnblockTime+0x38>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4a04      	ldr	r2, [pc, #16]	@ (8006b64 <prvResetNextTaskUnblockTime+0x3c>)
 8006b52:	6013      	str	r3, [r2, #0]
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000e48 	.word	0x20000e48
 8006b64:	20000eb0 	.word	0x20000eb0

08006b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <xTaskGetSchedulerState+0x34>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b76:	2301      	movs	r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	e008      	b.n	8006b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <xTaskGetSchedulerState+0x38>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b84:	2302      	movs	r3, #2
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	e001      	b.n	8006b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b8e:	687b      	ldr	r3, [r7, #4]
	}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	20000e9c 	.word	0x20000e9c
 8006ba0:	20000eb8 	.word	0x20000eb8

08006ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d058      	beq.n	8006c6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bba:	4b2f      	ldr	r3, [pc, #188]	@ (8006c78 <xTaskPriorityDisinherit+0xd4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d00b      	beq.n	8006bdc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60bb      	str	r3, [r7, #8]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d02c      	beq.n	8006c6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d128      	bne.n	8006c6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fc26 	bl	8005470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <xTaskPriorityDisinherit+0xd8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <xTaskPriorityDisinherit+0xa8>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	4a0c      	ldr	r2, [pc, #48]	@ (8006c7c <xTaskPriorityDisinherit+0xd8>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <xTaskPriorityDisinherit+0xdc>)
 8006c5a:	441a      	add	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f7fe fba7 	bl	80053b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c6c:	697b      	ldr	r3, [r7, #20]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200009bc 	.word	0x200009bc
 8006c7c:	20000e98 	.word	0x20000e98
 8006c80:	200009c0 	.word	0x200009c0

08006c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c8e:	4b21      	ldr	r3, [pc, #132]	@ (8006d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c94:	4b20      	ldr	r3, [pc, #128]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fbe8 	bl	8005470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ca6:	d10a      	bne.n	8006cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cae:	4b1a      	ldr	r3, [pc, #104]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4819      	ldr	r0, [pc, #100]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8006cb8:	f7fe fb7d 	bl	80053b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cbc:	e026      	b.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cc6:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d209      	bcs.n	8006cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd6:	4b12      	ldr	r3, [pc, #72]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b0f      	ldr	r3, [pc, #60]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fe fb8b 	bl	80053fe <vListInsert>
}
 8006ce8:	e010      	b.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cea:	4b0e      	ldr	r3, [pc, #56]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b0a      	ldr	r3, [pc, #40]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7fe fb81 	bl	80053fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d202      	bcs.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d06:	4a08      	ldr	r2, [pc, #32]	@ (8006d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6013      	str	r3, [r2, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000e94 	.word	0x20000e94
 8006d18:	200009bc 	.word	0x200009bc
 8006d1c:	20000e7c 	.word	0x20000e7c
 8006d20:	20000e4c 	.word	0x20000e4c
 8006d24:	20000e48 	.word	0x20000e48
 8006d28:	20000eb0 	.word	0x20000eb0

08006d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	@ 0x28
 8006d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d36:	f000 fb13 	bl	8007360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006db0 <xTimerCreateTimerTask+0x84>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d021      	beq.n	8006d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d4a:	1d3a      	adds	r2, r7, #4
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	f107 030c 	add.w	r3, r7, #12
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fae7 	bl	8005328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	9202      	str	r2, [sp, #8]
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	2302      	movs	r3, #2
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	4911      	ldr	r1, [pc, #68]	@ (8006db4 <xTimerCreateTimerTask+0x88>)
 8006d6e:	4812      	ldr	r0, [pc, #72]	@ (8006db8 <xTimerCreateTimerTask+0x8c>)
 8006d70:	f7ff f8a2 	bl	8005eb8 <xTaskCreateStatic>
 8006d74:	4603      	mov	r3, r0
 8006d76:	4a11      	ldr	r2, [pc, #68]	@ (8006dbc <xTimerCreateTimerTask+0x90>)
 8006d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d7a:	4b10      	ldr	r3, [pc, #64]	@ (8006dbc <xTimerCreateTimerTask+0x90>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	613b      	str	r3, [r7, #16]
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006da4:	697b      	ldr	r3, [r7, #20]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000eec 	.word	0x20000eec
 8006db4:	08007e84 	.word	0x08007e84
 8006db8:	08006ef9 	.word	0x08006ef9
 8006dbc:	20000ef0 	.word	0x20000ef0

08006dc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	@ 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	623b      	str	r3, [r7, #32]
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006df0:	4b19      	ldr	r3, [pc, #100]	@ (8006e58 <xTimerGenericCommand+0x98>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02a      	beq.n	8006e4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	dc18      	bgt.n	8006e3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e0a:	f7ff fead 	bl	8006b68 <xTaskGetSchedulerState>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d109      	bne.n	8006e28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e14:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <xTimerGenericCommand+0x98>)
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	f107 0110 	add.w	r1, r7, #16
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e20:	f7fe fc5a 	bl	80056d8 <xQueueGenericSend>
 8006e24:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e26:	e012      	b.n	8006e4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e28:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <xTimerGenericCommand+0x98>)
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	f107 0110 	add.w	r1, r7, #16
 8006e30:	2300      	movs	r3, #0
 8006e32:	2200      	movs	r2, #0
 8006e34:	f7fe fc50 	bl	80056d8 <xQueueGenericSend>
 8006e38:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e3a:	e008      	b.n	8006e4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e3c:	4b06      	ldr	r3, [pc, #24]	@ (8006e58 <xTimerGenericCommand+0x98>)
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	f107 0110 	add.w	r1, r7, #16
 8006e44:	2300      	movs	r3, #0
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	f7fe fd48 	bl	80058dc <xQueueGenericSendFromISR>
 8006e4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3728      	adds	r7, #40	@ 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000eec 	.word	0x20000eec

08006e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e66:	4b23      	ldr	r3, [pc, #140]	@ (8006ef4 <prvProcessExpiredTimer+0x98>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fe fafb 	bl	8005470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d023      	beq.n	8006ed0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	18d1      	adds	r1, r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6978      	ldr	r0, [r7, #20]
 8006e96:	f000 f8d5 	bl	8007044 <prvInsertTimerInActiveList>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d020      	beq.n	8006ee2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6978      	ldr	r0, [r7, #20]
 8006eac:	f7ff ff88 	bl	8006dc0 <xTimerGenericCommand>
 8006eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d114      	bne.n	8006ee2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	6978      	ldr	r0, [r7, #20]
 8006ee8:	4798      	blx	r3
}
 8006eea:	bf00      	nop
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000ee4 	.word	0x20000ee4

08006ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f00:	f107 0308 	add.w	r3, r7, #8
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 f859 	bl	8006fbc <prvGetNextExpireTime>
 8006f0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f805 	bl	8006f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f16:	f000 f8d7 	bl	80070c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f1a:	bf00      	nop
 8006f1c:	e7f0      	b.n	8006f00 <prvTimerTask+0x8>
	...

08006f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f2a:	f7ff fa29 	bl	8006380 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f866 	bl	8007004 <prvSampleTimeNow>
 8006f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d130      	bne.n	8006fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d806      	bhi.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f4e:	f7ff fa25 	bl	800639c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff81 	bl	8006e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f5a:	e024      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f62:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <prvProcessTimerOrBlockTask+0x90>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <prvProcessTimerOrBlockTask+0x50>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <prvProcessTimerOrBlockTask+0x52>
 8006f70:	2300      	movs	r3, #0
 8006f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <prvProcessTimerOrBlockTask+0x94>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7fe ff65 	bl	8005e50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f86:	f7ff fa09 	bl	800639c <xTaskResumeAll>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f90:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <prvProcessTimerOrBlockTask+0x98>)
 8006f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	f3bf 8f6f 	isb	sy
}
 8006fa0:	e001      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fa2:	f7ff f9fb 	bl	800639c <xTaskResumeAll>
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000ee8 	.word	0x20000ee8
 8006fb4:	20000eec 	.word	0x20000eec
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007000 <prvGetNextExpireTime+0x44>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <prvGetNextExpireTime+0x16>
 8006fce:	2201      	movs	r2, #1
 8006fd0:	e000      	b.n	8006fd4 <prvGetNextExpireTime+0x18>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe0:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <prvGetNextExpireTime+0x44>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e001      	b.n	8006ff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000ee4 	.word	0x20000ee4

08007004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800700c:	f7ff fa64 	bl	80064d8 <xTaskGetTickCount>
 8007010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007012:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <prvSampleTimeNow+0x3c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d205      	bcs.n	8007028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800701c:	f000 f93a 	bl	8007294 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e002      	b.n	800702e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800702e:	4a04      	ldr	r2, [pc, #16]	@ (8007040 <prvSampleTimeNow+0x3c>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000ef4 	.word	0x20000ef4

08007044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d812      	bhi.n	8007090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e01b      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b10      	ldr	r3, [pc, #64]	@ (80070c0 <prvInsertTimerInActiveList+0x7c>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe f9b8 	bl	80053fe <vListInsert>
 800708e:	e012      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d206      	bcs.n	80070a6 <prvInsertTimerInActiveList+0x62>
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e007      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070a6:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <prvInsertTimerInActiveList+0x80>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7fe f9a4 	bl	80053fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070b6:	697b      	ldr	r3, [r7, #20]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000ee8 	.word	0x20000ee8
 80070c4:	20000ee4 	.word	0x20000ee4

080070c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	@ 0x38
 80070cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ce:	e0ce      	b.n	800726e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da19      	bge.n	800710a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	3304      	adds	r3, #4
 80070da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61fb      	str	r3, [r7, #28]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007100:	6850      	ldr	r0, [r2, #4]
 8007102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007104:	6892      	ldr	r2, [r2, #8]
 8007106:	4611      	mov	r1, r2
 8007108:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f2c0 80ae 	blt.w	800726e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe f9a4 	bl	8005470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007128:	463b      	mov	r3, r7
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff6a 	bl	8007004 <prvSampleTimeNow>
 8007130:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b09      	cmp	r3, #9
 8007136:	f200 8097 	bhi.w	8007268 <prvProcessReceivedCommands+0x1a0>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <prvProcessReceivedCommands+0x78>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007169 	.word	0x08007169
 8007144:	08007169 	.word	0x08007169
 8007148:	08007169 	.word	0x08007169
 800714c:	080071df 	.word	0x080071df
 8007150:	080071f3 	.word	0x080071f3
 8007154:	0800723f 	.word	0x0800723f
 8007158:	08007169 	.word	0x08007169
 800715c:	08007169 	.word	0x08007169
 8007160:	080071df 	.word	0x080071df
 8007164:	080071f3 	.word	0x080071f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	18d1      	adds	r1, r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007188:	f7ff ff5c 	bl	8007044 <prvInsertTimerInActiveList>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d06c      	beq.n	800726c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d061      	beq.n	800726c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	441a      	add	r2, r3
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ba:	f7ff fe01 	bl	8006dc0 <xTimerGenericCommand>
 80071be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d152      	bne.n	800726c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	61bb      	str	r3, [r7, #24]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071f0:	e03d      	b.n	800726e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	617b      	str	r3, [r7, #20]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800722a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	18d1      	adds	r1, r2, r3
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007238:	f7ff ff04 	bl	8007044 <prvInsertTimerInActiveList>
					break;
 800723c:	e017      	b.n	800726e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800724c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800724e:	f000 fbeb 	bl	8007a28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007252:	e00c      	b.n	800726e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007266:	e002      	b.n	800726e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <prvProcessReceivedCommands+0x1a6>
					break;
 800726c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800726e:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <prvProcessReceivedCommands+0x1c8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	1d39      	adds	r1, r7, #4
 8007274:	2200      	movs	r2, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fbce 	bl	8005a18 <xQueueReceive>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	f47f af26 	bne.w	80070d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	3730      	adds	r7, #48	@ 0x30
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000eec 	.word	0x20000eec

08007294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800729a:	e049      	b.n	8007330 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800729c:	4b2e      	ldr	r3, [pc, #184]	@ (8007358 <prvSwitchTimerLists+0xc4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007358 <prvSwitchTimerLists+0xc4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe f8db 	bl	8005470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02f      	beq.n	8007330 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d90e      	bls.n	8007300 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007358 <prvSwitchTimerLists+0xc4>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7fe f880 	bl	80053fe <vListInsert>
 80072fe:	e017      	b.n	8007330 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007300:	2300      	movs	r3, #0
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	2100      	movs	r1, #0
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fd58 	bl	8006dc0 <xTimerGenericCommand>
 8007310:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	603b      	str	r3, [r7, #0]
}
 800732a:	bf00      	nop
 800732c:	bf00      	nop
 800732e:	e7fd      	b.n	800732c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007330:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <prvSwitchTimerLists+0xc4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1b0      	bne.n	800729c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800733a:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <prvSwitchTimerLists+0xc4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <prvSwitchTimerLists+0xc8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a04      	ldr	r2, [pc, #16]	@ (8007358 <prvSwitchTimerLists+0xc4>)
 8007346:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007348:	4a04      	ldr	r2, [pc, #16]	@ (800735c <prvSwitchTimerLists+0xc8>)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6013      	str	r3, [r2, #0]
}
 800734e:	bf00      	nop
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000ee4 	.word	0x20000ee4
 800735c:	20000ee8 	.word	0x20000ee8

08007360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007366:	f000 f96f 	bl	8007648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800736a:	4b15      	ldr	r3, [pc, #84]	@ (80073c0 <prvCheckForValidListAndQueue+0x60>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d120      	bne.n	80073b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007372:	4814      	ldr	r0, [pc, #80]	@ (80073c4 <prvCheckForValidListAndQueue+0x64>)
 8007374:	f7fd fff2 	bl	800535c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007378:	4813      	ldr	r0, [pc, #76]	@ (80073c8 <prvCheckForValidListAndQueue+0x68>)
 800737a:	f7fd ffef 	bl	800535c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800737e:	4b13      	ldr	r3, [pc, #76]	@ (80073cc <prvCheckForValidListAndQueue+0x6c>)
 8007380:	4a10      	ldr	r2, [pc, #64]	@ (80073c4 <prvCheckForValidListAndQueue+0x64>)
 8007382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007384:	4b12      	ldr	r3, [pc, #72]	@ (80073d0 <prvCheckForValidListAndQueue+0x70>)
 8007386:	4a10      	ldr	r2, [pc, #64]	@ (80073c8 <prvCheckForValidListAndQueue+0x68>)
 8007388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800738a:	2300      	movs	r3, #0
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4b11      	ldr	r3, [pc, #68]	@ (80073d4 <prvCheckForValidListAndQueue+0x74>)
 8007390:	4a11      	ldr	r2, [pc, #68]	@ (80073d8 <prvCheckForValidListAndQueue+0x78>)
 8007392:	2110      	movs	r1, #16
 8007394:	200a      	movs	r0, #10
 8007396:	f7fe f8ff 	bl	8005598 <xQueueGenericCreateStatic>
 800739a:	4603      	mov	r3, r0
 800739c:	4a08      	ldr	r2, [pc, #32]	@ (80073c0 <prvCheckForValidListAndQueue+0x60>)
 800739e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073a0:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <prvCheckForValidListAndQueue+0x60>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <prvCheckForValidListAndQueue+0x60>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	490b      	ldr	r1, [pc, #44]	@ (80073dc <prvCheckForValidListAndQueue+0x7c>)
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fd24 	bl	8005dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073b4:	f000 f97a 	bl	80076ac <vPortExitCritical>
}
 80073b8:	bf00      	nop
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000eec 	.word	0x20000eec
 80073c4:	20000ebc 	.word	0x20000ebc
 80073c8:	20000ed0 	.word	0x20000ed0
 80073cc:	20000ee4 	.word	0x20000ee4
 80073d0:	20000ee8 	.word	0x20000ee8
 80073d4:	20000f98 	.word	0x20000f98
 80073d8:	20000ef8 	.word	0x20000ef8
 80073dc:	08007e8c 	.word	0x08007e8c

080073e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3b04      	subs	r3, #4
 80073f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f023 0201 	bic.w	r2, r3, #1
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b04      	subs	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007410:	4a0c      	ldr	r2, [pc, #48]	@ (8007444 <pxPortInitialiseStack+0x64>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3b14      	subs	r3, #20
 800741a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b04      	subs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f06f 0202 	mvn.w	r2, #2
 800742e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3b20      	subs	r3, #32
 8007434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	08007449 	.word	0x08007449

08007448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007452:	4b13      	ldr	r3, [pc, #76]	@ (80074a0 <prvTaskExitError+0x58>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800745a:	d00b      	beq.n	8007474 <prvTaskExitError+0x2c>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <prvTaskExitError+0x28>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	60bb      	str	r3, [r7, #8]
}
 8007486:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007488:	bf00      	nop
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0fc      	beq.n	800748a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	2000000c 	.word	0x2000000c
	...

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	@ (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b47      	ldr	r3, [pc, #284]	@ (8007624 <xPortStartScheduler+0x124>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a47      	ldr	r2, [pc, #284]	@ (8007628 <xPortStartScheduler+0x128>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10b      	bne.n	8007528 <xPortStartScheduler+0x28>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007528:	4b3e      	ldr	r3, [pc, #248]	@ (8007624 <xPortStartScheduler+0x124>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3f      	ldr	r2, [pc, #252]	@ (800762c <xPortStartScheduler+0x12c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10b      	bne.n	800754a <xPortStartScheduler+0x4a>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60fb      	str	r3, [r7, #12]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800754a:	4b39      	ldr	r3, [pc, #228]	@ (8007630 <xPortStartScheduler+0x130>)
 800754c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	22ff      	movs	r2, #255	@ 0xff
 800755a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800756c:	b2da      	uxtb	r2, r3
 800756e:	4b31      	ldr	r3, [pc, #196]	@ (8007634 <xPortStartScheduler+0x134>)
 8007570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007572:	4b31      	ldr	r3, [pc, #196]	@ (8007638 <xPortStartScheduler+0x138>)
 8007574:	2207      	movs	r2, #7
 8007576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007578:	e009      	b.n	800758e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800757a:	4b2f      	ldr	r3, [pc, #188]	@ (8007638 <xPortStartScheduler+0x138>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <xPortStartScheduler+0x138>)
 8007582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	b2db      	uxtb	r3, r3
 800758c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007596:	2b80      	cmp	r3, #128	@ 0x80
 8007598:	d0ef      	beq.n	800757a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800759a:	4b27      	ldr	r3, [pc, #156]	@ (8007638 <xPortStartScheduler+0x138>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f1c3 0307 	rsb	r3, r3, #7
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d00b      	beq.n	80075be <xPortStartScheduler+0xbe>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075be:	4b1e      	ldr	r3, [pc, #120]	@ (8007638 <xPortStartScheduler+0x138>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007638 <xPortStartScheduler+0x138>)
 80075c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007638 <xPortStartScheduler+0x138>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075d0:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <xPortStartScheduler+0x138>)
 80075d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075dc:	4b17      	ldr	r3, [pc, #92]	@ (800763c <xPortStartScheduler+0x13c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a16      	ldr	r2, [pc, #88]	@ (800763c <xPortStartScheduler+0x13c>)
 80075e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e8:	4b14      	ldr	r3, [pc, #80]	@ (800763c <xPortStartScheduler+0x13c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a13      	ldr	r2, [pc, #76]	@ (800763c <xPortStartScheduler+0x13c>)
 80075ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075f4:	f000 f8da 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <xPortStartScheduler+0x140>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075fe:	f000 f8f9 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <xPortStartScheduler+0x144>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a0f      	ldr	r2, [pc, #60]	@ (8007644 <xPortStartScheduler+0x144>)
 8007608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800760e:	f7ff ff63 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007612:	f7ff f82b 	bl	800666c <vTaskSwitchContext>
	prvTaskExitError();
 8007616:	f7ff ff17 	bl	8007448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed00 	.word	0xe000ed00
 8007628:	410fc271 	.word	0x410fc271
 800762c:	410fc270 	.word	0x410fc270
 8007630:	e000e400 	.word	0xe000e400
 8007634:	20000fe8 	.word	0x20000fe8
 8007638:	20000fec 	.word	0x20000fec
 800763c:	e000ed20 	.word	0xe000ed20
 8007640:	2000000c 	.word	0x2000000c
 8007644:	e000ef34 	.word	0xe000ef34

08007648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007662:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <vPortEnterCritical+0x5c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	4a0e      	ldr	r2, [pc, #56]	@ (80076a4 <vPortEnterCritical+0x5c>)
 800766a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800766c:	4b0d      	ldr	r3, [pc, #52]	@ (80076a4 <vPortEnterCritical+0x5c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d110      	bne.n	8007696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007674:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <vPortEnterCritical+0x60>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <vPortEnterCritical+0x4e>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	603b      	str	r3, [r7, #0]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <vPortEnterCritical+0x4a>
	}
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000000c 	.word	0x2000000c
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076b2:	4b12      	ldr	r3, [pc, #72]	@ (80076fc <vPortExitCritical+0x50>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <vPortExitCritical+0x26>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	607b      	str	r3, [r7, #4]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <vPortExitCritical+0x50>)
 80076da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <vPortExitCritical+0x50>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <vPortExitCritical+0x44>
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7fe ff9c 	bl	800666c <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7fe feb9 	bl	80064f8 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <xPortSysTickHandler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d915      	bls.n	8007846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781a:	4a18      	ldr	r2, [pc, #96]	@ (800787c <vPortValidateInterruptPriority+0x74>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007824:	4b16      	ldr	r3, [pc, #88]	@ (8007880 <vPortValidateInterruptPriority+0x78>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	429a      	cmp	r2, r3
 800782c:	d20b      	bcs.n	8007846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007846:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <vPortValidateInterruptPriority+0x7c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800784e:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <vPortValidateInterruptPriority+0x80>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d90b      	bls.n	800786e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	603b      	str	r3, [r7, #0]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <vPortValidateInterruptPriority+0x62>
	}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e3f0 	.word	0xe000e3f0
 8007880:	20000fe8 	.word	0x20000fe8
 8007884:	e000ed0c 	.word	0xe000ed0c
 8007888:	20000fec 	.word	0x20000fec

0800788c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	@ 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007898:	f7fe fd72 	bl	8006380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800789c:	4b5c      	ldr	r3, [pc, #368]	@ (8007a10 <pvPortMalloc+0x184>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a4:	f000 f924 	bl	8007af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a14 <pvPortMalloc+0x188>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4013      	ands	r3, r2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f040 8095 	bne.w	80079e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01e      	beq.n	80078fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078bc:	2208      	movs	r2, #8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4413      	add	r3, r2
 80078c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d015      	beq.n	80078fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	3308      	adds	r3, #8
 80078d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <pvPortMalloc+0x6e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	617b      	str	r3, [r7, #20]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d06f      	beq.n	80079e0 <pvPortMalloc+0x154>
 8007900:	4b45      	ldr	r3, [pc, #276]	@ (8007a18 <pvPortMalloc+0x18c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d86a      	bhi.n	80079e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800790a:	4b44      	ldr	r3, [pc, #272]	@ (8007a1c <pvPortMalloc+0x190>)
 800790c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800790e:	4b43      	ldr	r3, [pc, #268]	@ (8007a1c <pvPortMalloc+0x190>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007914:	e004      	b.n	8007920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	429a      	cmp	r2, r3
 8007928:	d903      	bls.n	8007932 <pvPortMalloc+0xa6>
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f1      	bne.n	8007916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007932:	4b37      	ldr	r3, [pc, #220]	@ (8007a10 <pvPortMalloc+0x184>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007938:	429a      	cmp	r2, r3
 800793a:	d051      	beq.n	80079e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2208      	movs	r2, #8
 8007942:	4413      	add	r3, r2
 8007944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	2308      	movs	r3, #8
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	429a      	cmp	r2, r3
 800795c:	d920      	bls.n	80079a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800795e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4413      	add	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <pvPortMalloc+0xfc>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800799a:	69b8      	ldr	r0, [r7, #24]
 800799c:	f000 f90a 	bl	8007bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <pvPortMalloc+0x194>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d203      	bcs.n	80079c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079ba:	4b17      	ldr	r3, [pc, #92]	@ (8007a18 <pvPortMalloc+0x18c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a18      	ldr	r2, [pc, #96]	@ (8007a20 <pvPortMalloc+0x194>)
 80079c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <pvPortMalloc+0x188>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079d6:	4b13      	ldr	r3, [pc, #76]	@ (8007a24 <pvPortMalloc+0x198>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	4a11      	ldr	r2, [pc, #68]	@ (8007a24 <pvPortMalloc+0x198>)
 80079de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e0:	f7fe fcdc 	bl	800639c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <pvPortMalloc+0x17a>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60fb      	str	r3, [r7, #12]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <pvPortMalloc+0x176>
	return pvReturn;
 8007a06:	69fb      	ldr	r3, [r7, #28]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3728      	adds	r7, #40	@ 0x28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20001bf8 	.word	0x20001bf8
 8007a14:	20001c0c 	.word	0x20001c0c
 8007a18:	20001bfc 	.word	0x20001bfc
 8007a1c:	20001bf0 	.word	0x20001bf0
 8007a20:	20001c00 	.word	0x20001c00
 8007a24:	20001c04 	.word	0x20001c04

08007a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d04f      	beq.n	8007ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	425b      	negs	r3, r3
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4413      	add	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ae4 <vPortFree+0xbc>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4013      	ands	r3, r2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <vPortFree+0x46>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	60fb      	str	r3, [r7, #12]
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	e7fd      	b.n	8007a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <vPortFree+0x66>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4b14      	ldr	r3, [pc, #80]	@ (8007ae4 <vPortFree+0xbc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4013      	ands	r3, r2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01e      	beq.n	8007ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11a      	bne.n	8007ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae4 <vPortFree+0xbc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	43db      	mvns	r3, r3
 8007aae:	401a      	ands	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab4:	f7fe fc64 	bl	8006380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <vPortFree+0xc0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4a09      	ldr	r2, [pc, #36]	@ (8007ae8 <vPortFree+0xc0>)
 8007ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ac6:	6938      	ldr	r0, [r7, #16]
 8007ac8:	f000 f874 	bl	8007bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <vPortFree+0xc4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a06      	ldr	r2, [pc, #24]	@ (8007aec <vPortFree+0xc4>)
 8007ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ad6:	f7fe fc61 	bl	800639c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001c0c 	.word	0x20001c0c
 8007ae8:	20001bfc 	.word	0x20001bfc
 8007aec:	20001c08 	.word	0x20001c08

08007af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007af6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007afc:	4b27      	ldr	r3, [pc, #156]	@ (8007b9c <prvHeapInit+0xac>)
 8007afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00c      	beq.n	8007b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3307      	adds	r3, #7
 8007b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0307 	bic.w	r3, r3, #7
 8007b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b9c <prvHeapInit+0xac>)
 8007b20:	4413      	add	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba0 <prvHeapInit+0xb0>)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba0 <prvHeapInit+0xb0>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b52:	4b14      	ldr	r3, [pc, #80]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <prvHeapInit+0xb4>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba8 <prvHeapInit+0xb8>)
 8007b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a09      	ldr	r2, [pc, #36]	@ (8007bac <prvHeapInit+0xbc>)
 8007b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b88:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <prvHeapInit+0xc0>)
 8007b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b8e:	601a      	str	r2, [r3, #0]
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000ff0 	.word	0x20000ff0
 8007ba0:	20001bf0 	.word	0x20001bf0
 8007ba4:	20001bf8 	.word	0x20001bf8
 8007ba8:	20001c00 	.word	0x20001c00
 8007bac:	20001bfc 	.word	0x20001bfc
 8007bb0:	20001c0c 	.word	0x20001c0c

08007bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bbc:	4b28      	ldr	r3, [pc, #160]	@ (8007c60 <prvInsertBlockIntoFreeList+0xac>)
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e002      	b.n	8007bc8 <prvInsertBlockIntoFreeList+0x14>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d8f7      	bhi.n	8007bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d108      	bne.n	8007bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	441a      	add	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d118      	bne.n	8007c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b15      	ldr	r3, [pc, #84]	@ (8007c64 <prvInsertBlockIntoFreeList+0xb0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d00d      	beq.n	8007c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	441a      	add	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e008      	b.n	8007c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <prvInsertBlockIntoFreeList+0xb0>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e003      	b.n	8007c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d002      	beq.n	8007c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20001bf0 	.word	0x20001bf0
 8007c64:	20001bf8 	.word	0x20001bf8

08007c68 <memset>:
 8007c68:	4402      	add	r2, r0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d100      	bne.n	8007c72 <memset+0xa>
 8007c70:	4770      	bx	lr
 8007c72:	f803 1b01 	strb.w	r1, [r3], #1
 8007c76:	e7f9      	b.n	8007c6c <memset+0x4>

08007c78 <_reclaim_reent>:
 8007c78:	4b29      	ldr	r3, [pc, #164]	@ (8007d20 <_reclaim_reent+0xa8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4283      	cmp	r3, r0
 8007c7e:	b570      	push	{r4, r5, r6, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	d04b      	beq.n	8007d1c <_reclaim_reent+0xa4>
 8007c84:	69c3      	ldr	r3, [r0, #28]
 8007c86:	b1ab      	cbz	r3, 8007cb4 <_reclaim_reent+0x3c>
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	b16b      	cbz	r3, 8007ca8 <_reclaim_reent+0x30>
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	69e3      	ldr	r3, [r4, #28]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	5959      	ldr	r1, [r3, r5]
 8007c94:	2900      	cmp	r1, #0
 8007c96:	d13b      	bne.n	8007d10 <_reclaim_reent+0x98>
 8007c98:	3504      	adds	r5, #4
 8007c9a:	2d80      	cmp	r5, #128	@ 0x80
 8007c9c:	d1f7      	bne.n	8007c8e <_reclaim_reent+0x16>
 8007c9e:	69e3      	ldr	r3, [r4, #28]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	68d9      	ldr	r1, [r3, #12]
 8007ca4:	f000 f872 	bl	8007d8c <_free_r>
 8007ca8:	69e3      	ldr	r3, [r4, #28]
 8007caa:	6819      	ldr	r1, [r3, #0]
 8007cac:	b111      	cbz	r1, 8007cb4 <_reclaim_reent+0x3c>
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 f86c 	bl	8007d8c <_free_r>
 8007cb4:	6961      	ldr	r1, [r4, #20]
 8007cb6:	b111      	cbz	r1, 8007cbe <_reclaim_reent+0x46>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f867 	bl	8007d8c <_free_r>
 8007cbe:	69e1      	ldr	r1, [r4, #28]
 8007cc0:	b111      	cbz	r1, 8007cc8 <_reclaim_reent+0x50>
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f862 	bl	8007d8c <_free_r>
 8007cc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007cca:	b111      	cbz	r1, 8007cd2 <_reclaim_reent+0x5a>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 f85d 	bl	8007d8c <_free_r>
 8007cd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cd4:	b111      	cbz	r1, 8007cdc <_reclaim_reent+0x64>
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 f858 	bl	8007d8c <_free_r>
 8007cdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007cde:	b111      	cbz	r1, 8007ce6 <_reclaim_reent+0x6e>
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 f853 	bl	8007d8c <_free_r>
 8007ce6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ce8:	b111      	cbz	r1, 8007cf0 <_reclaim_reent+0x78>
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f84e 	bl	8007d8c <_free_r>
 8007cf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cf2:	b111      	cbz	r1, 8007cfa <_reclaim_reent+0x82>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 f849 	bl	8007d8c <_free_r>
 8007cfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007cfc:	b111      	cbz	r1, 8007d04 <_reclaim_reent+0x8c>
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f000 f844 	bl	8007d8c <_free_r>
 8007d04:	6a23      	ldr	r3, [r4, #32]
 8007d06:	b14b      	cbz	r3, 8007d1c <_reclaim_reent+0xa4>
 8007d08:	4620      	mov	r0, r4
 8007d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d0e:	4718      	bx	r3
 8007d10:	680e      	ldr	r6, [r1, #0]
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 f83a 	bl	8007d8c <_free_r>
 8007d18:	4631      	mov	r1, r6
 8007d1a:	e7bb      	b.n	8007c94 <_reclaim_reent+0x1c>
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000010 	.word	0x20000010

08007d24 <__libc_init_array>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4d0d      	ldr	r5, [pc, #52]	@ (8007d5c <__libc_init_array+0x38>)
 8007d28:	4c0d      	ldr	r4, [pc, #52]	@ (8007d60 <__libc_init_array+0x3c>)
 8007d2a:	1b64      	subs	r4, r4, r5
 8007d2c:	10a4      	asrs	r4, r4, #2
 8007d2e:	2600      	movs	r6, #0
 8007d30:	42a6      	cmp	r6, r4
 8007d32:	d109      	bne.n	8007d48 <__libc_init_array+0x24>
 8007d34:	4d0b      	ldr	r5, [pc, #44]	@ (8007d64 <__libc_init_array+0x40>)
 8007d36:	4c0c      	ldr	r4, [pc, #48]	@ (8007d68 <__libc_init_array+0x44>)
 8007d38:	f000 f87e 	bl	8007e38 <_init>
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	10a4      	asrs	r4, r4, #2
 8007d40:	2600      	movs	r6, #0
 8007d42:	42a6      	cmp	r6, r4
 8007d44:	d105      	bne.n	8007d52 <__libc_init_array+0x2e>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4c:	4798      	blx	r3
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7ee      	b.n	8007d30 <__libc_init_array+0xc>
 8007d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d56:	4798      	blx	r3
 8007d58:	3601      	adds	r6, #1
 8007d5a:	e7f2      	b.n	8007d42 <__libc_init_array+0x1e>
 8007d5c:	08007f1c 	.word	0x08007f1c
 8007d60:	08007f1c 	.word	0x08007f1c
 8007d64:	08007f1c 	.word	0x08007f1c
 8007d68:	08007f20 	.word	0x08007f20

08007d6c <__retarget_lock_acquire_recursive>:
 8007d6c:	4770      	bx	lr

08007d6e <__retarget_lock_release_recursive>:
 8007d6e:	4770      	bx	lr

08007d70 <memcpy>:
 8007d70:	440a      	add	r2, r1
 8007d72:	4291      	cmp	r1, r2
 8007d74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d78:	d100      	bne.n	8007d7c <memcpy+0xc>
 8007d7a:	4770      	bx	lr
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d86:	4291      	cmp	r1, r2
 8007d88:	d1f9      	bne.n	8007d7e <memcpy+0xe>
 8007d8a:	bd10      	pop	{r4, pc}

08007d8c <_free_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4605      	mov	r5, r0
 8007d90:	2900      	cmp	r1, #0
 8007d92:	d041      	beq.n	8007e18 <_free_r+0x8c>
 8007d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d98:	1f0c      	subs	r4, r1, #4
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bfb8      	it	lt
 8007d9e:	18e4      	addlt	r4, r4, r3
 8007da0:	f000 f83e 	bl	8007e20 <__malloc_lock>
 8007da4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e1c <_free_r+0x90>)
 8007da6:	6813      	ldr	r3, [r2, #0]
 8007da8:	b933      	cbnz	r3, 8007db8 <_free_r+0x2c>
 8007daa:	6063      	str	r3, [r4, #4]
 8007dac:	6014      	str	r4, [r2, #0]
 8007dae:	4628      	mov	r0, r5
 8007db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db4:	f000 b83a 	b.w	8007e2c <__malloc_unlock>
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d908      	bls.n	8007dce <_free_r+0x42>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	1821      	adds	r1, r4, r0
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	bf01      	itttt	eq
 8007dc4:	6819      	ldreq	r1, [r3, #0]
 8007dc6:	685b      	ldreq	r3, [r3, #4]
 8007dc8:	1809      	addeq	r1, r1, r0
 8007dca:	6021      	streq	r1, [r4, #0]
 8007dcc:	e7ed      	b.n	8007daa <_free_r+0x1e>
 8007dce:	461a      	mov	r2, r3
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	b10b      	cbz	r3, 8007dd8 <_free_r+0x4c>
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d9fa      	bls.n	8007dce <_free_r+0x42>
 8007dd8:	6811      	ldr	r1, [r2, #0]
 8007dda:	1850      	adds	r0, r2, r1
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d10b      	bne.n	8007df8 <_free_r+0x6c>
 8007de0:	6820      	ldr	r0, [r4, #0]
 8007de2:	4401      	add	r1, r0
 8007de4:	1850      	adds	r0, r2, r1
 8007de6:	4283      	cmp	r3, r0
 8007de8:	6011      	str	r1, [r2, #0]
 8007dea:	d1e0      	bne.n	8007dae <_free_r+0x22>
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	6053      	str	r3, [r2, #4]
 8007df2:	4408      	add	r0, r1
 8007df4:	6010      	str	r0, [r2, #0]
 8007df6:	e7da      	b.n	8007dae <_free_r+0x22>
 8007df8:	d902      	bls.n	8007e00 <_free_r+0x74>
 8007dfa:	230c      	movs	r3, #12
 8007dfc:	602b      	str	r3, [r5, #0]
 8007dfe:	e7d6      	b.n	8007dae <_free_r+0x22>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	1821      	adds	r1, r4, r0
 8007e04:	428b      	cmp	r3, r1
 8007e06:	bf04      	itt	eq
 8007e08:	6819      	ldreq	r1, [r3, #0]
 8007e0a:	685b      	ldreq	r3, [r3, #4]
 8007e0c:	6063      	str	r3, [r4, #4]
 8007e0e:	bf04      	itt	eq
 8007e10:	1809      	addeq	r1, r1, r0
 8007e12:	6021      	streq	r1, [r4, #0]
 8007e14:	6054      	str	r4, [r2, #4]
 8007e16:	e7ca      	b.n	8007dae <_free_r+0x22>
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20001d4c 	.word	0x20001d4c

08007e20 <__malloc_lock>:
 8007e20:	4801      	ldr	r0, [pc, #4]	@ (8007e28 <__malloc_lock+0x8>)
 8007e22:	f7ff bfa3 	b.w	8007d6c <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	20001d48 	.word	0x20001d48

08007e2c <__malloc_unlock>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	@ (8007e34 <__malloc_unlock+0x8>)
 8007e2e:	f7ff bf9e 	b.w	8007d6e <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	20001d48 	.word	0x20001d48

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
